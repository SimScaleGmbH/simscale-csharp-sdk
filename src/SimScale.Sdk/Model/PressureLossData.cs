/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// PressureLossData
    /// </summary>
    [DataContract]
    public partial class PressureLossData : IEquatable<PressureLossData>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PressureLossData" /> class.
        /// </summary>
        /// <param name="pressureLossCurve">pressureLossCurve.</param>
        /// <param name="flowDirectionLength">flowDirectionLength.</param>
        /// <param name="crossSectionArea">crossSectionArea.</param>
        public PressureLossData(DimensionalFunctionPressure pressureLossCurve = default(DimensionalFunctionPressure), DimensionalLength flowDirectionLength = default(DimensionalLength), DimensionalArea crossSectionArea = default(DimensionalArea))
        {
            this.PressureLossCurve = pressureLossCurve;
            this.FlowDirectionLength = flowDirectionLength;
            this.CrossSectionArea = crossSectionArea;
        }
        
        /// <summary>
        /// Gets or Sets PressureLossCurve
        /// </summary>
        [DataMember(Name="pressureLossCurve", EmitDefaultValue=false)]
        public DimensionalFunctionPressure PressureLossCurve { get; set; }

        /// <summary>
        /// Gets or Sets FlowDirectionLength
        /// </summary>
        [DataMember(Name="flowDirectionLength", EmitDefaultValue=false)]
        public DimensionalLength FlowDirectionLength { get; set; }

        /// <summary>
        /// Gets or Sets CrossSectionArea
        /// </summary>
        [DataMember(Name="crossSectionArea", EmitDefaultValue=false)]
        public DimensionalArea CrossSectionArea { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PressureLossData {\n");
            sb.Append("  PressureLossCurve: ").Append(PressureLossCurve).Append("\n");
            sb.Append("  FlowDirectionLength: ").Append(FlowDirectionLength).Append("\n");
            sb.Append("  CrossSectionArea: ").Append(CrossSectionArea).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PressureLossData);
        }

        /// <summary>
        /// Returns true if PressureLossData instances are equal
        /// </summary>
        /// <param name="input">Instance of PressureLossData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PressureLossData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PressureLossCurve == input.PressureLossCurve ||
                    (this.PressureLossCurve != null &&
                    this.PressureLossCurve.Equals(input.PressureLossCurve))
                ) && 
                (
                    this.FlowDirectionLength == input.FlowDirectionLength ||
                    (this.FlowDirectionLength != null &&
                    this.FlowDirectionLength.Equals(input.FlowDirectionLength))
                ) && 
                (
                    this.CrossSectionArea == input.CrossSectionArea ||
                    (this.CrossSectionArea != null &&
                    this.CrossSectionArea.Equals(input.CrossSectionArea))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PressureLossCurve != null)
                    hashCode = hashCode * 59 + this.PressureLossCurve.GetHashCode();
                if (this.FlowDirectionLength != null)
                    hashCode = hashCode * 59 + this.FlowDirectionLength.GetHashCode();
                if (this.CrossSectionArea != null)
                    hashCode = hashCode * 59 + this.CrossSectionArea.GetHashCode();
                return hashCode;
            }
        }

    }

}
