/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// CustomAxisDefinition
    /// </summary>
    [DataContract]
    public partial class CustomAxisDefinition : OneOfHingeConstraintBCAxisDefinition, IEquatable<CustomAxisDefinition>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomAxisDefinition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomAxisDefinition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomAxisDefinition" /> class.
        /// </summary>
        /// <param name="type">Schema name: CustomAxisDefinition (required) (default to &quot;CUSTOM&quot;).</param>
        /// <param name="axisOrigin">axisOrigin.</param>
        /// <param name="axisDirection">axisDirection.</param>
        /// <param name="beamRadius">beamRadius.</param>
        /// <param name="beamStiffness">beamStiffness.</param>
        /// <param name="beamPoissonRatio">beamPoissonRatio.</param>
        /// <param name="beamDensity">beamDensity.</param>
        public CustomAxisDefinition(string type = "CUSTOM", DimensionalVectorLength axisOrigin = default(DimensionalVectorLength), DimensionalVectorDimensionless axisDirection = default(DimensionalVectorDimensionless), DimensionalLength beamRadius = default(DimensionalLength), DimensionalPressure beamStiffness = default(DimensionalPressure), DimensionalDimensionless beamPoissonRatio = default(DimensionalDimensionless), DimensionalDensity beamDensity = default(DimensionalDensity))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for CustomAxisDefinition and cannot be null");
            this.AxisOrigin = axisOrigin;
            this.AxisDirection = axisDirection;
            this.BeamRadius = beamRadius;
            this.BeamStiffness = beamStiffness;
            this.BeamPoissonRatio = beamPoissonRatio;
            this.BeamDensity = beamDensity;
        }
        
        /// <summary>
        /// Schema name: CustomAxisDefinition
        /// </summary>
        /// <value>Schema name: CustomAxisDefinition</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets AxisOrigin
        /// </summary>
        [DataMember(Name="axisOrigin", EmitDefaultValue=false)]
        public DimensionalVectorLength AxisOrigin { get; set; }

        /// <summary>
        /// Gets or Sets AxisDirection
        /// </summary>
        [DataMember(Name="axisDirection", EmitDefaultValue=false)]
        public DimensionalVectorDimensionless AxisDirection { get; set; }

        /// <summary>
        /// Gets or Sets BeamRadius
        /// </summary>
        [DataMember(Name="beamRadius", EmitDefaultValue=false)]
        public DimensionalLength BeamRadius { get; set; }

        /// <summary>
        /// Gets or Sets BeamStiffness
        /// </summary>
        [DataMember(Name="beamStiffness", EmitDefaultValue=false)]
        public DimensionalPressure BeamStiffness { get; set; }

        /// <summary>
        /// Gets or Sets BeamPoissonRatio
        /// </summary>
        [DataMember(Name="beamPoissonRatio", EmitDefaultValue=false)]
        public DimensionalDimensionless BeamPoissonRatio { get; set; }

        /// <summary>
        /// Gets or Sets BeamDensity
        /// </summary>
        [DataMember(Name="beamDensity", EmitDefaultValue=false)]
        public DimensionalDensity BeamDensity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomAxisDefinition {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AxisOrigin: ").Append(AxisOrigin).Append("\n");
            sb.Append("  AxisDirection: ").Append(AxisDirection).Append("\n");
            sb.Append("  BeamRadius: ").Append(BeamRadius).Append("\n");
            sb.Append("  BeamStiffness: ").Append(BeamStiffness).Append("\n");
            sb.Append("  BeamPoissonRatio: ").Append(BeamPoissonRatio).Append("\n");
            sb.Append("  BeamDensity: ").Append(BeamDensity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomAxisDefinition);
        }

        /// <summary>
        /// Returns true if CustomAxisDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomAxisDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomAxisDefinition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.AxisOrigin == input.AxisOrigin ||
                    (this.AxisOrigin != null &&
                    this.AxisOrigin.Equals(input.AxisOrigin))
                ) && 
                (
                    this.AxisDirection == input.AxisDirection ||
                    (this.AxisDirection != null &&
                    this.AxisDirection.Equals(input.AxisDirection))
                ) && 
                (
                    this.BeamRadius == input.BeamRadius ||
                    (this.BeamRadius != null &&
                    this.BeamRadius.Equals(input.BeamRadius))
                ) && 
                (
                    this.BeamStiffness == input.BeamStiffness ||
                    (this.BeamStiffness != null &&
                    this.BeamStiffness.Equals(input.BeamStiffness))
                ) && 
                (
                    this.BeamPoissonRatio == input.BeamPoissonRatio ||
                    (this.BeamPoissonRatio != null &&
                    this.BeamPoissonRatio.Equals(input.BeamPoissonRatio))
                ) && 
                (
                    this.BeamDensity == input.BeamDensity ||
                    (this.BeamDensity != null &&
                    this.BeamDensity.Equals(input.BeamDensity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.AxisOrigin != null)
                    hashCode = hashCode * 59 + this.AxisOrigin.GetHashCode();
                if (this.AxisDirection != null)
                    hashCode = hashCode * 59 + this.AxisDirection.GetHashCode();
                if (this.BeamRadius != null)
                    hashCode = hashCode * 59 + this.BeamRadius.GetHashCode();
                if (this.BeamStiffness != null)
                    hashCode = hashCode * 59 + this.BeamStiffness.GetHashCode();
                if (this.BeamPoissonRatio != null)
                    hashCode = hashCode * 59 + this.BeamPoissonRatio.GetHashCode();
                if (this.BeamDensity != null)
                    hashCode = hashCode * 59 + this.BeamDensity.GetHashCode();
                return hashCode;
            }
        }

    }

}
