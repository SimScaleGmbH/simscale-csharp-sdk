/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// AutoTimestepDefinition
    /// </summary>
    [DataContract]
    public partial class AutoTimestepDefinition : OneOfSolidSimulationControlTimestepDefinition, IEquatable<AutoTimestepDefinition>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AutoTimestepDefinition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AutoTimestepDefinition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AutoTimestepDefinition" /> class.
        /// </summary>
        /// <param name="type">type (required) (default to &quot;AUTOMATIC_V27&quot;).</param>
        /// <param name="simulationInterval">simulationInterval.</param>
        /// <param name="maximumTimestepLength">maximumTimestepLength.</param>
        /// <param name="minimumTimestepLength">minimumTimestepLength.</param>
        /// <param name="maximumResidual">maximumResidual (default to 100000M).</param>
        /// <param name="retimingEvent">retimingEvent.</param>
        public AutoTimestepDefinition(string type = "AUTOMATIC_V27", DimensionalTime simulationInterval = default(DimensionalTime), RestrictedDimensionalFunctionTime maximumTimestepLength = default(RestrictedDimensionalFunctionTime), DimensionalTime minimumTimestepLength = default(DimensionalTime), decimal? maximumResidual = default(decimal?), OneOfAutoTimestepDefinitionRetimingEvent retimingEvent = default(OneOfAutoTimestepDefinitionRetimingEvent))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for AutoTimestepDefinition and cannot be null");
            this.SimulationInterval = simulationInterval;
            this.MaximumTimestepLength = maximumTimestepLength;
            this.MinimumTimestepLength = minimumTimestepLength;
            this.MaximumResidual = maximumResidual;
            this.RetimingEvent = retimingEvent;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets SimulationInterval
        /// </summary>
        [DataMember(Name="simulationInterval", EmitDefaultValue=false)]
        public DimensionalTime SimulationInterval { get; set; }

        /// <summary>
        /// Gets or Sets MaximumTimestepLength
        /// </summary>
        [DataMember(Name="maximumTimestepLength", EmitDefaultValue=false)]
        public RestrictedDimensionalFunctionTime MaximumTimestepLength { get; set; }

        /// <summary>
        /// Gets or Sets MinimumTimestepLength
        /// </summary>
        [DataMember(Name="minimumTimestepLength", EmitDefaultValue=false)]
        public DimensionalTime MinimumTimestepLength { get; set; }

        /// <summary>
        /// Gets or Sets MaximumResidual
        /// </summary>
        [DataMember(Name="maximumResidual", EmitDefaultValue=false)]
        public decimal? MaximumResidual { get; set; }

        /// <summary>
        /// Gets or Sets RetimingEvent
        /// </summary>
        [DataMember(Name="retimingEvent", EmitDefaultValue=false)]
        public OneOfAutoTimestepDefinitionRetimingEvent RetimingEvent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AutoTimestepDefinition {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SimulationInterval: ").Append(SimulationInterval).Append("\n");
            sb.Append("  MaximumTimestepLength: ").Append(MaximumTimestepLength).Append("\n");
            sb.Append("  MinimumTimestepLength: ").Append(MinimumTimestepLength).Append("\n");
            sb.Append("  MaximumResidual: ").Append(MaximumResidual).Append("\n");
            sb.Append("  RetimingEvent: ").Append(RetimingEvent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AutoTimestepDefinition);
        }

        /// <summary>
        /// Returns true if AutoTimestepDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of AutoTimestepDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AutoTimestepDefinition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.SimulationInterval == input.SimulationInterval ||
                    (this.SimulationInterval != null &&
                    this.SimulationInterval.Equals(input.SimulationInterval))
                ) && 
                (
                    this.MaximumTimestepLength == input.MaximumTimestepLength ||
                    (this.MaximumTimestepLength != null &&
                    this.MaximumTimestepLength.Equals(input.MaximumTimestepLength))
                ) && 
                (
                    this.MinimumTimestepLength == input.MinimumTimestepLength ||
                    (this.MinimumTimestepLength != null &&
                    this.MinimumTimestepLength.Equals(input.MinimumTimestepLength))
                ) && 
                (
                    this.MaximumResidual == input.MaximumResidual ||
                    (this.MaximumResidual != null &&
                    this.MaximumResidual.Equals(input.MaximumResidual))
                ) && 
                (
                    this.RetimingEvent == input.RetimingEvent ||
                    (this.RetimingEvent != null &&
                    this.RetimingEvent.Equals(input.RetimingEvent))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.SimulationInterval != null)
                    hashCode = hashCode * 59 + this.SimulationInterval.GetHashCode();
                if (this.MaximumTimestepLength != null)
                    hashCode = hashCode * 59 + this.MaximumTimestepLength.GetHashCode();
                if (this.MinimumTimestepLength != null)
                    hashCode = hashCode * 59 + this.MinimumTimestepLength.GetHashCode();
                if (this.MaximumResidual != null)
                    hashCode = hashCode * 59 + this.MaximumResidual.GetHashCode();
                if (this.RetimingEvent != null)
                    hashCode = hashCode * 59 + this.RetimingEvent.GetHashCode();
                return hashCode;
            }
        }

    }

}
