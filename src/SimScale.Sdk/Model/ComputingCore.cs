/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// ComputingCore
    /// </summary>
    [DataContract]
    public partial class ComputingCore : IEquatable<ComputingCore>
    {
        /// <summary>
        /// &lt;p&gt;Selecting more processor cores will speed up the simulation process. Choosing a smaller computation instance will save core hours. &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/simulation-control-fluid/#number-of-processors&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;Selecting more processor cores will speed up the simulation process. Choosing a smaller computation instance will save core hours. &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/simulation-control-fluid/#number-of-processors&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.&lt;/p&gt;</value>
        public enum NumOfProcessorsEnum
        {
            /// <summary>
            /// Enum NUMBER_MINUS_1 for value: -1
            /// </summary>
            NUMBER_MINUS_1 = -1,

            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            NUMBER_2 = 2,

            /// <summary>
            /// Enum NUMBER_4 for value: 4
            /// </summary>
            NUMBER_4 = 4,

            /// <summary>
            /// Enum NUMBER_8 for value: 8
            /// </summary>
            NUMBER_8 = 8,

            /// <summary>
            /// Enum NUMBER_16 for value: 16
            /// </summary>
            NUMBER_16 = 16,

            /// <summary>
            /// Enum NUMBER_32 for value: 32
            /// </summary>
            NUMBER_32 = 32,

            /// <summary>
            /// Enum NUMBER_48 for value: 48
            /// </summary>
            NUMBER_48 = 48,

            /// <summary>
            /// Enum NUMBER_64 for value: 64
            /// </summary>
            NUMBER_64 = 64,

            /// <summary>
            /// Enum NUMBER_96 for value: 96
            /// </summary>
            NUMBER_96 = 96,

            /// <summary>
            /// Enum NUMBER_128 for value: 128
            /// </summary>
            NUMBER_128 = 128,

            /// <summary>
            /// Enum NUMBER_192 for value: 192
            /// </summary>
            NUMBER_192 = 192

        }

        /// <summary>
        /// &lt;p&gt;Selecting more processor cores will speed up the simulation process. Choosing a smaller computation instance will save core hours. &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/simulation-control-fluid/#number-of-processors&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;Selecting more processor cores will speed up the simulation process. Choosing a smaller computation instance will save core hours. &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/simulation-control-fluid/#number-of-processors&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.&lt;/p&gt;</value>
        [DataMember(Name="numOfProcessors", EmitDefaultValue=false)]
        public NumOfProcessorsEnum? NumOfProcessors { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ComputingCore" /> class.
        /// </summary>
        /// <param name="numOfProcessors">&lt;p&gt;Selecting more processor cores will speed up the simulation process. Choosing a smaller computation instance will save core hours. &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/simulation-control-fluid/#number-of-processors&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.&lt;/p&gt; (default to NumOfProcessorsEnum.NUMBER_MINUS_1).</param>
        /// <param name="numOfComputingProcessors">&lt;p&gt;Set the number of processors which shall be used for the parallel computation.&lt;/p&gt; (default to -1).</param>
        /// <param name="domainDecomposition">domainDecomposition.</param>
        /// <param name="numOfThreads">numOfThreads (default to 1).</param>
        /// <param name="partitionMesh">partitionMesh (default to false).</param>
        public ComputingCore(NumOfProcessorsEnum? numOfProcessors = default(NumOfProcessorsEnum?), int? numOfComputingProcessors = default(int?), OneOfComputingCoreDomainDecomposition domainDecomposition = default(OneOfComputingCoreDomainDecomposition), int? numOfThreads = default(int?), bool? partitionMesh = default(bool?))
        {
            this.NumOfProcessors = numOfProcessors;
            this.NumOfComputingProcessors = numOfComputingProcessors;
            this.DomainDecomposition = domainDecomposition;
            this.NumOfThreads = numOfThreads;
            this.PartitionMesh = partitionMesh;
        }
        
        /// <summary>
        /// &lt;p&gt;Set the number of processors which shall be used for the parallel computation.&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;Set the number of processors which shall be used for the parallel computation.&lt;/p&gt;</value>
        [DataMember(Name="numOfComputingProcessors", EmitDefaultValue=false)]
        public int? NumOfComputingProcessors { get; set; }

        /// <summary>
        /// Gets or Sets DomainDecomposition
        /// </summary>
        [DataMember(Name="domainDecomposition", EmitDefaultValue=false)]
        public OneOfComputingCoreDomainDecomposition DomainDecomposition { get; set; }

        /// <summary>
        /// Gets or Sets NumOfThreads
        /// </summary>
        [DataMember(Name="numOfThreads", EmitDefaultValue=false)]
        public int? NumOfThreads { get; set; }

        /// <summary>
        /// Gets or Sets PartitionMesh
        /// </summary>
        [DataMember(Name="partitionMesh", EmitDefaultValue=false)]
        public bool? PartitionMesh { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComputingCore {\n");
            sb.Append("  NumOfProcessors: ").Append(NumOfProcessors).Append("\n");
            sb.Append("  NumOfComputingProcessors: ").Append(NumOfComputingProcessors).Append("\n");
            sb.Append("  DomainDecomposition: ").Append(DomainDecomposition).Append("\n");
            sb.Append("  NumOfThreads: ").Append(NumOfThreads).Append("\n");
            sb.Append("  PartitionMesh: ").Append(PartitionMesh).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComputingCore);
        }

        /// <summary>
        /// Returns true if ComputingCore instances are equal
        /// </summary>
        /// <param name="input">Instance of ComputingCore to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComputingCore input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NumOfProcessors == input.NumOfProcessors ||
                    this.NumOfProcessors.Equals(input.NumOfProcessors)
                ) && 
                (
                    this.NumOfComputingProcessors == input.NumOfComputingProcessors ||
                    (this.NumOfComputingProcessors != null &&
                    this.NumOfComputingProcessors.Equals(input.NumOfComputingProcessors))
                ) && 
                (
                    this.DomainDecomposition == input.DomainDecomposition ||
                    (this.DomainDecomposition != null &&
                    this.DomainDecomposition.Equals(input.DomainDecomposition))
                ) && 
                (
                    this.NumOfThreads == input.NumOfThreads ||
                    (this.NumOfThreads != null &&
                    this.NumOfThreads.Equals(input.NumOfThreads))
                ) && 
                (
                    this.PartitionMesh == input.PartitionMesh ||
                    (this.PartitionMesh != null &&
                    this.PartitionMesh.Equals(input.PartitionMesh))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.NumOfProcessors.GetHashCode();
                if (this.NumOfComputingProcessors != null)
                    hashCode = hashCode * 59 + this.NumOfComputingProcessors.GetHashCode();
                if (this.DomainDecomposition != null)
                    hashCode = hashCode * 59 + this.DomainDecomposition.GetHashCode();
                if (this.NumOfThreads != null)
                    hashCode = hashCode * 59 + this.NumOfThreads.GetHashCode();
                if (this.PartitionMesh != null)
                    hashCode = hashCode * 59 + this.PartitionMesh.GetHashCode();
                return hashCode;
            }
        }

    }

}
