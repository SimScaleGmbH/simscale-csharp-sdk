/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// Specify the resource to be moved. One of &#x60;folderId&#x60; or &#x60;projectId&#x60; must be defined. An error is returned if both fields are passed.
    /// </summary>
    [DataContract]
    public partial class ResourceToMove : IEquatable<ResourceToMove>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceToMove" /> class.
        /// </summary>
        /// <param name="folderId">Use this field to move an entire folder.</param>
        /// <param name="projectId">Use this field to move a project.</param>
        public ResourceToMove(Guid? folderId = default(Guid?), string projectId = default(string))
        {
            this.FolderId = folderId;
            this.ProjectId = projectId;
        }
        
        /// <summary>
        /// Use this field to move an entire folder
        /// </summary>
        /// <value>Use this field to move an entire folder</value>
        [DataMember(Name="folderId", EmitDefaultValue=false)]
        public Guid? FolderId { get; set; }

        /// <summary>
        /// Use this field to move a project
        /// </summary>
        /// <value>Use this field to move a project</value>
        [DataMember(Name="projectId", EmitDefaultValue=false)]
        public string ProjectId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResourceToMove {\n");
            sb.Append("  FolderId: ").Append(FolderId).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResourceToMove);
        }

        /// <summary>
        /// Returns true if ResourceToMove instances are equal
        /// </summary>
        /// <param name="input">Instance of ResourceToMove to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResourceToMove input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FolderId == input.FolderId ||
                    (this.FolderId != null &&
                    this.FolderId.Equals(input.FolderId))
                ) && 
                (
                    this.ProjectId == input.ProjectId ||
                    (this.ProjectId != null &&
                    this.ProjectId.Equals(input.ProjectId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FolderId != null)
                    hashCode = hashCode * 59 + this.FolderId.GetHashCode();
                if (this.ProjectId != null)
                    hashCode = hashCode * 59 + this.ProjectId.GetHashCode();
                return hashCode;
            }
        }

    }

}
