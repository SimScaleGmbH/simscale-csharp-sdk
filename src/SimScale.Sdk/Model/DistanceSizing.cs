/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// DistanceSizing
    /// </summary>
    [DataContract]
    public partial class DistanceSizing : IEquatable<DistanceSizing>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DistanceSizing" /> class.
        /// </summary>
        /// <param name="distance">distance.</param>
        /// <param name="defaultSize">defaultSize.</param>
        /// <param name="minSize">minSize.</param>
        public DistanceSizing(DimensionalLength distance = default(DimensionalLength), DimensionalLength defaultSize = default(DimensionalLength), DimensionalLength minSize = default(DimensionalLength))
        {
            this.Distance = distance;
            this.DefaultSize = defaultSize;
            this.MinSize = minSize;
        }
        
        /// <summary>
        /// Gets or Sets Distance
        /// </summary>
        [DataMember(Name="distance", EmitDefaultValue=false)]
        public DimensionalLength Distance { get; set; }

        /// <summary>
        /// Gets or Sets DefaultSize
        /// </summary>
        [DataMember(Name="defaultSize", EmitDefaultValue=false)]
        public DimensionalLength DefaultSize { get; set; }

        /// <summary>
        /// Gets or Sets MinSize
        /// </summary>
        [DataMember(Name="minSize", EmitDefaultValue=false)]
        public DimensionalLength MinSize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DistanceSizing {\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  DefaultSize: ").Append(DefaultSize).Append("\n");
            sb.Append("  MinSize: ").Append(MinSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DistanceSizing);
        }

        /// <summary>
        /// Returns true if DistanceSizing instances are equal
        /// </summary>
        /// <param name="input">Instance of DistanceSizing to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DistanceSizing input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Distance == input.Distance ||
                    (this.Distance != null &&
                    this.Distance.Equals(input.Distance))
                ) && 
                (
                    this.DefaultSize == input.DefaultSize ||
                    (this.DefaultSize != null &&
                    this.DefaultSize.Equals(input.DefaultSize))
                ) && 
                (
                    this.MinSize == input.MinSize ||
                    (this.MinSize != null &&
                    this.MinSize.Equals(input.MinSize))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Distance != null)
                    hashCode = hashCode * 59 + this.Distance.GetHashCode();
                if (this.DefaultSize != null)
                    hashCode = hashCode * 59 + this.DefaultSize.GetHashCode();
                if (this.MinSize != null)
                    hashCode = hashCode * 59 + this.MinSize.GetHashCode();
                return hashCode;
            }
        }

    }

}
