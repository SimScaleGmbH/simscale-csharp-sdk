/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// &lt;br&gt;&lt;p&gt;The &lt;b&gt;Thermo models&lt;/b&gt; are used to calculate the specific heat at constant pressure (&lt;i&gt;Cp&lt;/i&gt;) for the fluid. The available models are:&lt;/p&gt;&lt;p&gt;&lt;b&gt;hConst:&lt;/b&gt; This model assumes a constant value for specific heat at fixed pressure (&lt;i&gt;Cp&lt;/i&gt;). &lt;/p&gt;&lt;p&gt;&lt;b&gt;eConst:&lt;/b&gt; This model assumes a constant value for the specific heat at fixed volume (&lt;i&gt;Cv&lt;/i&gt;). &lt;/p&gt;
    /// </summary>
    [DataContract]
    public partial class EConstThermo : OneOfConstTransportThermo, OneOfSutherlandTransportThermo, IEquatable<EConstThermo>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EConstThermo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EConstThermo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EConstThermo" /> class.
        /// </summary>
        /// <param name="type">&lt;br&gt;&lt;p&gt;The &lt;b&gt;Thermo models&lt;/b&gt; are used to calculate the specific heat at constant pressure (&lt;i&gt;Cp&lt;/i&gt;) for the fluid. The available models are:&lt;/p&gt;&lt;p&gt;&lt;b&gt;hConst:&lt;/b&gt; This model assumes a constant value for specific heat at fixed pressure (&lt;i&gt;Cp&lt;/i&gt;). &lt;/p&gt;&lt;p&gt;&lt;b&gt;eConst:&lt;/b&gt; This model assumes a constant value for the specific heat at fixed volume (&lt;i&gt;Cv&lt;/i&gt;). &lt;/p&gt;  Schema name: EConstThermo (required) (default to &quot;ECONST&quot;).</param>
        /// <param name="specificHeat">specificHeat.</param>
        /// <param name="heatOfFormation">heatOfFormation.</param>
        /// <param name="equationOfState">equationOfState.</param>
        public EConstThermo(string type = "ECONST", DimensionalSpecificHeat specificHeat = default(DimensionalSpecificHeat), DimensionalSpecificEnergy heatOfFormation = default(DimensionalSpecificEnergy), PerfectGasEquationOfState equationOfState = default(PerfectGasEquationOfState))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for EConstThermo and cannot be null");
            this.SpecificHeat = specificHeat;
            this.HeatOfFormation = heatOfFormation;
            this.EquationOfState = equationOfState;
        }
        
        /// <summary>
        /// &lt;br&gt;&lt;p&gt;The &lt;b&gt;Thermo models&lt;/b&gt; are used to calculate the specific heat at constant pressure (&lt;i&gt;Cp&lt;/i&gt;) for the fluid. The available models are:&lt;/p&gt;&lt;p&gt;&lt;b&gt;hConst:&lt;/b&gt; This model assumes a constant value for specific heat at fixed pressure (&lt;i&gt;Cp&lt;/i&gt;). &lt;/p&gt;&lt;p&gt;&lt;b&gt;eConst:&lt;/b&gt; This model assumes a constant value for the specific heat at fixed volume (&lt;i&gt;Cv&lt;/i&gt;). &lt;/p&gt;  Schema name: EConstThermo
        /// </summary>
        /// <value>&lt;br&gt;&lt;p&gt;The &lt;b&gt;Thermo models&lt;/b&gt; are used to calculate the specific heat at constant pressure (&lt;i&gt;Cp&lt;/i&gt;) for the fluid. The available models are:&lt;/p&gt;&lt;p&gt;&lt;b&gt;hConst:&lt;/b&gt; This model assumes a constant value for specific heat at fixed pressure (&lt;i&gt;Cp&lt;/i&gt;). &lt;/p&gt;&lt;p&gt;&lt;b&gt;eConst:&lt;/b&gt; This model assumes a constant value for the specific heat at fixed volume (&lt;i&gt;Cv&lt;/i&gt;). &lt;/p&gt;  Schema name: EConstThermo</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets SpecificHeat
        /// </summary>
        [DataMember(Name="specificHeat", EmitDefaultValue=false)]
        public DimensionalSpecificHeat SpecificHeat { get; set; }

        /// <summary>
        /// Gets or Sets HeatOfFormation
        /// </summary>
        [DataMember(Name="heatOfFormation", EmitDefaultValue=false)]
        public DimensionalSpecificEnergy HeatOfFormation { get; set; }

        /// <summary>
        /// Gets or Sets EquationOfState
        /// </summary>
        [DataMember(Name="equationOfState", EmitDefaultValue=false)]
        public PerfectGasEquationOfState EquationOfState { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EConstThermo {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SpecificHeat: ").Append(SpecificHeat).Append("\n");
            sb.Append("  HeatOfFormation: ").Append(HeatOfFormation).Append("\n");
            sb.Append("  EquationOfState: ").Append(EquationOfState).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EConstThermo);
        }

        /// <summary>
        /// Returns true if EConstThermo instances are equal
        /// </summary>
        /// <param name="input">Instance of EConstThermo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EConstThermo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.SpecificHeat == input.SpecificHeat ||
                    (this.SpecificHeat != null &&
                    this.SpecificHeat.Equals(input.SpecificHeat))
                ) && 
                (
                    this.HeatOfFormation == input.HeatOfFormation ||
                    (this.HeatOfFormation != null &&
                    this.HeatOfFormation.Equals(input.HeatOfFormation))
                ) && 
                (
                    this.EquationOfState == input.EquationOfState ||
                    (this.EquationOfState != null &&
                    this.EquationOfState.Equals(input.EquationOfState))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.SpecificHeat != null)
                    hashCode = hashCode * 59 + this.SpecificHeat.GetHashCode();
                if (this.HeatOfFormation != null)
                    hashCode = hashCode * 59 + this.HeatOfFormation.GetHashCode();
                if (this.EquationOfState != null)
                    hashCode = hashCode * 59 + this.EquationOfState.GetHashCode();
                return hashCode;
            }
        }

    }

}
