/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// IncompletePreconditioner
    /// </summary>
    [DataContract]
    public partial class IncompletePreconditioner : OneOfPETSCSolverPreconditioner, IEquatable<IncompletePreconditioner>
    {
        /// <summary>
        /// Defines RenumberingMethod
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RenumberingMethodEnum
        {
            /// <summary>
            /// Enum MDA for value: MDA
            /// </summary>
            [EnumMember(Value = "MDA")]
            MDA = 1,

            /// <summary>
            /// Enum MD for value: MD
            /// </summary>
            [EnumMember(Value = "MD")]
            MD = 2,

            /// <summary>
            /// Enum RCMK for value: RCMK
            /// </summary>
            [EnumMember(Value = "RCMK")]
            RCMK = 3,

            /// <summary>
            /// Enum INACTIVE for value: INACTIVE
            /// </summary>
            [EnumMember(Value = "INACTIVE")]
            INACTIVE = 4,

            /// <summary>
            /// Enum AMD for value: AMD
            /// </summary>
            [EnumMember(Value = "AMD")]
            AMD = 5,

            /// <summary>
            /// Enum SCOTCH for value: SCOTCH
            /// </summary>
            [EnumMember(Value = "SCOTCH")]
            SCOTCH = 6,

            /// <summary>
            /// Enum AMF for value: AMF
            /// </summary>
            [EnumMember(Value = "AMF")]
            AMF = 7,

            /// <summary>
            /// Enum PORD for value: PORD
            /// </summary>
            [EnumMember(Value = "PORD")]
            PORD = 8,

            /// <summary>
            /// Enum QAMD for value: QAMD
            /// </summary>
            [EnumMember(Value = "QAMD")]
            QAMD = 9,

            /// <summary>
            /// Enum AUTOMATIC for value: AUTOMATIC
            /// </summary>
            [EnumMember(Value = "AUTOMATIC")]
            AUTOMATIC = 10

        }

        /// <summary>
        /// Gets or Sets RenumberingMethod
        /// </summary>
        [DataMember(Name="renumberingMethod", EmitDefaultValue=false)]
        public RenumberingMethodEnum? RenumberingMethod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="IncompletePreconditioner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IncompletePreconditioner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IncompletePreconditioner" /> class.
        /// </summary>
        /// <param name="type">type (required) (default to &quot;INCOMPLETE_LDLT&quot;).</param>
        /// <param name="matrixCompleteness">matrixCompleteness (default to 0).</param>
        /// <param name="preconditionerMatrixGrowth">preconditionerMatrixGrowth (default to 1M).</param>
        /// <param name="renumberingMethod">renumberingMethod (default to RenumberingMethodEnum.RCMK).</param>
        public IncompletePreconditioner(string type = "INCOMPLETE_LDLT", int? matrixCompleteness = default(int?), decimal? preconditionerMatrixGrowth = default(decimal?), RenumberingMethodEnum? renumberingMethod = default(RenumberingMethodEnum?))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for IncompletePreconditioner and cannot be null");
            this.MatrixCompleteness = matrixCompleteness;
            this.PreconditionerMatrixGrowth = preconditionerMatrixGrowth;
            this.RenumberingMethod = renumberingMethod;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets MatrixCompleteness
        /// </summary>
        [DataMember(Name="matrixCompleteness", EmitDefaultValue=false)]
        public int? MatrixCompleteness { get; set; }

        /// <summary>
        /// Gets or Sets PreconditionerMatrixGrowth
        /// </summary>
        [DataMember(Name="preconditionerMatrixGrowth", EmitDefaultValue=false)]
        public decimal? PreconditionerMatrixGrowth { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IncompletePreconditioner {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  MatrixCompleteness: ").Append(MatrixCompleteness).Append("\n");
            sb.Append("  PreconditionerMatrixGrowth: ").Append(PreconditionerMatrixGrowth).Append("\n");
            sb.Append("  RenumberingMethod: ").Append(RenumberingMethod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IncompletePreconditioner);
        }

        /// <summary>
        /// Returns true if IncompletePreconditioner instances are equal
        /// </summary>
        /// <param name="input">Instance of IncompletePreconditioner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IncompletePreconditioner input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.MatrixCompleteness == input.MatrixCompleteness ||
                    (this.MatrixCompleteness != null &&
                    this.MatrixCompleteness.Equals(input.MatrixCompleteness))
                ) && 
                (
                    this.PreconditionerMatrixGrowth == input.PreconditionerMatrixGrowth ||
                    (this.PreconditionerMatrixGrowth != null &&
                    this.PreconditionerMatrixGrowth.Equals(input.PreconditionerMatrixGrowth))
                ) && 
                (
                    this.RenumberingMethod == input.RenumberingMethod ||
                    this.RenumberingMethod.Equals(input.RenumberingMethod)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.MatrixCompleteness != null)
                    hashCode = hashCode * 59 + this.MatrixCompleteness.GetHashCode();
                if (this.PreconditionerMatrixGrowth != null)
                    hashCode = hashCode * 59 + this.PreconditionerMatrixGrowth.GetHashCode();
                hashCode = hashCode * 59 + this.RenumberingMethod.GetHashCode();
                return hashCode;
            }
        }

    }

}
