/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// AdaptiveConvergenceCriteria
    /// </summary>
    [DataContract]
    public partial class AdaptiveConvergenceCriteria : OneOfNewtonKrylovResolutionTypeConvergenceCriteria, OneOfNewtonResolutionTypeConvergenceCriteria, IEquatable<AdaptiveConvergenceCriteria>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdaptiveConvergenceCriteria" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AdaptiveConvergenceCriteria() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AdaptiveConvergenceCriteria" /> class.
        /// </summary>
        /// <param name="type">Schema name: AdaptiveConvergenceCriteria (required) (default to &quot;ADAPTIVE&quot;).</param>
        /// <param name="relativeTolerance">&lt;p&gt;Set the threshold value for the relative convergence criterion. With this criterion, the solver considers a time step as converged if the maximum relative residual - - the maximum absolute residual divided by external loads and support reactions - - in a Newton iteration falls below the given value.&lt;/p&gt;Important remarks: This value is a compromise between solution time and accuracy. A larger value leads to a faster solution time at the cost of losing accuracy in each Newton iteration and possibly causing convergence problems in the following steps. We recommend an upper limit of 1&lt;sup&gt;-3&lt;/sup&gt;. (default to 0.000050M).</param>
        /// <param name="absoluteTolerance">&lt;p&gt;Set the threshold value for the absolute convergence criterion (measured in Newtons). With this criterion, the solver considers a time step as converged if the maximum absolute residual in a Newton iteration falls below the given value.&lt;/p&gt;Important remarks: This value is a compromise between solution time and accuracy. A larger value leads to a faster solution time at the cost of losing accuracy in each Newton iteration and possibly causing convergence problems in the following steps..</param>
        public AdaptiveConvergenceCriteria(string type = "ADAPTIVE", decimal? relativeTolerance = default(decimal?), decimal? absoluteTolerance = default(decimal?))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for AdaptiveConvergenceCriteria and cannot be null");
            this.RelativeTolerance = relativeTolerance;
            this.AbsoluteTolerance = absoluteTolerance;
        }
        
        /// <summary>
        /// Schema name: AdaptiveConvergenceCriteria
        /// </summary>
        /// <value>Schema name: AdaptiveConvergenceCriteria</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// &lt;p&gt;Set the threshold value for the relative convergence criterion. With this criterion, the solver considers a time step as converged if the maximum relative residual - - the maximum absolute residual divided by external loads and support reactions - - in a Newton iteration falls below the given value.&lt;/p&gt;Important remarks: This value is a compromise between solution time and accuracy. A larger value leads to a faster solution time at the cost of losing accuracy in each Newton iteration and possibly causing convergence problems in the following steps. We recommend an upper limit of 1&lt;sup&gt;-3&lt;/sup&gt;.
        /// </summary>
        /// <value>&lt;p&gt;Set the threshold value for the relative convergence criterion. With this criterion, the solver considers a time step as converged if the maximum relative residual - - the maximum absolute residual divided by external loads and support reactions - - in a Newton iteration falls below the given value.&lt;/p&gt;Important remarks: This value is a compromise between solution time and accuracy. A larger value leads to a faster solution time at the cost of losing accuracy in each Newton iteration and possibly causing convergence problems in the following steps. We recommend an upper limit of 1&lt;sup&gt;-3&lt;/sup&gt;.</value>
        [DataMember(Name="relativeTolerance", EmitDefaultValue=false)]
        public decimal? RelativeTolerance { get; set; }

        /// <summary>
        /// &lt;p&gt;Set the threshold value for the absolute convergence criterion (measured in Newtons). With this criterion, the solver considers a time step as converged if the maximum absolute residual in a Newton iteration falls below the given value.&lt;/p&gt;Important remarks: This value is a compromise between solution time and accuracy. A larger value leads to a faster solution time at the cost of losing accuracy in each Newton iteration and possibly causing convergence problems in the following steps.
        /// </summary>
        /// <value>&lt;p&gt;Set the threshold value for the absolute convergence criterion (measured in Newtons). With this criterion, the solver considers a time step as converged if the maximum absolute residual in a Newton iteration falls below the given value.&lt;/p&gt;Important remarks: This value is a compromise between solution time and accuracy. A larger value leads to a faster solution time at the cost of losing accuracy in each Newton iteration and possibly causing convergence problems in the following steps.</value>
        [DataMember(Name="absoluteTolerance", EmitDefaultValue=false)]
        public decimal? AbsoluteTolerance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdaptiveConvergenceCriteria {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  RelativeTolerance: ").Append(RelativeTolerance).Append("\n");
            sb.Append("  AbsoluteTolerance: ").Append(AbsoluteTolerance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdaptiveConvergenceCriteria);
        }

        /// <summary>
        /// Returns true if AdaptiveConvergenceCriteria instances are equal
        /// </summary>
        /// <param name="input">Instance of AdaptiveConvergenceCriteria to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdaptiveConvergenceCriteria input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.RelativeTolerance == input.RelativeTolerance ||
                    (this.RelativeTolerance != null &&
                    this.RelativeTolerance.Equals(input.RelativeTolerance))
                ) && 
                (
                    this.AbsoluteTolerance == input.AbsoluteTolerance ||
                    (this.AbsoluteTolerance != null &&
                    this.AbsoluteTolerance.Equals(input.AbsoluteTolerance))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.RelativeTolerance != null)
                    hashCode = hashCode * 59 + this.RelativeTolerance.GetHashCode();
                if (this.AbsoluteTolerance != null)
                    hashCode = hashCode * 59 + this.AbsoluteTolerance.GetHashCode();
                return hashCode;
            }
        }

    }

}
