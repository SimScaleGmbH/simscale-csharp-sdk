/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// MarcContact
    /// </summary>
    [DataContract]
    public partial class MarcContact : IEquatable<MarcContact>
    {
        /// <summary>
        /// Defines Friction
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FrictionEnum
        {
            /// <summary>
            /// Enum NOFRICTION for value: NO_FRICTION
            /// </summary>
            [EnumMember(Value = "NO_FRICTION")]
            NOFRICTION = 1,

            /// <summary>
            /// Enum COULOMBBILINEAR for value: COULOMB_BILINEAR
            /// </summary>
            [EnumMember(Value = "COULOMB_BILINEAR")]
            COULOMBBILINEAR = 2

        }

        /// <summary>
        /// Gets or Sets Friction
        /// </summary>
        [DataMember(Name="friction", EmitDefaultValue=false)]
        public FrictionEnum? Friction { get; set; }
        /// <summary>
        /// Defines ContactFormulation
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ContactFormulationEnum
        {
            /// <summary>
            /// Enum ONESIDED for value: ONE_SIDED
            /// </summary>
            [EnumMember(Value = "ONE_SIDED")]
            ONESIDED = 1,

            /// <summary>
            /// Enum DOUBLESIDED for value: DOUBLE_SIDED
            /// </summary>
            [EnumMember(Value = "DOUBLE_SIDED")]
            DOUBLESIDED = 2

        }

        /// <summary>
        /// Gets or Sets ContactFormulation
        /// </summary>
        [DataMember(Name="contactFormulation", EmitDefaultValue=false)]
        public ContactFormulationEnum? ContactFormulation { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MarcContact" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MarcContact() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MarcContact" /> class.
        /// </summary>
        /// <param name="type">Schema name: MarcContact (required) (default to &quot;CONTACT&quot;).</param>
        /// <param name="friction">friction (default to FrictionEnum.COULOMBBILINEAR).</param>
        /// <param name="contactFormulation">contactFormulation (default to ContactFormulationEnum.DOUBLESIDED).</param>
        /// <param name="connections">connections.</param>
        public MarcContact(string type = "CONTACT", FrictionEnum? friction = default(FrictionEnum?), ContactFormulationEnum? contactFormulation = default(ContactFormulationEnum?), List<OneOfMarcContactConnections> connections = default(List<OneOfMarcContactConnections>))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for MarcContact and cannot be null");
            this.Friction = friction;
            this.ContactFormulation = contactFormulation;
            this.Connections = connections;
        }
        
        /// <summary>
        /// Schema name: MarcContact
        /// </summary>
        /// <value>Schema name: MarcContact</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Connections
        /// </summary>
        [DataMember(Name="connections", EmitDefaultValue=false)]
        public List<OneOfMarcContactConnections> Connections { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MarcContact {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Friction: ").Append(Friction).Append("\n");
            sb.Append("  ContactFormulation: ").Append(ContactFormulation).Append("\n");
            sb.Append("  Connections: ").Append(Connections).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MarcContact);
        }

        /// <summary>
        /// Returns true if MarcContact instances are equal
        /// </summary>
        /// <param name="input">Instance of MarcContact to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MarcContact input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Friction == input.Friction ||
                    this.Friction.Equals(input.Friction)
                ) && 
                (
                    this.ContactFormulation == input.ContactFormulation ||
                    this.ContactFormulation.Equals(input.ContactFormulation)
                ) && 
                (
                    this.Connections == input.Connections ||
                    this.Connections != null &&
                    input.Connections != null &&
                    this.Connections.SequenceEqual(input.Connections)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                hashCode = hashCode * 59 + this.Friction.GetHashCode();
                hashCode = hashCode * 59 + this.ContactFormulation.GetHashCode();
                if (this.Connections != null)
                    hashCode = hashCode * 59 + this.Connections.GetHashCode();
                return hashCode;
            }
        }

    }

}
