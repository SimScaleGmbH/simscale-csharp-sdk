/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// HhtTimeIntegrationScheme
    /// </summary>
    [DataContract]
    public partial class HhtTimeIntegrationScheme : OneOfImplicitTimeIntegrationTypeScheme, IEquatable<HhtTimeIntegrationScheme>
    {
        /// <summary>
        /// Choose the mode of the HHT method. Compared to the &lt;b&gt;average acceleration&lt;/b&gt; scheme the induced numerical damping of the &lt;b&gt;alpha method&lt;/b&gt; is more selective: it is weaker for low frequencies and it will increase with the frequencies.
        /// </summary>
        /// <value>Choose the mode of the HHT method. Compared to the &lt;b&gt;average acceleration&lt;/b&gt; scheme the induced numerical damping of the &lt;b&gt;alpha method&lt;/b&gt; is more selective: it is weaker for low frequencies and it will increase with the frequencies.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MethodEnum
        {
            /// <summary>
            /// Enum AVERAGEACCELERATION for value: AVERAGE_ACCELERATION
            /// </summary>
            [EnumMember(Value = "AVERAGE_ACCELERATION")]
            AVERAGEACCELERATION = 1,

            /// <summary>
            /// Enum ALPHAMETHOD for value: ALPHA_METHOD
            /// </summary>
            [EnumMember(Value = "ALPHA_METHOD")]
            ALPHAMETHOD = 2

        }

        /// <summary>
        /// Choose the mode of the HHT method. Compared to the &lt;b&gt;average acceleration&lt;/b&gt; scheme the induced numerical damping of the &lt;b&gt;alpha method&lt;/b&gt; is more selective: it is weaker for low frequencies and it will increase with the frequencies.
        /// </summary>
        /// <value>Choose the mode of the HHT method. Compared to the &lt;b&gt;average acceleration&lt;/b&gt; scheme the induced numerical damping of the &lt;b&gt;alpha method&lt;/b&gt; is more selective: it is weaker for low frequencies and it will increase with the frequencies.</value>
        [DataMember(Name="method", EmitDefaultValue=false)]
        public MethodEnum? Method { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="HhtTimeIntegrationScheme" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected HhtTimeIntegrationScheme() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="HhtTimeIntegrationScheme" /> class.
        /// </summary>
        /// <param name="type">type (required) (default to &quot;HHT&quot;).</param>
        /// <param name="alpha">The parameter &lt;b&gt;&amp;alpha;&lt;/b&gt; is given by a negative value. The larger |&lt;b&gt;&amp;alpha;&lt;/b&gt;| is, the more numerical damping is induced. (default to -0.1M).</param>
        /// <param name="method">Choose the mode of the HHT method. Compared to the &lt;b&gt;average acceleration&lt;/b&gt; scheme the induced numerical damping of the &lt;b&gt;alpha method&lt;/b&gt; is more selective: it is weaker for low frequencies and it will increase with the frequencies. (default to MethodEnum.ALPHAMETHOD).</param>
        public HhtTimeIntegrationScheme(string type = "HHT", decimal? alpha = default(decimal?), MethodEnum? method = default(MethodEnum?))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for HhtTimeIntegrationScheme and cannot be null");
            this.Alpha = alpha;
            this.Method = method;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// The parameter &lt;b&gt;&amp;alpha;&lt;/b&gt; is given by a negative value. The larger |&lt;b&gt;&amp;alpha;&lt;/b&gt;| is, the more numerical damping is induced.
        /// </summary>
        /// <value>The parameter &lt;b&gt;&amp;alpha;&lt;/b&gt; is given by a negative value. The larger |&lt;b&gt;&amp;alpha;&lt;/b&gt;| is, the more numerical damping is induced.</value>
        [DataMember(Name="alpha", EmitDefaultValue=false)]
        public decimal? Alpha { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HhtTimeIntegrationScheme {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Alpha: ").Append(Alpha).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HhtTimeIntegrationScheme);
        }

        /// <summary>
        /// Returns true if HhtTimeIntegrationScheme instances are equal
        /// </summary>
        /// <param name="input">Instance of HhtTimeIntegrationScheme to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HhtTimeIntegrationScheme input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Alpha == input.Alpha ||
                    (this.Alpha != null &&
                    this.Alpha.Equals(input.Alpha))
                ) && 
                (
                    this.Method == input.Method ||
                    this.Method.Equals(input.Method)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Alpha != null)
                    hashCode = hashCode * 59 + this.Alpha.GetHashCode();
                hashCode = hashCode * 59 + this.Method.GetHashCode();
                return hashCode;
            }
        }

    }

}
