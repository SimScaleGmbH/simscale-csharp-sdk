/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// FieldCalculationsMeanAgeOfFluidResultControl
    /// </summary>
    [DataContract]
    public partial class FieldCalculationsMeanAgeOfFluidResultControl : OneOfFluidResultControlsFieldCalculations, IEquatable<FieldCalculationsMeanAgeOfFluidResultControl>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FieldCalculationsMeanAgeOfFluidResultControl" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FieldCalculationsMeanAgeOfFluidResultControl() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FieldCalculationsMeanAgeOfFluidResultControl" /> class.
        /// </summary>
        /// <param name="type">Schema name: FieldCalculationsMeanAgeOfFluidResultControl (required) (default to &quot;AGE_OF_FLUID&quot;).</param>
        /// <param name="name">name.</param>
        /// <param name="resultType">resultType.</param>
        /// <param name="ageOfFluidDiffusion">&lt;p&gt;Enable or disable the diffusion term in the age of fluid equation. The exclusion of the diffusion term can be valid for laminar flows but tends to overestimate the age of fluid for turbulent flows.&lt;/p&gt;.</param>
        /// <param name="turbulentSchmidtNumber">&lt;p&gt;The &lt;b&gt;turbulent Schmidt number&lt;/b&gt; characteristic of the flow. For HVAC applications it is recommended to maintain the default value of 0.7.&lt;/p&gt; (default to 0.7M).</param>
        /// <param name="diffusionCoefficient">diffusionCoefficient.</param>
        public FieldCalculationsMeanAgeOfFluidResultControl(string type = "AGE_OF_FLUID", string name = default(string), MeanAgeOfFluidResultType resultType = default(MeanAgeOfFluidResultType), bool? ageOfFluidDiffusion = default(bool?), decimal? turbulentSchmidtNumber = default(decimal?), DimensionalKinematicViscosity diffusionCoefficient = default(DimensionalKinematicViscosity))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for FieldCalculationsMeanAgeOfFluidResultControl and cannot be null");
            this.Name = name;
            this.ResultType = resultType;
            this.AgeOfFluidDiffusion = ageOfFluidDiffusion;
            this.TurbulentSchmidtNumber = turbulentSchmidtNumber;
            this.DiffusionCoefficient = diffusionCoefficient;
        }
        
        /// <summary>
        /// Schema name: FieldCalculationsMeanAgeOfFluidResultControl
        /// </summary>
        /// <value>Schema name: FieldCalculationsMeanAgeOfFluidResultControl</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ResultType
        /// </summary>
        [DataMember(Name="resultType", EmitDefaultValue=false)]
        public MeanAgeOfFluidResultType ResultType { get; set; }

        /// <summary>
        /// &lt;p&gt;Enable or disable the diffusion term in the age of fluid equation. The exclusion of the diffusion term can be valid for laminar flows but tends to overestimate the age of fluid for turbulent flows.&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;Enable or disable the diffusion term in the age of fluid equation. The exclusion of the diffusion term can be valid for laminar flows but tends to overestimate the age of fluid for turbulent flows.&lt;/p&gt;</value>
        [DataMember(Name="ageOfFluidDiffusion", EmitDefaultValue=false)]
        public bool? AgeOfFluidDiffusion { get; set; }

        /// <summary>
        /// &lt;p&gt;The &lt;b&gt;turbulent Schmidt number&lt;/b&gt; characteristic of the flow. For HVAC applications it is recommended to maintain the default value of 0.7.&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;The &lt;b&gt;turbulent Schmidt number&lt;/b&gt; characteristic of the flow. For HVAC applications it is recommended to maintain the default value of 0.7.&lt;/p&gt;</value>
        [DataMember(Name="turbulentSchmidtNumber", EmitDefaultValue=false)]
        public decimal? TurbulentSchmidtNumber { get; set; }

        /// <summary>
        /// Gets or Sets DiffusionCoefficient
        /// </summary>
        [DataMember(Name="diffusionCoefficient", EmitDefaultValue=false)]
        public DimensionalKinematicViscosity DiffusionCoefficient { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FieldCalculationsMeanAgeOfFluidResultControl {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ResultType: ").Append(ResultType).Append("\n");
            sb.Append("  AgeOfFluidDiffusion: ").Append(AgeOfFluidDiffusion).Append("\n");
            sb.Append("  TurbulentSchmidtNumber: ").Append(TurbulentSchmidtNumber).Append("\n");
            sb.Append("  DiffusionCoefficient: ").Append(DiffusionCoefficient).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FieldCalculationsMeanAgeOfFluidResultControl);
        }

        /// <summary>
        /// Returns true if FieldCalculationsMeanAgeOfFluidResultControl instances are equal
        /// </summary>
        /// <param name="input">Instance of FieldCalculationsMeanAgeOfFluidResultControl to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FieldCalculationsMeanAgeOfFluidResultControl input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ResultType == input.ResultType ||
                    (this.ResultType != null &&
                    this.ResultType.Equals(input.ResultType))
                ) && 
                (
                    this.AgeOfFluidDiffusion == input.AgeOfFluidDiffusion ||
                    (this.AgeOfFluidDiffusion != null &&
                    this.AgeOfFluidDiffusion.Equals(input.AgeOfFluidDiffusion))
                ) && 
                (
                    this.TurbulentSchmidtNumber == input.TurbulentSchmidtNumber ||
                    (this.TurbulentSchmidtNumber != null &&
                    this.TurbulentSchmidtNumber.Equals(input.TurbulentSchmidtNumber))
                ) && 
                (
                    this.DiffusionCoefficient == input.DiffusionCoefficient ||
                    (this.DiffusionCoefficient != null &&
                    this.DiffusionCoefficient.Equals(input.DiffusionCoefficient))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ResultType != null)
                    hashCode = hashCode * 59 + this.ResultType.GetHashCode();
                if (this.AgeOfFluidDiffusion != null)
                    hashCode = hashCode * 59 + this.AgeOfFluidDiffusion.GetHashCode();
                if (this.TurbulentSchmidtNumber != null)
                    hashCode = hashCode * 59 + this.TurbulentSchmidtNumber.GetHashCode();
                if (this.DiffusionCoefficient != null)
                    hashCode = hashCode * 59 + this.DiffusionCoefficient.GetHashCode();
                return hashCode;
            }
        }

    }

}
