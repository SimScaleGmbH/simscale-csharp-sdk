/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// SolidGlobalPhysics
    /// </summary>
    [DataContract]
    public partial class SolidGlobalPhysics : IEquatable<SolidGlobalPhysics>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SolidGlobalPhysics" /> class.
        /// </summary>
        /// <param name="enableGlobalDamping">Apply a constant level of damping to all parts that do not have a specified material damping behavior. (default to false).</param>
        /// <param name="dampingLevel">Specify the level of damping to be applied globally as a percentage of critical damping. (default to 1M).</param>
        public SolidGlobalPhysics(bool? enableGlobalDamping = default(bool?), decimal? dampingLevel = default(decimal?))
        {
            this.EnableGlobalDamping = enableGlobalDamping;
            this.DampingLevel = dampingLevel;
        }
        
        /// <summary>
        /// Apply a constant level of damping to all parts that do not have a specified material damping behavior.
        /// </summary>
        /// <value>Apply a constant level of damping to all parts that do not have a specified material damping behavior.</value>
        [DataMember(Name="enableGlobalDamping", EmitDefaultValue=false)]
        public bool? EnableGlobalDamping { get; set; }

        /// <summary>
        /// Specify the level of damping to be applied globally as a percentage of critical damping.
        /// </summary>
        /// <value>Specify the level of damping to be applied globally as a percentage of critical damping.</value>
        [DataMember(Name="dampingLevel", EmitDefaultValue=false)]
        public decimal? DampingLevel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SolidGlobalPhysics {\n");
            sb.Append("  EnableGlobalDamping: ").Append(EnableGlobalDamping).Append("\n");
            sb.Append("  DampingLevel: ").Append(DampingLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SolidGlobalPhysics);
        }

        /// <summary>
        /// Returns true if SolidGlobalPhysics instances are equal
        /// </summary>
        /// <param name="input">Instance of SolidGlobalPhysics to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SolidGlobalPhysics input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EnableGlobalDamping == input.EnableGlobalDamping ||
                    (this.EnableGlobalDamping != null &&
                    this.EnableGlobalDamping.Equals(input.EnableGlobalDamping))
                ) && 
                (
                    this.DampingLevel == input.DampingLevel ||
                    (this.DampingLevel != null &&
                    this.DampingLevel.Equals(input.DampingLevel))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EnableGlobalDamping != null)
                    hashCode = hashCode * 59 + this.EnableGlobalDamping.GetHashCode();
                if (this.DampingLevel != null)
                    hashCode = hashCode * 59 + this.DampingLevel.GetHashCode();
                return hashCode;
            }
        }

    }

}
