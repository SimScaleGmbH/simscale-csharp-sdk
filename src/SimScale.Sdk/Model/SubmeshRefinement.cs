/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// &lt;p&gt;The refinement type &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/meshing/tet-dominant/#local-element-size&#39; target&#x3D;&#39;_blank&#39;&gt;&lt;b&gt;local element size&lt;/b&gt;&lt;/a&gt; allows the definition of local mesh sizings on particular faces or solids. This can be used to increase the mesh efficiency by using smaller elements only where needed, for example on contact surfaces, fillets or other regions with potentially large stress gradients.&lt;/p&gt;&lt;p&gt;&lt;img src&#x3D;\&quot;/spec/resources/help/imgs/local_element_size.png\&quot; class&#x3D;\&quot;helpPopupImage\&quot;/&gt; The figure shows a mesh of a bolted connection with local refinements on the contact surfaces.&lt;/p&gt;
    /// </summary>
    [DataContract]
    public partial class SubmeshRefinement : IEquatable<SubmeshRefinement>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubmeshRefinement" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubmeshRefinement() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubmeshRefinement" /> class.
        /// </summary>
        /// <param name="type">type (required) (default to &quot;SUBMESH&quot;).</param>
        /// <param name="name">name (default to &quot;Local element size&quot;).</param>
        /// <param name="sizing">sizing.</param>
        /// <param name="allowQuadrangles">&lt;p&gt;This parameter determines if &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/meshing/tet-dominant/#quadrangles&#39; target&#x3D;&#39;_blank&#39;&gt;&lt;b&gt;quadrangular surface elements&lt;/b&gt;&lt;/a&gt; shall be allowed. When disabled, only triangles will be used. Meshing with triangles only is usually more robust while quadrangular elements may lead to better results.&lt;/p&gt;&lt;p&gt;&lt;img src&#x3D;\&quot;/spec/resources/help/imgs/allow_quads_comparison.png\&quot; class&#x3D;\&quot;helpPopupImage\&quot;/&gt; The figure shows sample meshes with quadrangular surface elements disallowed (left) and allowed (right).&lt;/p&gt; (default to false).</param>
        /// <param name="topologicalReference">topologicalReference.</param>
        public SubmeshRefinement(string type = "SUBMESH", string name = default(string), OneOfSubmeshRefinementSizing sizing = default(OneOfSubmeshRefinementSizing), bool? allowQuadrangles = default(bool?), TopologicalReference topologicalReference = default(TopologicalReference))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for SubmeshRefinement and cannot be null");
            this.Name = name;
            this.Sizing = sizing;
            this.AllowQuadrangles = allowQuadrangles;
            this.TopologicalReference = topologicalReference;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Sizing
        /// </summary>
        [DataMember(Name="sizing", EmitDefaultValue=false)]
        public OneOfSubmeshRefinementSizing Sizing { get; set; }

        /// <summary>
        /// &lt;p&gt;This parameter determines if &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/meshing/tet-dominant/#quadrangles&#39; target&#x3D;&#39;_blank&#39;&gt;&lt;b&gt;quadrangular surface elements&lt;/b&gt;&lt;/a&gt; shall be allowed. When disabled, only triangles will be used. Meshing with triangles only is usually more robust while quadrangular elements may lead to better results.&lt;/p&gt;&lt;p&gt;&lt;img src&#x3D;\&quot;/spec/resources/help/imgs/allow_quads_comparison.png\&quot; class&#x3D;\&quot;helpPopupImage\&quot;/&gt; The figure shows sample meshes with quadrangular surface elements disallowed (left) and allowed (right).&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;This parameter determines if &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/meshing/tet-dominant/#quadrangles&#39; target&#x3D;&#39;_blank&#39;&gt;&lt;b&gt;quadrangular surface elements&lt;/b&gt;&lt;/a&gt; shall be allowed. When disabled, only triangles will be used. Meshing with triangles only is usually more robust while quadrangular elements may lead to better results.&lt;/p&gt;&lt;p&gt;&lt;img src&#x3D;\&quot;/spec/resources/help/imgs/allow_quads_comparison.png\&quot; class&#x3D;\&quot;helpPopupImage\&quot;/&gt; The figure shows sample meshes with quadrangular surface elements disallowed (left) and allowed (right).&lt;/p&gt;</value>
        [DataMember(Name="allowQuadrangles", EmitDefaultValue=false)]
        public bool? AllowQuadrangles { get; set; }

        /// <summary>
        /// Gets or Sets TopologicalReference
        /// </summary>
        [DataMember(Name="topologicalReference", EmitDefaultValue=false)]
        public TopologicalReference TopologicalReference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubmeshRefinement {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Sizing: ").Append(Sizing).Append("\n");
            sb.Append("  AllowQuadrangles: ").Append(AllowQuadrangles).Append("\n");
            sb.Append("  TopologicalReference: ").Append(TopologicalReference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubmeshRefinement);
        }

        /// <summary>
        /// Returns true if SubmeshRefinement instances are equal
        /// </summary>
        /// <param name="input">Instance of SubmeshRefinement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubmeshRefinement input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Sizing == input.Sizing ||
                    (this.Sizing != null &&
                    this.Sizing.Equals(input.Sizing))
                ) && 
                (
                    this.AllowQuadrangles == input.AllowQuadrangles ||
                    (this.AllowQuadrangles != null &&
                    this.AllowQuadrangles.Equals(input.AllowQuadrangles))
                ) && 
                (
                    this.TopologicalReference == input.TopologicalReference ||
                    (this.TopologicalReference != null &&
                    this.TopologicalReference.Equals(input.TopologicalReference))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Sizing != null)
                    hashCode = hashCode * 59 + this.Sizing.GetHashCode();
                if (this.AllowQuadrangles != null)
                    hashCode = hashCode * 59 + this.AllowQuadrangles.GetHashCode();
                if (this.TopologicalReference != null)
                    hashCode = hashCode * 59 + this.TopologicalReference.GetHashCode();
                return hashCode;
            }
        }

    }

}
