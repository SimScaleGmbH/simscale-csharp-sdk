/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// Computes the &lt;b&gt;heat flux&lt;/b&gt; [W/m²] at every &lt;b&gt;wall&lt;/b&gt; based on the surface normal gradient of the temperature. Radiation effects are not included.
    /// </summary>
    [DataContract]
    public partial class FieldCalculationsWallHeatFluxResultControl : OneOfFluidResultControlsFieldCalculations, IEquatable<FieldCalculationsWallHeatFluxResultControl>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FieldCalculationsWallHeatFluxResultControl" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FieldCalculationsWallHeatFluxResultControl() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FieldCalculationsWallHeatFluxResultControl" /> class.
        /// </summary>
        /// <param name="type">Computes the &lt;b&gt;heat flux&lt;/b&gt; [W/m²] at every &lt;b&gt;wall&lt;/b&gt; based on the surface normal gradient of the temperature. Radiation effects are not included.  Schema name: FieldCalculationsWallHeatFluxResultControl (required) (default to &quot;WALL_HEAT_FLUX&quot;).</param>
        /// <param name="name">name.</param>
        /// <param name="resultType">resultType.</param>
        /// <param name="computeHeatTransferCoefficient">Computes the &lt;b&gt;heat transfer coefficient&lt;/b&gt; [W/(m²K)] at every wall. Radiation effects are not included. Two modes are available for the &lt;b&gt;reference temperature&lt;/b&gt; calculation: &lt;ul&gt;&lt;li&gt; &lt;b&gt;Wall adjacent cell&lt;/b&gt;: Uses the temperature of the first adjacent cell. &lt;/li&gt; &lt;li&gt;&lt;b&gt;Fixed&lt;/b&gt;: Uses a custom value.&lt;/li&gt;&lt;/ul&gt; (default to false).</param>
        /// <param name="referenceTemperatureResultType">referenceTemperatureResultType.</param>
        /// <param name="computeNusseltNumber">Computes the &lt;b&gt;Nusselt Number&lt;/b&gt; at every wall. The specified heat transfer coefficient mode will be used. (default to false).</param>
        /// <param name="referenceNusseltNumberLength">referenceNusseltNumberLength.</param>
        public FieldCalculationsWallHeatFluxResultControl(string type = "WALL_HEAT_FLUX", string name = default(string), WallHeatFluxResultType resultType = default(WallHeatFluxResultType), bool? computeHeatTransferCoefficient = default(bool?), OneOfFieldCalculationsWallHeatFluxResultControlReferenceTemperatureResultType referenceTemperatureResultType = default(OneOfFieldCalculationsWallHeatFluxResultControlReferenceTemperatureResultType), bool? computeNusseltNumber = default(bool?), DimensionalLength referenceNusseltNumberLength = default(DimensionalLength))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for FieldCalculationsWallHeatFluxResultControl and cannot be null");
            this.Name = name;
            this.ResultType = resultType;
            this.ComputeHeatTransferCoefficient = computeHeatTransferCoefficient;
            this.ReferenceTemperatureResultType = referenceTemperatureResultType;
            this.ComputeNusseltNumber = computeNusseltNumber;
            this.ReferenceNusseltNumberLength = referenceNusseltNumberLength;
        }
        
        /// <summary>
        /// Computes the &lt;b&gt;heat flux&lt;/b&gt; [W/m²] at every &lt;b&gt;wall&lt;/b&gt; based on the surface normal gradient of the temperature. Radiation effects are not included.  Schema name: FieldCalculationsWallHeatFluxResultControl
        /// </summary>
        /// <value>Computes the &lt;b&gt;heat flux&lt;/b&gt; [W/m²] at every &lt;b&gt;wall&lt;/b&gt; based on the surface normal gradient of the temperature. Radiation effects are not included.  Schema name: FieldCalculationsWallHeatFluxResultControl</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ResultType
        /// </summary>
        [DataMember(Name="resultType", EmitDefaultValue=false)]
        public WallHeatFluxResultType ResultType { get; set; }

        /// <summary>
        /// Computes the &lt;b&gt;heat transfer coefficient&lt;/b&gt; [W/(m²K)] at every wall. Radiation effects are not included. Two modes are available for the &lt;b&gt;reference temperature&lt;/b&gt; calculation: &lt;ul&gt;&lt;li&gt; &lt;b&gt;Wall adjacent cell&lt;/b&gt;: Uses the temperature of the first adjacent cell. &lt;/li&gt; &lt;li&gt;&lt;b&gt;Fixed&lt;/b&gt;: Uses a custom value.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>Computes the &lt;b&gt;heat transfer coefficient&lt;/b&gt; [W/(m²K)] at every wall. Radiation effects are not included. Two modes are available for the &lt;b&gt;reference temperature&lt;/b&gt; calculation: &lt;ul&gt;&lt;li&gt; &lt;b&gt;Wall adjacent cell&lt;/b&gt;: Uses the temperature of the first adjacent cell. &lt;/li&gt; &lt;li&gt;&lt;b&gt;Fixed&lt;/b&gt;: Uses a custom value.&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="computeHeatTransferCoefficient", EmitDefaultValue=false)]
        public bool? ComputeHeatTransferCoefficient { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceTemperatureResultType
        /// </summary>
        [DataMember(Name="referenceTemperatureResultType", EmitDefaultValue=false)]
        public OneOfFieldCalculationsWallHeatFluxResultControlReferenceTemperatureResultType ReferenceTemperatureResultType { get; set; }

        /// <summary>
        /// Computes the &lt;b&gt;Nusselt Number&lt;/b&gt; at every wall. The specified heat transfer coefficient mode will be used.
        /// </summary>
        /// <value>Computes the &lt;b&gt;Nusselt Number&lt;/b&gt; at every wall. The specified heat transfer coefficient mode will be used.</value>
        [DataMember(Name="computeNusseltNumber", EmitDefaultValue=false)]
        public bool? ComputeNusseltNumber { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceNusseltNumberLength
        /// </summary>
        [DataMember(Name="referenceNusseltNumberLength", EmitDefaultValue=false)]
        public DimensionalLength ReferenceNusseltNumberLength { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FieldCalculationsWallHeatFluxResultControl {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ResultType: ").Append(ResultType).Append("\n");
            sb.Append("  ComputeHeatTransferCoefficient: ").Append(ComputeHeatTransferCoefficient).Append("\n");
            sb.Append("  ReferenceTemperatureResultType: ").Append(ReferenceTemperatureResultType).Append("\n");
            sb.Append("  ComputeNusseltNumber: ").Append(ComputeNusseltNumber).Append("\n");
            sb.Append("  ReferenceNusseltNumberLength: ").Append(ReferenceNusseltNumberLength).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FieldCalculationsWallHeatFluxResultControl);
        }

        /// <summary>
        /// Returns true if FieldCalculationsWallHeatFluxResultControl instances are equal
        /// </summary>
        /// <param name="input">Instance of FieldCalculationsWallHeatFluxResultControl to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FieldCalculationsWallHeatFluxResultControl input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ResultType == input.ResultType ||
                    (this.ResultType != null &&
                    this.ResultType.Equals(input.ResultType))
                ) && 
                (
                    this.ComputeHeatTransferCoefficient == input.ComputeHeatTransferCoefficient ||
                    (this.ComputeHeatTransferCoefficient != null &&
                    this.ComputeHeatTransferCoefficient.Equals(input.ComputeHeatTransferCoefficient))
                ) && 
                (
                    this.ReferenceTemperatureResultType == input.ReferenceTemperatureResultType ||
                    (this.ReferenceTemperatureResultType != null &&
                    this.ReferenceTemperatureResultType.Equals(input.ReferenceTemperatureResultType))
                ) && 
                (
                    this.ComputeNusseltNumber == input.ComputeNusseltNumber ||
                    (this.ComputeNusseltNumber != null &&
                    this.ComputeNusseltNumber.Equals(input.ComputeNusseltNumber))
                ) && 
                (
                    this.ReferenceNusseltNumberLength == input.ReferenceNusseltNumberLength ||
                    (this.ReferenceNusseltNumberLength != null &&
                    this.ReferenceNusseltNumberLength.Equals(input.ReferenceNusseltNumberLength))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ResultType != null)
                    hashCode = hashCode * 59 + this.ResultType.GetHashCode();
                if (this.ComputeHeatTransferCoefficient != null)
                    hashCode = hashCode * 59 + this.ComputeHeatTransferCoefficient.GetHashCode();
                if (this.ReferenceTemperatureResultType != null)
                    hashCode = hashCode * 59 + this.ReferenceTemperatureResultType.GetHashCode();
                if (this.ComputeNusseltNumber != null)
                    hashCode = hashCode * 59 + this.ComputeNusseltNumber.GetHashCode();
                if (this.ReferenceNusseltNumberLength != null)
                    hashCode = hashCode * 59 + this.ReferenceNusseltNumberLength.GetHashCode();
                return hashCode;
            }
        }

    }

}
