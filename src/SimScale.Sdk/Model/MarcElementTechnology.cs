/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// MarcElementTechnology
    /// </summary>
    [DataContract]
    public partial class MarcElementTechnology : IEquatable<MarcElementTechnology>
    {
        /// <summary>
        /// Defines MeshOrder
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MeshOrderEnum
        {
            /// <summary>
            /// Enum FIRST for value: FIRST
            /// </summary>
            [EnumMember(Value = "FIRST")]
            FIRST = 1,

            /// <summary>
            /// Enum SECOND for value: SECOND
            /// </summary>
            [EnumMember(Value = "SECOND")]
            SECOND = 2

        }

        /// <summary>
        /// Gets or Sets MeshOrder
        /// </summary>
        [DataMember(Name="meshOrder", EmitDefaultValue=false)]
        public MeshOrderEnum? MeshOrder { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MarcElementTechnology" /> class.
        /// </summary>
        /// <param name="meshOrder">meshOrder (default to MeshOrderEnum.FIRST).</param>
        public MarcElementTechnology(MeshOrderEnum? meshOrder = default(MeshOrderEnum?))
        {
            this.MeshOrder = meshOrder;
        }
        
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MarcElementTechnology {\n");
            sb.Append("  MeshOrder: ").Append(MeshOrder).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MarcElementTechnology);
        }

        /// <summary>
        /// Returns true if MarcElementTechnology instances are equal
        /// </summary>
        /// <param name="input">Instance of MarcElementTechnology to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MarcElementTechnology input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MeshOrder == input.MeshOrder ||
                    this.MeshOrder.Equals(input.MeshOrder)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.MeshOrder.GetHashCode();
                return hashCode;
            }
        }

    }

}
