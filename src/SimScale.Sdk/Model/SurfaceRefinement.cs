/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// A &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/meshing/hex-dominant/#surface-refinement&#39; target&#x3D;&#39;_blank&#39;&gt;&lt;b&gt;surface refinement&lt;/b&gt;&lt;/a&gt; can be used to refine the mesh near the surfaces of assigned faces and/or solids. A surface refinement can also be used to create a &lt;u&gt;cell zone&lt;/u&gt;.
    /// </summary>
    [DataContract]
    public partial class SurfaceRefinement : IEquatable<SurfaceRefinement>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SurfaceRefinement" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SurfaceRefinement() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SurfaceRefinement" /> class.
        /// </summary>
        /// <param name="type">A &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/meshing/hex-dominant/#surface-refinement&#39; target&#x3D;&#39;_blank&#39;&gt;&lt;b&gt;surface refinement&lt;/b&gt;&lt;/a&gt; can be used to refine the mesh near the surfaces of assigned faces and/or solids. A surface refinement can also be used to create a &lt;u&gt;cell zone&lt;/u&gt;.  Schema name: SurfaceRefinement (required) (default to &quot;SURFACE_V3&quot;).</param>
        /// <param name="name">name (default to &quot;Surface refinement&quot;).</param>
        /// <param name="minLevel">&lt;p&gt;Specify surface-wise the minimum refinement level for this surface.&lt;/p&gt; (default to 1).</param>
        /// <param name="maxLevel">&lt;p&gt;Specify surface-wise the maximum refinement level for this surface.&lt;/p&gt; (default to 2).</param>
        /// <param name="cellZone">cellZone.</param>
        /// <param name="topologicalReference">topologicalReference.</param>
        public SurfaceRefinement(string type = "SURFACE_V3", string name = default(string), int? minLevel = default(int?), int? maxLevel = default(int?), OneOfSurfaceRefinementCellZone cellZone = default(OneOfSurfaceRefinementCellZone), TopologicalReference topologicalReference = default(TopologicalReference))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for SurfaceRefinement and cannot be null");
            this.Name = name;
            this.MinLevel = minLevel;
            this.MaxLevel = maxLevel;
            this.CellZone = cellZone;
            this.TopologicalReference = topologicalReference;
        }
        
        /// <summary>
        /// A &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/meshing/hex-dominant/#surface-refinement&#39; target&#x3D;&#39;_blank&#39;&gt;&lt;b&gt;surface refinement&lt;/b&gt;&lt;/a&gt; can be used to refine the mesh near the surfaces of assigned faces and/or solids. A surface refinement can also be used to create a &lt;u&gt;cell zone&lt;/u&gt;.  Schema name: SurfaceRefinement
        /// </summary>
        /// <value>A &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/meshing/hex-dominant/#surface-refinement&#39; target&#x3D;&#39;_blank&#39;&gt;&lt;b&gt;surface refinement&lt;/b&gt;&lt;/a&gt; can be used to refine the mesh near the surfaces of assigned faces and/or solids. A surface refinement can also be used to create a &lt;u&gt;cell zone&lt;/u&gt;.  Schema name: SurfaceRefinement</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// &lt;p&gt;Specify surface-wise the minimum refinement level for this surface.&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;Specify surface-wise the minimum refinement level for this surface.&lt;/p&gt;</value>
        [DataMember(Name="minLevel", EmitDefaultValue=false)]
        public int? MinLevel { get; set; }

        /// <summary>
        /// &lt;p&gt;Specify surface-wise the maximum refinement level for this surface.&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;Specify surface-wise the maximum refinement level for this surface.&lt;/p&gt;</value>
        [DataMember(Name="maxLevel", EmitDefaultValue=false)]
        public int? MaxLevel { get; set; }

        /// <summary>
        /// Gets or Sets CellZone
        /// </summary>
        [DataMember(Name="cellZone", EmitDefaultValue=false)]
        public OneOfSurfaceRefinementCellZone CellZone { get; set; }

        /// <summary>
        /// Gets or Sets TopologicalReference
        /// </summary>
        [DataMember(Name="topologicalReference", EmitDefaultValue=false)]
        public TopologicalReference TopologicalReference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SurfaceRefinement {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  MinLevel: ").Append(MinLevel).Append("\n");
            sb.Append("  MaxLevel: ").Append(MaxLevel).Append("\n");
            sb.Append("  CellZone: ").Append(CellZone).Append("\n");
            sb.Append("  TopologicalReference: ").Append(TopologicalReference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SurfaceRefinement);
        }

        /// <summary>
        /// Returns true if SurfaceRefinement instances are equal
        /// </summary>
        /// <param name="input">Instance of SurfaceRefinement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SurfaceRefinement input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.MinLevel == input.MinLevel ||
                    (this.MinLevel != null &&
                    this.MinLevel.Equals(input.MinLevel))
                ) && 
                (
                    this.MaxLevel == input.MaxLevel ||
                    (this.MaxLevel != null &&
                    this.MaxLevel.Equals(input.MaxLevel))
                ) && 
                (
                    this.CellZone == input.CellZone ||
                    (this.CellZone != null &&
                    this.CellZone.Equals(input.CellZone))
                ) && 
                (
                    this.TopologicalReference == input.TopologicalReference ||
                    (this.TopologicalReference != null &&
                    this.TopologicalReference.Equals(input.TopologicalReference))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.MinLevel != null)
                    hashCode = hashCode * 59 + this.MinLevel.GetHashCode();
                if (this.MaxLevel != null)
                    hashCode = hashCode * 59 + this.MaxLevel.GetHashCode();
                if (this.CellZone != null)
                    hashCode = hashCode * 59 + this.CellZone.GetHashCode();
                if (this.TopologicalReference != null)
                    hashCode = hashCode * 59 + this.TopologicalReference.GetHashCode();
                return hashCode;
            }
        }

    }

}
