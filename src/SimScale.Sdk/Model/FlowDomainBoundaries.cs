/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// FlowDomainBoundaries
    /// </summary>
    [DataContract]
    public partial class FlowDomainBoundaries : IEquatable<FlowDomainBoundaries>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FlowDomainBoundaries" /> class.
        /// </summary>
        /// <param name="xMIN">xMIN.</param>
        /// <param name="xMAX">xMAX.</param>
        /// <param name="yMIN">yMIN.</param>
        /// <param name="yMAX">yMAX.</param>
        /// <param name="zMIN">zMIN.</param>
        /// <param name="zMAX">zMAX.</param>
        public FlowDomainBoundaries(OneOfFlowDomainBoundariesXMIN xMIN = default(OneOfFlowDomainBoundariesXMIN), OneOfFlowDomainBoundariesXMAX xMAX = default(OneOfFlowDomainBoundariesXMAX), OneOfFlowDomainBoundariesYMIN yMIN = default(OneOfFlowDomainBoundariesYMIN), OneOfFlowDomainBoundariesYMAX yMAX = default(OneOfFlowDomainBoundariesYMAX), OneOfFlowDomainBoundariesZMIN zMIN = default(OneOfFlowDomainBoundariesZMIN), OneOfFlowDomainBoundariesZMAX zMAX = default(OneOfFlowDomainBoundariesZMAX))
        {
            this.XMIN = xMIN;
            this.XMAX = xMAX;
            this.YMIN = yMIN;
            this.YMAX = yMAX;
            this.ZMIN = zMIN;
            this.ZMAX = zMAX;
        }
        
        /// <summary>
        /// Gets or Sets XMIN
        /// </summary>
        [DataMember(Name="XMIN", EmitDefaultValue=false)]
        public OneOfFlowDomainBoundariesXMIN XMIN { get; set; }

        /// <summary>
        /// Gets or Sets XMAX
        /// </summary>
        [DataMember(Name="XMAX", EmitDefaultValue=false)]
        public OneOfFlowDomainBoundariesXMAX XMAX { get; set; }

        /// <summary>
        /// Gets or Sets YMIN
        /// </summary>
        [DataMember(Name="YMIN", EmitDefaultValue=false)]
        public OneOfFlowDomainBoundariesYMIN YMIN { get; set; }

        /// <summary>
        /// Gets or Sets YMAX
        /// </summary>
        [DataMember(Name="YMAX", EmitDefaultValue=false)]
        public OneOfFlowDomainBoundariesYMAX YMAX { get; set; }

        /// <summary>
        /// Gets or Sets ZMIN
        /// </summary>
        [DataMember(Name="ZMIN", EmitDefaultValue=false)]
        public OneOfFlowDomainBoundariesZMIN ZMIN { get; set; }

        /// <summary>
        /// Gets or Sets ZMAX
        /// </summary>
        [DataMember(Name="ZMAX", EmitDefaultValue=false)]
        public OneOfFlowDomainBoundariesZMAX ZMAX { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlowDomainBoundaries {\n");
            sb.Append("  XMIN: ").Append(XMIN).Append("\n");
            sb.Append("  XMAX: ").Append(XMAX).Append("\n");
            sb.Append("  YMIN: ").Append(YMIN).Append("\n");
            sb.Append("  YMAX: ").Append(YMAX).Append("\n");
            sb.Append("  ZMIN: ").Append(ZMIN).Append("\n");
            sb.Append("  ZMAX: ").Append(ZMAX).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FlowDomainBoundaries);
        }

        /// <summary>
        /// Returns true if FlowDomainBoundaries instances are equal
        /// </summary>
        /// <param name="input">Instance of FlowDomainBoundaries to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlowDomainBoundaries input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.XMIN == input.XMIN ||
                    (this.XMIN != null &&
                    this.XMIN.Equals(input.XMIN))
                ) && 
                (
                    this.XMAX == input.XMAX ||
                    (this.XMAX != null &&
                    this.XMAX.Equals(input.XMAX))
                ) && 
                (
                    this.YMIN == input.YMIN ||
                    (this.YMIN != null &&
                    this.YMIN.Equals(input.YMIN))
                ) && 
                (
                    this.YMAX == input.YMAX ||
                    (this.YMAX != null &&
                    this.YMAX.Equals(input.YMAX))
                ) && 
                (
                    this.ZMIN == input.ZMIN ||
                    (this.ZMIN != null &&
                    this.ZMIN.Equals(input.ZMIN))
                ) && 
                (
                    this.ZMAX == input.ZMAX ||
                    (this.ZMAX != null &&
                    this.ZMAX.Equals(input.ZMAX))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.XMIN != null)
                    hashCode = hashCode * 59 + this.XMIN.GetHashCode();
                if (this.XMAX != null)
                    hashCode = hashCode * 59 + this.XMAX.GetHashCode();
                if (this.YMIN != null)
                    hashCode = hashCode * 59 + this.YMIN.GetHashCode();
                if (this.YMAX != null)
                    hashCode = hashCode * 59 + this.YMAX.GetHashCode();
                if (this.ZMIN != null)
                    hashCode = hashCode * 59 + this.ZMIN.GetHashCode();
                if (this.ZMAX != null)
                    hashCode = hashCode * 59 + this.ZMAX.GetHashCode();
                return hashCode;
            }
        }

    }

}
