/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// Coil
    /// </summary>
    [DataContract]
    public partial class Coil : IEquatable<Coil>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Coil" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="topology">topology.</param>
        /// <param name="coilType">coilType.</param>
        /// <param name="excitation">excitation.</param>
        public Coil(string name = default(string), OpenCoil topology = default(OpenCoil), OneOfCoilCoilType coilType = default(OneOfCoilCoilType), CurrentExcitation excitation = default(CurrentExcitation))
        {
            this.Name = name;
            this.Topology = topology;
            this.CoilType = coilType;
            this.Excitation = excitation;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Topology
        /// </summary>
        [DataMember(Name="topology", EmitDefaultValue=false)]
        public OpenCoil Topology { get; set; }

        /// <summary>
        /// Gets or Sets CoilType
        /// </summary>
        [DataMember(Name="coilType", EmitDefaultValue=false)]
        public OneOfCoilCoilType CoilType { get; set; }

        /// <summary>
        /// Gets or Sets Excitation
        /// </summary>
        [DataMember(Name="excitation", EmitDefaultValue=false)]
        public CurrentExcitation Excitation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Coil {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Topology: ").Append(Topology).Append("\n");
            sb.Append("  CoilType: ").Append(CoilType).Append("\n");
            sb.Append("  Excitation: ").Append(Excitation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Coil);
        }

        /// <summary>
        /// Returns true if Coil instances are equal
        /// </summary>
        /// <param name="input">Instance of Coil to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Coil input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Topology == input.Topology ||
                    (this.Topology != null &&
                    this.Topology.Equals(input.Topology))
                ) && 
                (
                    this.CoilType == input.CoilType ||
                    (this.CoilType != null &&
                    this.CoilType.Equals(input.CoilType))
                ) && 
                (
                    this.Excitation == input.Excitation ||
                    (this.Excitation != null &&
                    this.Excitation.Equals(input.Excitation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Topology != null)
                    hashCode = hashCode * 59 + this.Topology.GetHashCode();
                if (this.CoilType != null)
                    hashCode = hashCode * 59 + this.CoilType.GetHashCode();
                if (this.Excitation != null)
                    hashCode = hashCode * 59 + this.Excitation.GetHashCode();
                return hashCode;
            }
        }

    }

}
