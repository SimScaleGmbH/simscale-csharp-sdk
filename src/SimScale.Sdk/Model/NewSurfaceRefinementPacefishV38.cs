/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// NewSurfaceRefinementPacefishV38
    /// </summary>
    [DataContract]
    public partial class NewSurfaceRefinementPacefishV38 : OneOfPacefishAutomeshRefinements, OneOfPacefishMeshV38Refinements, IEquatable<NewSurfaceRefinementPacefishV38>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NewSurfaceRefinementPacefishV38" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NewSurfaceRefinementPacefishV38() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NewSurfaceRefinementPacefishV38" /> class.
        /// </summary>
        /// <param name="type">Schema name: NewSurfaceRefinementPacefishV38 (required) (default to &quot;SURFACE_PACEFISH_V38&quot;).</param>
        /// <param name="name">name (default to &quot;Surface refinement&quot;).</param>
        /// <param name="meshSizing">meshSizing.</param>
        /// <param name="topologicalReference">topologicalReference.</param>
        public NewSurfaceRefinementPacefishV38(string type = "SURFACE_PACEFISH_V38", string name = default(string), OneOfNewSurfaceRefinementPacefishV38MeshSizing meshSizing = default(OneOfNewSurfaceRefinementPacefishV38MeshSizing), TopologicalReference topologicalReference = default(TopologicalReference))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for NewSurfaceRefinementPacefishV38 and cannot be null");
            this.Name = name;
            this.MeshSizing = meshSizing;
            this.TopologicalReference = topologicalReference;
        }
        
        /// <summary>
        /// Schema name: NewSurfaceRefinementPacefishV38
        /// </summary>
        /// <value>Schema name: NewSurfaceRefinementPacefishV38</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets MeshSizing
        /// </summary>
        [DataMember(Name="meshSizing", EmitDefaultValue=false)]
        public OneOfNewSurfaceRefinementPacefishV38MeshSizing MeshSizing { get; set; }

        /// <summary>
        /// Gets or Sets TopologicalReference
        /// </summary>
        [DataMember(Name="topologicalReference", EmitDefaultValue=false)]
        public TopologicalReference TopologicalReference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NewSurfaceRefinementPacefishV38 {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  MeshSizing: ").Append(MeshSizing).Append("\n");
            sb.Append("  TopologicalReference: ").Append(TopologicalReference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NewSurfaceRefinementPacefishV38);
        }

        /// <summary>
        /// Returns true if NewSurfaceRefinementPacefishV38 instances are equal
        /// </summary>
        /// <param name="input">Instance of NewSurfaceRefinementPacefishV38 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NewSurfaceRefinementPacefishV38 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.MeshSizing == input.MeshSizing ||
                    (this.MeshSizing != null &&
                    this.MeshSizing.Equals(input.MeshSizing))
                ) && 
                (
                    this.TopologicalReference == input.TopologicalReference ||
                    (this.TopologicalReference != null &&
                    this.TopologicalReference.Equals(input.TopologicalReference))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.MeshSizing != null)
                    hashCode = hashCode * 59 + this.MeshSizing.GetHashCode();
                if (this.TopologicalReference != null)
                    hashCode = hashCode * 59 + this.TopologicalReference.GetHashCode();
                return hashCode;
            }
        }

    }

}
