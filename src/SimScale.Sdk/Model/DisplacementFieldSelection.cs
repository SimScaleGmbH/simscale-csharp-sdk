/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// DisplacementFieldSelection
    /// </summary>
    [DataContract]
    public partial class DisplacementFieldSelection : OneOfAverageFieldsCalculationResultControlItemFieldSelection, OneOfHarmonicResponseResultControlItemFieldSelection, OneOfMinMaxFieldsCalculationResultControlItemFieldSelection, OneOfSumFieldsCalculationResultControlItemFieldSelection, OneOfTemporalResponseResultControlItemFieldSelection, IEquatable<DisplacementFieldSelection>
    {
        /// <summary>
        /// Defines ComponentSelection
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ComponentSelectionEnum
        {
            /// <summary>
            /// Enum X for value: X
            /// </summary>
            [EnumMember(Value = "X")]
            X = 1,

            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 2,

            /// <summary>
            /// Enum Z for value: Z
            /// </summary>
            [EnumMember(Value = "Z")]
            Z = 3,

            /// <summary>
            /// Enum ALL for value: ALL
            /// </summary>
            [EnumMember(Value = "ALL")]
            ALL = 4

        }

        /// <summary>
        /// Gets or Sets ComponentSelection
        /// </summary>
        [DataMember(Name="componentSelection", EmitDefaultValue=false)]
        public ComponentSelectionEnum? ComponentSelection { get; set; }
        /// <summary>
        /// &lt;p&gt;This option allows to control the output frequency and accuracy:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;Post simulation:&lt;/b&gt; Point data output is synchronised with global solution fields. Data is interpolated from nodes surrounding the geometry primitive.&lt;/p&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;Live:&lt;/b&gt; Point data is output continuously during the simulation at all computed timesteps. Data is taken directly from the nearest mesh node and no interpolation is performed.&lt;/p&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>&lt;p&gt;This option allows to control the output frequency and accuracy:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;Post simulation:&lt;/b&gt; Point data output is synchronised with global solution fields. Data is interpolated from nodes surrounding the geometry primitive.&lt;/p&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;Live:&lt;/b&gt; Point data is output continuously during the simulation at all computed timesteps. Data is taken directly from the nearest mesh node and no interpolation is performed.&lt;/p&gt;&lt;/ul&gt;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OutputMethodEnum
        {
            /// <summary>
            /// Enum POSTSIMULATION for value: POST_SIMULATION
            /// </summary>
            [EnumMember(Value = "POST_SIMULATION")]
            POSTSIMULATION = 1,

            /// <summary>
            /// Enum LIVE for value: LIVE
            /// </summary>
            [EnumMember(Value = "LIVE")]
            LIVE = 2

        }

        /// <summary>
        /// &lt;p&gt;This option allows to control the output frequency and accuracy:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;Post simulation:&lt;/b&gt; Point data output is synchronised with global solution fields. Data is interpolated from nodes surrounding the geometry primitive.&lt;/p&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;Live:&lt;/b&gt; Point data is output continuously during the simulation at all computed timesteps. Data is taken directly from the nearest mesh node and no interpolation is performed.&lt;/p&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>&lt;p&gt;This option allows to control the output frequency and accuracy:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;Post simulation:&lt;/b&gt; Point data output is synchronised with global solution fields. Data is interpolated from nodes surrounding the geometry primitive.&lt;/p&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;Live:&lt;/b&gt; Point data is output continuously during the simulation at all computed timesteps. Data is taken directly from the nearest mesh node and no interpolation is performed.&lt;/p&gt;&lt;/ul&gt;</value>
        [DataMember(Name="outputMethod", EmitDefaultValue=false)]
        public OutputMethodEnum? OutputMethod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DisplacementFieldSelection" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DisplacementFieldSelection() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DisplacementFieldSelection" /> class.
        /// </summary>
        /// <param name="type">Schema name: DisplacementFieldSelection (required) (default to &quot;DISPLACEMENT&quot;).</param>
        /// <param name="displacementType">displacementType.</param>
        /// <param name="componentSelection">componentSelection (default to ComponentSelectionEnum.ALL).</param>
        /// <param name="outputMethod">&lt;p&gt;This option allows to control the output frequency and accuracy:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;Post simulation:&lt;/b&gt; Point data output is synchronised with global solution fields. Data is interpolated from nodes surrounding the geometry primitive.&lt;/p&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;Live:&lt;/b&gt; Point data is output continuously during the simulation at all computed timesteps. Data is taken directly from the nearest mesh node and no interpolation is performed.&lt;/p&gt;&lt;/ul&gt; (default to OutputMethodEnum.POSTSIMULATION).</param>
        public DisplacementFieldSelection(string type = "DISPLACEMENT", OneOfDisplacementFieldSelectionDisplacementType displacementType = default(OneOfDisplacementFieldSelectionDisplacementType), ComponentSelectionEnum? componentSelection = default(ComponentSelectionEnum?), OutputMethodEnum? outputMethod = default(OutputMethodEnum?))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for DisplacementFieldSelection and cannot be null");
            this.DisplacementType = displacementType;
            this.ComponentSelection = componentSelection;
            this.OutputMethod = outputMethod;
        }
        
        /// <summary>
        /// Schema name: DisplacementFieldSelection
        /// </summary>
        /// <value>Schema name: DisplacementFieldSelection</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets DisplacementType
        /// </summary>
        [DataMember(Name="displacementType", EmitDefaultValue=false)]
        public OneOfDisplacementFieldSelectionDisplacementType DisplacementType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DisplacementFieldSelection {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  DisplacementType: ").Append(DisplacementType).Append("\n");
            sb.Append("  ComponentSelection: ").Append(ComponentSelection).Append("\n");
            sb.Append("  OutputMethod: ").Append(OutputMethod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DisplacementFieldSelection);
        }

        /// <summary>
        /// Returns true if DisplacementFieldSelection instances are equal
        /// </summary>
        /// <param name="input">Instance of DisplacementFieldSelection to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DisplacementFieldSelection input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.DisplacementType == input.DisplacementType ||
                    (this.DisplacementType != null &&
                    this.DisplacementType.Equals(input.DisplacementType))
                ) && 
                (
                    this.ComponentSelection == input.ComponentSelection ||
                    this.ComponentSelection.Equals(input.ComponentSelection)
                ) && 
                (
                    this.OutputMethod == input.OutputMethod ||
                    this.OutputMethod.Equals(input.OutputMethod)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.DisplacementType != null)
                    hashCode = hashCode * 59 + this.DisplacementType.GetHashCode();
                hashCode = hashCode * 59 + this.ComponentSelection.GetHashCode();
                hashCode = hashCode * 59 + this.OutputMethod.GetHashCode();
                return hashCode;
            }
        }

    }

}
