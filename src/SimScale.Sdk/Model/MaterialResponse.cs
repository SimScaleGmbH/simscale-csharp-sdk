/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// MaterialResponse
    /// </summary>
    [DataContract]
    public partial class MaterialResponse : IEquatable<MaterialResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MaterialResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MaterialResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MaterialResponse" /> class.
        /// </summary>
        /// <param name="name">The material name. (required).</param>
        /// <param name="properties">The material properties..</param>
        /// <param name="metadata">metadata.</param>
        public MaterialResponse(string name = default(string), Dictionary<string, OneOfMaterialProperty> properties = default(Dictionary<string, OneOfMaterialProperty>), Object metadata = default(Object))
        {
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for MaterialResponse and cannot be null");
            this.Properties = properties;
            this.Metadata = metadata;
        }
        
        /// <summary>
        /// The material unique identifier.
        /// </summary>
        /// <value>The material unique identifier.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; private set; }

        /// <summary>
        /// The material group unique identifier.
        /// </summary>
        /// <value>The material group unique identifier.</value>
        [DataMember(Name="materialGroupId", EmitDefaultValue=false)]
        public string MaterialGroupId { get; private set; }

        /// <summary>
        /// The material name.
        /// </summary>
        /// <value>The material name.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The time the material was created.
        /// </summary>
        /// <value>The time the material was created.</value>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public DateTimeOffset? CreatedAt { get; private set; }

        /// <summary>
        /// The time the material was modified.
        /// </summary>
        /// <value>The time the material was modified.</value>
        [DataMember(Name="modifiedAt", EmitDefaultValue=false)]
        public DateTimeOffset? ModifiedAt { get; private set; }

        /// <summary>
        /// The material properties.
        /// </summary>
        /// <value>The material properties.</value>
        [DataMember(Name="properties", EmitDefaultValue=false)]
        public Dictionary<string, OneOfMaterialProperty> Properties { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Object Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MaterialResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MaterialGroupId: ").Append(MaterialGroupId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ModifiedAt: ").Append(ModifiedAt).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MaterialResponse);
        }

        /// <summary>
        /// Returns true if MaterialResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of MaterialResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MaterialResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.MaterialGroupId == input.MaterialGroupId ||
                    (this.MaterialGroupId != null &&
                    this.MaterialGroupId.Equals(input.MaterialGroupId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.ModifiedAt == input.ModifiedAt ||
                    (this.ModifiedAt != null &&
                    this.ModifiedAt.Equals(input.ModifiedAt))
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.MaterialGroupId != null)
                    hashCode = hashCode * 59 + this.MaterialGroupId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.ModifiedAt != null)
                    hashCode = hashCode * 59 + this.ModifiedAt.GetHashCode();
                if (this.Properties != null)
                    hashCode = hashCode * 59 + this.Properties.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                return hashCode;
            }
        }

    }

}
