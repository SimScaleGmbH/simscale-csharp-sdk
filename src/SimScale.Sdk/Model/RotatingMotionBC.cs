/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// &lt;p&gt;The &lt;b&gt;rotating motion&lt;/b&gt; constraint applies a predefined rigid body rotation to the assigned entities. The rotation axis, the base point, and the rotation angle needs to be specified. Each component can be defined with a formula or table input.&lt;br /&gt;&lt;br /&gt;Important remarks: &lt;br /&gt;&lt;ul&gt;&lt;li&gt;If a component of the rotation axis is input via formula or table, then ensure that the length of the axis vector is always positive.&lt;/li&gt;&lt;li&gt;If a continuous, transient rotation is required, then the rotation angle has to be given either as a formula or table value.&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;a href&#x3D; https://www.simscale.com/docs/simulation-setup/boundary-conditions/rotating-motion/&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.
    /// </summary>
    [DataContract]
    public partial class RotatingMotionBC : OneOfDynamicAnalysisBoundaryConditions, OneOfStaticAnalysisBoundaryConditions, OneOfThermalMechanicalBoundaryConditions, IEquatable<RotatingMotionBC>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RotatingMotionBC" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RotatingMotionBC() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RotatingMotionBC" /> class.
        /// </summary>
        /// <param name="type">&lt;p&gt;The &lt;b&gt;rotating motion&lt;/b&gt; constraint applies a predefined rigid body rotation to the assigned entities. The rotation axis, the base point, and the rotation angle needs to be specified. Each component can be defined with a formula or table input.&lt;br /&gt;&lt;br /&gt;Important remarks: &lt;br /&gt;&lt;ul&gt;&lt;li&gt;If a component of the rotation axis is input via formula or table, then ensure that the length of the axis vector is always positive.&lt;/li&gt;&lt;li&gt;If a continuous, transient rotation is required, then the rotation angle has to be given either as a formula or table value.&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;a href&#x3D; https://www.simscale.com/docs/simulation-setup/boundary-conditions/rotating-motion/&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.  Schema name: RotatingMotionBC (required) (default to &quot;ROTATING_MOTION&quot;).</param>
        /// <param name="name">name.</param>
        /// <param name="rotationOrigin">rotationOrigin.</param>
        /// <param name="rotationAxis">rotationAxis.</param>
        /// <param name="omega">omega.</param>
        /// <param name="topologicalReference">topologicalReference.</param>
        public RotatingMotionBC(string type = "ROTATING_MOTION", string name = default(string), DimensionalVectorFunctionLength rotationOrigin = default(DimensionalVectorFunctionLength), DimensionalVectorFunctionLength rotationAxis = default(DimensionalVectorFunctionLength), DimensionalFunctionAngle omega = default(DimensionalFunctionAngle), TopologicalReference topologicalReference = default(TopologicalReference))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for RotatingMotionBC and cannot be null");
            this.Name = name;
            this.RotationOrigin = rotationOrigin;
            this.RotationAxis = rotationAxis;
            this.Omega = omega;
            this.TopologicalReference = topologicalReference;
        }
        
        /// <summary>
        /// &lt;p&gt;The &lt;b&gt;rotating motion&lt;/b&gt; constraint applies a predefined rigid body rotation to the assigned entities. The rotation axis, the base point, and the rotation angle needs to be specified. Each component can be defined with a formula or table input.&lt;br /&gt;&lt;br /&gt;Important remarks: &lt;br /&gt;&lt;ul&gt;&lt;li&gt;If a component of the rotation axis is input via formula or table, then ensure that the length of the axis vector is always positive.&lt;/li&gt;&lt;li&gt;If a continuous, transient rotation is required, then the rotation angle has to be given either as a formula or table value.&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;a href&#x3D; https://www.simscale.com/docs/simulation-setup/boundary-conditions/rotating-motion/&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.  Schema name: RotatingMotionBC
        /// </summary>
        /// <value>&lt;p&gt;The &lt;b&gt;rotating motion&lt;/b&gt; constraint applies a predefined rigid body rotation to the assigned entities. The rotation axis, the base point, and the rotation angle needs to be specified. Each component can be defined with a formula or table input.&lt;br /&gt;&lt;br /&gt;Important remarks: &lt;br /&gt;&lt;ul&gt;&lt;li&gt;If a component of the rotation axis is input via formula or table, then ensure that the length of the axis vector is always positive.&lt;/li&gt;&lt;li&gt;If a continuous, transient rotation is required, then the rotation angle has to be given either as a formula or table value.&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;a href&#x3D; https://www.simscale.com/docs/simulation-setup/boundary-conditions/rotating-motion/&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.  Schema name: RotatingMotionBC</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets RotationOrigin
        /// </summary>
        [DataMember(Name="rotationOrigin", EmitDefaultValue=false)]
        public DimensionalVectorFunctionLength RotationOrigin { get; set; }

        /// <summary>
        /// Gets or Sets RotationAxis
        /// </summary>
        [DataMember(Name="rotationAxis", EmitDefaultValue=false)]
        public DimensionalVectorFunctionLength RotationAxis { get; set; }

        /// <summary>
        /// Gets or Sets Omega
        /// </summary>
        [DataMember(Name="omega", EmitDefaultValue=false)]
        public DimensionalFunctionAngle Omega { get; set; }

        /// <summary>
        /// Gets or Sets TopologicalReference
        /// </summary>
        [DataMember(Name="topologicalReference", EmitDefaultValue=false)]
        public TopologicalReference TopologicalReference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RotatingMotionBC {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RotationOrigin: ").Append(RotationOrigin).Append("\n");
            sb.Append("  RotationAxis: ").Append(RotationAxis).Append("\n");
            sb.Append("  Omega: ").Append(Omega).Append("\n");
            sb.Append("  TopologicalReference: ").Append(TopologicalReference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RotatingMotionBC);
        }

        /// <summary>
        /// Returns true if RotatingMotionBC instances are equal
        /// </summary>
        /// <param name="input">Instance of RotatingMotionBC to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RotatingMotionBC input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.RotationOrigin == input.RotationOrigin ||
                    (this.RotationOrigin != null &&
                    this.RotationOrigin.Equals(input.RotationOrigin))
                ) && 
                (
                    this.RotationAxis == input.RotationAxis ||
                    (this.RotationAxis != null &&
                    this.RotationAxis.Equals(input.RotationAxis))
                ) && 
                (
                    this.Omega == input.Omega ||
                    (this.Omega != null &&
                    this.Omega.Equals(input.Omega))
                ) && 
                (
                    this.TopologicalReference == input.TopologicalReference ||
                    (this.TopologicalReference != null &&
                    this.TopologicalReference.Equals(input.TopologicalReference))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.RotationOrigin != null)
                    hashCode = hashCode * 59 + this.RotationOrigin.GetHashCode();
                if (this.RotationAxis != null)
                    hashCode = hashCode * 59 + this.RotationAxis.GetHashCode();
                if (this.Omega != null)
                    hashCode = hashCode * 59 + this.Omega.GetHashCode();
                if (this.TopologicalReference != null)
                    hashCode = hashCode * 59 + this.TopologicalReference.GetHashCode();
                return hashCode;
            }
        }

    }

}
