/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// SolidResultControl
    /// </summary>
    [DataContract]
    public partial class SolidResultControl : IEquatable<SolidResultControl>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SolidResultControl" /> class.
        /// </summary>
        /// <param name="solutionFields">Each mode is normalized using its largest component of displacement..</param>
        /// <param name="edgeCalculation">edgeCalculation.</param>
        /// <param name="areaCalculation">areaCalculation.</param>
        /// <param name="volumeCalculation">volumeCalculation.</param>
        /// <param name="pointData">pointData.</param>
        public SolidResultControl(List<OneOfSolidResultControlSolutionFields> solutionFields = default(List<OneOfSolidResultControlSolutionFields>), List<OneOfSolidResultControlEdgeCalculation> edgeCalculation = default(List<OneOfSolidResultControlEdgeCalculation>), List<OneOfSolidResultControlAreaCalculation> areaCalculation = default(List<OneOfSolidResultControlAreaCalculation>), List<OneOfSolidResultControlVolumeCalculation> volumeCalculation = default(List<OneOfSolidResultControlVolumeCalculation>), List<OneOfSolidResultControlPointData> pointData = default(List<OneOfSolidResultControlPointData>))
        {
            this.SolutionFields = solutionFields;
            this.EdgeCalculation = edgeCalculation;
            this.AreaCalculation = areaCalculation;
            this.VolumeCalculation = volumeCalculation;
            this.PointData = pointData;
        }
        
        /// <summary>
        /// Each mode is normalized using its largest component of displacement.
        /// </summary>
        /// <value>Each mode is normalized using its largest component of displacement.</value>
        [DataMember(Name="solutionFields", EmitDefaultValue=false)]
        public List<OneOfSolidResultControlSolutionFields> SolutionFields { get; set; }

        /// <summary>
        /// Gets or Sets EdgeCalculation
        /// </summary>
        [DataMember(Name="edgeCalculation", EmitDefaultValue=false)]
        public List<OneOfSolidResultControlEdgeCalculation> EdgeCalculation { get; set; }

        /// <summary>
        /// Gets or Sets AreaCalculation
        /// </summary>
        [DataMember(Name="areaCalculation", EmitDefaultValue=false)]
        public List<OneOfSolidResultControlAreaCalculation> AreaCalculation { get; set; }

        /// <summary>
        /// Gets or Sets VolumeCalculation
        /// </summary>
        [DataMember(Name="volumeCalculation", EmitDefaultValue=false)]
        public List<OneOfSolidResultControlVolumeCalculation> VolumeCalculation { get; set; }

        /// <summary>
        /// Gets or Sets PointData
        /// </summary>
        [DataMember(Name="pointData", EmitDefaultValue=false)]
        public List<OneOfSolidResultControlPointData> PointData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SolidResultControl {\n");
            sb.Append("  SolutionFields: ").Append(SolutionFields).Append("\n");
            sb.Append("  EdgeCalculation: ").Append(EdgeCalculation).Append("\n");
            sb.Append("  AreaCalculation: ").Append(AreaCalculation).Append("\n");
            sb.Append("  VolumeCalculation: ").Append(VolumeCalculation).Append("\n");
            sb.Append("  PointData: ").Append(PointData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SolidResultControl);
        }

        /// <summary>
        /// Returns true if SolidResultControl instances are equal
        /// </summary>
        /// <param name="input">Instance of SolidResultControl to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SolidResultControl input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SolutionFields == input.SolutionFields ||
                    this.SolutionFields != null &&
                    input.SolutionFields != null &&
                    this.SolutionFields.SequenceEqual(input.SolutionFields)
                ) && 
                (
                    this.EdgeCalculation == input.EdgeCalculation ||
                    this.EdgeCalculation != null &&
                    input.EdgeCalculation != null &&
                    this.EdgeCalculation.SequenceEqual(input.EdgeCalculation)
                ) && 
                (
                    this.AreaCalculation == input.AreaCalculation ||
                    this.AreaCalculation != null &&
                    input.AreaCalculation != null &&
                    this.AreaCalculation.SequenceEqual(input.AreaCalculation)
                ) && 
                (
                    this.VolumeCalculation == input.VolumeCalculation ||
                    this.VolumeCalculation != null &&
                    input.VolumeCalculation != null &&
                    this.VolumeCalculation.SequenceEqual(input.VolumeCalculation)
                ) && 
                (
                    this.PointData == input.PointData ||
                    this.PointData != null &&
                    input.PointData != null &&
                    this.PointData.SequenceEqual(input.PointData)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SolutionFields != null)
                    hashCode = hashCode * 59 + this.SolutionFields.GetHashCode();
                if (this.EdgeCalculation != null)
                    hashCode = hashCode * 59 + this.EdgeCalculation.GetHashCode();
                if (this.AreaCalculation != null)
                    hashCode = hashCode * 59 + this.AreaCalculation.GetHashCode();
                if (this.VolumeCalculation != null)
                    hashCode = hashCode * 59 + this.VolumeCalculation.GetHashCode();
                if (this.PointData != null)
                    hashCode = hashCode * 59 + this.PointData.GetHashCode();
                return hashCode;
            }
        }

    }

}
