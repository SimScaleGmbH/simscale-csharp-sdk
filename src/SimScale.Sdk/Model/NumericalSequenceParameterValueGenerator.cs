/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// NumericalSequenceParameterValueGenerator
    /// </summary>
    [DataContract]
    public partial class NumericalSequenceParameterValueGenerator : IEquatable<NumericalSequenceParameterValueGenerator>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NumericalSequenceParameterValueGenerator" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NumericalSequenceParameterValueGenerator() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NumericalSequenceParameterValueGenerator" /> class.
        /// </summary>
        /// <param name="type">Schema name: NumericalSequenceParameterValueGenerator (required) (default to &quot;NUMERICAL_SEQUENCE&quot;).</param>
        /// <param name="start">start.</param>
        /// <param name="end">end.</param>
        /// <param name="step">step.</param>
        /// <param name="inclusive">inclusive (required).</param>
        public NumericalSequenceParameterValueGenerator(string type = "NUMERICAL_SEQUENCE", decimal? start = default(decimal?), decimal? end = default(decimal?), decimal? step = default(decimal?), bool? inclusive = default(bool?))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for NumericalSequenceParameterValueGenerator and cannot be null");
            // to ensure "inclusive" is required (not null)
            this.Inclusive = inclusive ?? throw new ArgumentNullException("inclusive is a required property for NumericalSequenceParameterValueGenerator and cannot be null");
            this.Start = start;
            this.End = end;
            this.Step = step;
        }
        
        /// <summary>
        /// Schema name: NumericalSequenceParameterValueGenerator
        /// </summary>
        /// <value>Schema name: NumericalSequenceParameterValueGenerator</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Start
        /// </summary>
        [DataMember(Name="start", EmitDefaultValue=false)]
        public decimal? Start { get; set; }

        /// <summary>
        /// Gets or Sets End
        /// </summary>
        [DataMember(Name="end", EmitDefaultValue=false)]
        public decimal? End { get; set; }

        /// <summary>
        /// Gets or Sets Step
        /// </summary>
        [DataMember(Name="step", EmitDefaultValue=false)]
        public decimal? Step { get; set; }

        /// <summary>
        /// Gets or Sets Inclusive
        /// </summary>
        [DataMember(Name="inclusive", EmitDefaultValue=false)]
        public bool? Inclusive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NumericalSequenceParameterValueGenerator {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  Step: ").Append(Step).Append("\n");
            sb.Append("  Inclusive: ").Append(Inclusive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NumericalSequenceParameterValueGenerator);
        }

        /// <summary>
        /// Returns true if NumericalSequenceParameterValueGenerator instances are equal
        /// </summary>
        /// <param name="input">Instance of NumericalSequenceParameterValueGenerator to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NumericalSequenceParameterValueGenerator input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Start == input.Start ||
                    (this.Start != null &&
                    this.Start.Equals(input.Start))
                ) && 
                (
                    this.End == input.End ||
                    (this.End != null &&
                    this.End.Equals(input.End))
                ) && 
                (
                    this.Step == input.Step ||
                    (this.Step != null &&
                    this.Step.Equals(input.Step))
                ) && 
                (
                    this.Inclusive == input.Inclusive ||
                    (this.Inclusive != null &&
                    this.Inclusive.Equals(input.Inclusive))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Start != null)
                    hashCode = hashCode * 59 + this.Start.GetHashCode();
                if (this.End != null)
                    hashCode = hashCode * 59 + this.End.GetHashCode();
                if (this.Step != null)
                    hashCode = hashCode * 59 + this.Step.GetHashCode();
                if (this.Inclusive != null)
                    hashCode = hashCode * 59 + this.Inclusive.GetHashCode();
                return hashCode;
            }
        }

    }

}
