/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// ClusterAroundModes
    /// </summary>
    [DataContract]
    public partial class ClusterAroundModes : OneOfHarmonicResponseControlExcitationFrequencies, IEquatable<ClusterAroundModes>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClusterAroundModes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ClusterAroundModes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ClusterAroundModes" /> class.
        /// </summary>
        /// <param name="type">Schema name: ClusterAroundModes (required) (default to &quot;CLUSTER_AROUND_MODES&quot;).</param>
        /// <param name="startFrequency">startFrequency.</param>
        /// <param name="endFrequency">endFrequency.</param>
        /// <param name="frequenciesPerMode">frequenciesPerMode (default to 5).</param>
        /// <param name="percentageSpread">percentageSpread (default to 10M).</param>
        public ClusterAroundModes(string type = "CLUSTER_AROUND_MODES", DimensionalFrequency startFrequency = default(DimensionalFrequency), DimensionalFrequency endFrequency = default(DimensionalFrequency), int? frequenciesPerMode = default(int?), decimal? percentageSpread = default(decimal?))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for ClusterAroundModes and cannot be null");
            this.StartFrequency = startFrequency;
            this.EndFrequency = endFrequency;
            this.FrequenciesPerMode = frequenciesPerMode;
            this.PercentageSpread = percentageSpread;
        }
        
        /// <summary>
        /// Schema name: ClusterAroundModes
        /// </summary>
        /// <value>Schema name: ClusterAroundModes</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets StartFrequency
        /// </summary>
        [DataMember(Name="startFrequency", EmitDefaultValue=false)]
        public DimensionalFrequency StartFrequency { get; set; }

        /// <summary>
        /// Gets or Sets EndFrequency
        /// </summary>
        [DataMember(Name="endFrequency", EmitDefaultValue=false)]
        public DimensionalFrequency EndFrequency { get; set; }

        /// <summary>
        /// Gets or Sets FrequenciesPerMode
        /// </summary>
        [DataMember(Name="frequenciesPerMode", EmitDefaultValue=false)]
        public int? FrequenciesPerMode { get; set; }

        /// <summary>
        /// Gets or Sets PercentageSpread
        /// </summary>
        [DataMember(Name="percentageSpread", EmitDefaultValue=false)]
        public decimal? PercentageSpread { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClusterAroundModes {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  StartFrequency: ").Append(StartFrequency).Append("\n");
            sb.Append("  EndFrequency: ").Append(EndFrequency).Append("\n");
            sb.Append("  FrequenciesPerMode: ").Append(FrequenciesPerMode).Append("\n");
            sb.Append("  PercentageSpread: ").Append(PercentageSpread).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ClusterAroundModes);
        }

        /// <summary>
        /// Returns true if ClusterAroundModes instances are equal
        /// </summary>
        /// <param name="input">Instance of ClusterAroundModes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClusterAroundModes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.StartFrequency == input.StartFrequency ||
                    (this.StartFrequency != null &&
                    this.StartFrequency.Equals(input.StartFrequency))
                ) && 
                (
                    this.EndFrequency == input.EndFrequency ||
                    (this.EndFrequency != null &&
                    this.EndFrequency.Equals(input.EndFrequency))
                ) && 
                (
                    this.FrequenciesPerMode == input.FrequenciesPerMode ||
                    (this.FrequenciesPerMode != null &&
                    this.FrequenciesPerMode.Equals(input.FrequenciesPerMode))
                ) && 
                (
                    this.PercentageSpread == input.PercentageSpread ||
                    (this.PercentageSpread != null &&
                    this.PercentageSpread.Equals(input.PercentageSpread))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.StartFrequency != null)
                    hashCode = hashCode * 59 + this.StartFrequency.GetHashCode();
                if (this.EndFrequency != null)
                    hashCode = hashCode * 59 + this.EndFrequency.GetHashCode();
                if (this.FrequenciesPerMode != null)
                    hashCode = hashCode * 59 + this.FrequenciesPerMode.GetHashCode();
                if (this.PercentageSpread != null)
                    hashCode = hashCode * 59 + this.PercentageSpread.GetHashCode();
                return hashCode;
            }
        }

    }

}
