/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// MarcSimulationControl
    /// </summary>
    [DataContract]
    public partial class MarcSimulationControl : IEquatable<MarcSimulationControl>
    {
        /// <summary>
        /// &lt;p&gt;Selecting more processor cores will speed up the simulation process. Choosing a smaller computation instance will save core hours. &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/simulation-control-fluid/#number-of-processors&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;Selecting more processor cores will speed up the simulation process. Choosing a smaller computation instance will save core hours. &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/simulation-control-fluid/#number-of-processors&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.&lt;/p&gt;</value>
        public enum NumProcessorsEnum
        {
            /// <summary>
            /// Enum NUMBER_MINUS_1 for value: -1
            /// </summary>
            NUMBER_MINUS_1 = -1,

            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            NUMBER_2 = 2,

            /// <summary>
            /// Enum NUMBER_4 for value: 4
            /// </summary>
            NUMBER_4 = 4,

            /// <summary>
            /// Enum NUMBER_8 for value: 8
            /// </summary>
            NUMBER_8 = 8,

            /// <summary>
            /// Enum NUMBER_16 for value: 16
            /// </summary>
            NUMBER_16 = 16,

            /// <summary>
            /// Enum NUMBER_32 for value: 32
            /// </summary>
            NUMBER_32 = 32,

            /// <summary>
            /// Enum NUMBER_48 for value: 48
            /// </summary>
            NUMBER_48 = 48,

            /// <summary>
            /// Enum NUMBER_64 for value: 64
            /// </summary>
            NUMBER_64 = 64,

            /// <summary>
            /// Enum NUMBER_96 for value: 96
            /// </summary>
            NUMBER_96 = 96,

            /// <summary>
            /// Enum NUMBER_128 for value: 128
            /// </summary>
            NUMBER_128 = 128,

            /// <summary>
            /// Enum NUMBER_192 for value: 192
            /// </summary>
            NUMBER_192 = 192

        }

        /// <summary>
        /// &lt;p&gt;Selecting more processor cores will speed up the simulation process. Choosing a smaller computation instance will save core hours. &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/simulation-control-fluid/#number-of-processors&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;Selecting more processor cores will speed up the simulation process. Choosing a smaller computation instance will save core hours. &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/simulation-control-fluid/#number-of-processors&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.&lt;/p&gt;</value>
        [DataMember(Name="numProcessors", EmitDefaultValue=false)]
        public NumProcessorsEnum? NumProcessors { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MarcSimulationControl" /> class.
        /// </summary>
        /// <param name="endTime">endTime.</param>
        /// <param name="initialTimeStep">initialTimeStep.</param>
        /// <param name="minimumTimeStep">minimumTimeStep.</param>
        /// <param name="maximumTimeStep">maximumTimeStep.</param>
        /// <param name="writeFrequency">Output results are saved every n time steps. Use a value larger than one to reduce the size of the output data and speed up the postprocessing. (default to 1).</param>
        /// <param name="numProcessors">&lt;p&gt;Selecting more processor cores will speed up the simulation process. Choosing a smaller computation instance will save core hours. &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/simulation-control-fluid/#number-of-processors&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.&lt;/p&gt; (default to NumProcessorsEnum.NUMBER_MINUS_1).</param>
        /// <param name="manuallyAssignParallelization">manuallyAssignParallelization (default to false).</param>
        /// <param name="nprocds">nprocds (default to -1).</param>
        /// <param name="nte">nte (default to -1).</param>
        /// <param name="nts">nts (default to -1).</param>
        /// <param name="nsolver">nsolver (default to -1).</param>
        /// <param name="maxRunTime">maxRunTime.</param>
        public MarcSimulationControl(DimensionalTime endTime = default(DimensionalTime), DimensionalTime initialTimeStep = default(DimensionalTime), DimensionalTime minimumTimeStep = default(DimensionalTime), DimensionalTime maximumTimeStep = default(DimensionalTime), int? writeFrequency = default(int?), NumProcessorsEnum? numProcessors = default(NumProcessorsEnum?), bool? manuallyAssignParallelization = default(bool?), int? nprocds = default(int?), int? nte = default(int?), int? nts = default(int?), int? nsolver = default(int?), DimensionalTime maxRunTime = default(DimensionalTime))
        {
            this.EndTime = endTime;
            this.InitialTimeStep = initialTimeStep;
            this.MinimumTimeStep = minimumTimeStep;
            this.MaximumTimeStep = maximumTimeStep;
            this.WriteFrequency = writeFrequency;
            this.NumProcessors = numProcessors;
            this.ManuallyAssignParallelization = manuallyAssignParallelization;
            this.Nprocds = nprocds;
            this.Nte = nte;
            this.Nts = nts;
            this.Nsolver = nsolver;
            this.MaxRunTime = maxRunTime;
        }
        
        /// <summary>
        /// Gets or Sets EndTime
        /// </summary>
        [DataMember(Name="endTime", EmitDefaultValue=false)]
        public DimensionalTime EndTime { get; set; }

        /// <summary>
        /// Gets or Sets InitialTimeStep
        /// </summary>
        [DataMember(Name="initialTimeStep", EmitDefaultValue=false)]
        public DimensionalTime InitialTimeStep { get; set; }

        /// <summary>
        /// Gets or Sets MinimumTimeStep
        /// </summary>
        [DataMember(Name="minimumTimeStep", EmitDefaultValue=false)]
        public DimensionalTime MinimumTimeStep { get; set; }

        /// <summary>
        /// Gets or Sets MaximumTimeStep
        /// </summary>
        [DataMember(Name="maximumTimeStep", EmitDefaultValue=false)]
        public DimensionalTime MaximumTimeStep { get; set; }

        /// <summary>
        /// Output results are saved every n time steps. Use a value larger than one to reduce the size of the output data and speed up the postprocessing.
        /// </summary>
        /// <value>Output results are saved every n time steps. Use a value larger than one to reduce the size of the output data and speed up the postprocessing.</value>
        [DataMember(Name="writeFrequency", EmitDefaultValue=false)]
        public int? WriteFrequency { get; set; }

        /// <summary>
        /// Gets or Sets ManuallyAssignParallelization
        /// </summary>
        [DataMember(Name="manuallyAssignParallelization", EmitDefaultValue=false)]
        public bool? ManuallyAssignParallelization { get; set; }

        /// <summary>
        /// Gets or Sets Nprocds
        /// </summary>
        [DataMember(Name="nprocds", EmitDefaultValue=false)]
        public int? Nprocds { get; set; }

        /// <summary>
        /// Gets or Sets Nte
        /// </summary>
        [DataMember(Name="nte", EmitDefaultValue=false)]
        public int? Nte { get; set; }

        /// <summary>
        /// Gets or Sets Nts
        /// </summary>
        [DataMember(Name="nts", EmitDefaultValue=false)]
        public int? Nts { get; set; }

        /// <summary>
        /// Gets or Sets Nsolver
        /// </summary>
        [DataMember(Name="nsolver", EmitDefaultValue=false)]
        public int? Nsolver { get; set; }

        /// <summary>
        /// Gets or Sets MaxRunTime
        /// </summary>
        [DataMember(Name="maxRunTime", EmitDefaultValue=false)]
        public DimensionalTime MaxRunTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MarcSimulationControl {\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  InitialTimeStep: ").Append(InitialTimeStep).Append("\n");
            sb.Append("  MinimumTimeStep: ").Append(MinimumTimeStep).Append("\n");
            sb.Append("  MaximumTimeStep: ").Append(MaximumTimeStep).Append("\n");
            sb.Append("  WriteFrequency: ").Append(WriteFrequency).Append("\n");
            sb.Append("  NumProcessors: ").Append(NumProcessors).Append("\n");
            sb.Append("  ManuallyAssignParallelization: ").Append(ManuallyAssignParallelization).Append("\n");
            sb.Append("  Nprocds: ").Append(Nprocds).Append("\n");
            sb.Append("  Nte: ").Append(Nte).Append("\n");
            sb.Append("  Nts: ").Append(Nts).Append("\n");
            sb.Append("  Nsolver: ").Append(Nsolver).Append("\n");
            sb.Append("  MaxRunTime: ").Append(MaxRunTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MarcSimulationControl);
        }

        /// <summary>
        /// Returns true if MarcSimulationControl instances are equal
        /// </summary>
        /// <param name="input">Instance of MarcSimulationControl to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MarcSimulationControl input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.InitialTimeStep == input.InitialTimeStep ||
                    (this.InitialTimeStep != null &&
                    this.InitialTimeStep.Equals(input.InitialTimeStep))
                ) && 
                (
                    this.MinimumTimeStep == input.MinimumTimeStep ||
                    (this.MinimumTimeStep != null &&
                    this.MinimumTimeStep.Equals(input.MinimumTimeStep))
                ) && 
                (
                    this.MaximumTimeStep == input.MaximumTimeStep ||
                    (this.MaximumTimeStep != null &&
                    this.MaximumTimeStep.Equals(input.MaximumTimeStep))
                ) && 
                (
                    this.WriteFrequency == input.WriteFrequency ||
                    (this.WriteFrequency != null &&
                    this.WriteFrequency.Equals(input.WriteFrequency))
                ) && 
                (
                    this.NumProcessors == input.NumProcessors ||
                    this.NumProcessors.Equals(input.NumProcessors)
                ) && 
                (
                    this.ManuallyAssignParallelization == input.ManuallyAssignParallelization ||
                    (this.ManuallyAssignParallelization != null &&
                    this.ManuallyAssignParallelization.Equals(input.ManuallyAssignParallelization))
                ) && 
                (
                    this.Nprocds == input.Nprocds ||
                    (this.Nprocds != null &&
                    this.Nprocds.Equals(input.Nprocds))
                ) && 
                (
                    this.Nte == input.Nte ||
                    (this.Nte != null &&
                    this.Nte.Equals(input.Nte))
                ) && 
                (
                    this.Nts == input.Nts ||
                    (this.Nts != null &&
                    this.Nts.Equals(input.Nts))
                ) && 
                (
                    this.Nsolver == input.Nsolver ||
                    (this.Nsolver != null &&
                    this.Nsolver.Equals(input.Nsolver))
                ) && 
                (
                    this.MaxRunTime == input.MaxRunTime ||
                    (this.MaxRunTime != null &&
                    this.MaxRunTime.Equals(input.MaxRunTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EndTime != null)
                    hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                if (this.InitialTimeStep != null)
                    hashCode = hashCode * 59 + this.InitialTimeStep.GetHashCode();
                if (this.MinimumTimeStep != null)
                    hashCode = hashCode * 59 + this.MinimumTimeStep.GetHashCode();
                if (this.MaximumTimeStep != null)
                    hashCode = hashCode * 59 + this.MaximumTimeStep.GetHashCode();
                if (this.WriteFrequency != null)
                    hashCode = hashCode * 59 + this.WriteFrequency.GetHashCode();
                hashCode = hashCode * 59 + this.NumProcessors.GetHashCode();
                if (this.ManuallyAssignParallelization != null)
                    hashCode = hashCode * 59 + this.ManuallyAssignParallelization.GetHashCode();
                if (this.Nprocds != null)
                    hashCode = hashCode * 59 + this.Nprocds.GetHashCode();
                if (this.Nte != null)
                    hashCode = hashCode * 59 + this.Nte.GetHashCode();
                if (this.Nts != null)
                    hashCode = hashCode * 59 + this.Nts.GetHashCode();
                if (this.Nsolver != null)
                    hashCode = hashCode * 59 + this.Nsolver.GetHashCode();
                if (this.MaxRunTime != null)
                    hashCode = hashCode * 59 + this.MaxRunTime.GetHashCode();
                return hashCode;
            }
        }

    }

}
