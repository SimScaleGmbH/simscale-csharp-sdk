/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// ChronosSolver
    /// </summary>
    [DataContract]
    public partial class ChronosSolver : OneOfSolidNumericsSolver, IEquatable<ChronosSolver>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChronosSolver" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChronosSolver() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChronosSolver" /> class.
        /// </summary>
        /// <param name="type">Schema name: ChronosSolver (required) (default to &quot;CHRONOS&quot;).</param>
        /// <param name="convergenceThreshold">Select the convergence tolerance. Can be smaller than with PETSc, and has a big impact on the newton convergence. It is recommended to start with a smaller value in case of convergence problems e.g. 1e-8 - 1e-10. (default to 0.0000010M).</param>
        /// <param name="maxIterations">Maximum number of iterations for Chronos. Should be 1000 for AMG (max 3000), and 5000 with FSAI (max 10000). (default to 1000).</param>
        /// <param name="advancedSettings">advancedSettings.</param>
        public ChronosSolver(string type = "CHRONOS", decimal? convergenceThreshold = default(decimal?), int? maxIterations = default(int?), AdvancedChronosSettings advancedSettings = default(AdvancedChronosSettings))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for ChronosSolver and cannot be null");
            this.ConvergenceThreshold = convergenceThreshold;
            this.MaxIterations = maxIterations;
            this.AdvancedSettings = advancedSettings;
        }
        
        /// <summary>
        /// Schema name: ChronosSolver
        /// </summary>
        /// <value>Schema name: ChronosSolver</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Select the convergence tolerance. Can be smaller than with PETSc, and has a big impact on the newton convergence. It is recommended to start with a smaller value in case of convergence problems e.g. 1e-8 - 1e-10.
        /// </summary>
        /// <value>Select the convergence tolerance. Can be smaller than with PETSc, and has a big impact on the newton convergence. It is recommended to start with a smaller value in case of convergence problems e.g. 1e-8 - 1e-10.</value>
        [DataMember(Name="convergenceThreshold", EmitDefaultValue=false)]
        public decimal? ConvergenceThreshold { get; set; }

        /// <summary>
        /// Maximum number of iterations for Chronos. Should be 1000 for AMG (max 3000), and 5000 with FSAI (max 10000).
        /// </summary>
        /// <value>Maximum number of iterations for Chronos. Should be 1000 for AMG (max 3000), and 5000 with FSAI (max 10000).</value>
        [DataMember(Name="maxIterations", EmitDefaultValue=false)]
        public int? MaxIterations { get; set; }

        /// <summary>
        /// Gets or Sets AdvancedSettings
        /// </summary>
        [DataMember(Name="advancedSettings", EmitDefaultValue=false)]
        public AdvancedChronosSettings AdvancedSettings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChronosSolver {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ConvergenceThreshold: ").Append(ConvergenceThreshold).Append("\n");
            sb.Append("  MaxIterations: ").Append(MaxIterations).Append("\n");
            sb.Append("  AdvancedSettings: ").Append(AdvancedSettings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChronosSolver);
        }

        /// <summary>
        /// Returns true if ChronosSolver instances are equal
        /// </summary>
        /// <param name="input">Instance of ChronosSolver to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChronosSolver input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.ConvergenceThreshold == input.ConvergenceThreshold ||
                    (this.ConvergenceThreshold != null &&
                    this.ConvergenceThreshold.Equals(input.ConvergenceThreshold))
                ) && 
                (
                    this.MaxIterations == input.MaxIterations ||
                    (this.MaxIterations != null &&
                    this.MaxIterations.Equals(input.MaxIterations))
                ) && 
                (
                    this.AdvancedSettings == input.AdvancedSettings ||
                    (this.AdvancedSettings != null &&
                    this.AdvancedSettings.Equals(input.AdvancedSettings))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.ConvergenceThreshold != null)
                    hashCode = hashCode * 59 + this.ConvergenceThreshold.GetHashCode();
                if (this.MaxIterations != null)
                    hashCode = hashCode * 59 + this.MaxIterations.GetHashCode();
                if (this.AdvancedSettings != null)
                    hashCode = hashCode * 59 + this.AdvancedSettings.GetHashCode();
                return hashCode;
            }
        }

    }

}
