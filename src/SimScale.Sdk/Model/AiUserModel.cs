/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// AiUserModel
    /// </summary>
    [DataContract]
    public partial class AiUserModel : IEquatable<AiUserModel>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AiUserModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public AiUserModel()
        {
        }
        
        /// <summary>
        /// Possible values are STATIC_ANALYSIS, INCOMPRESSIBLE, COUPLED_CONJUGATE_HEAT_TRANSFER and EMBEDDED_BOUNDARY 
        /// </summary>
        /// <value>Possible values are STATIC_ANALYSIS, INCOMPRESSIBLE, COUPLED_CONJUGATE_HEAT_TRANSFER and EMBEDDED_BOUNDARY </value>
        [DataMember(Name="analysisType", EmitDefaultValue=false)]
        public string AnalysisType { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; private set; }

        /// <summary>
        /// Possible values are navasto and ai-solver-kickstart 
        /// </summary>
        /// <value>Possible values are navasto and ai-solver-kickstart </value>
        [DataMember(Name="predictorComponent", EmitDefaultValue=false)]
        public string PredictorComponent { get; private set; }

        /// <summary>
        /// Gets or Sets SharedWithOrganization
        /// </summary>
        [DataMember(Name="sharedWithOrganization", EmitDefaultValue=false)]
        public bool? SharedWithOrganization { get; private set; }

        /// <summary>
        /// Possible values are fea_template, cfd_template, chtv2ibm_template, spec_id and spec_and_tesselation 
        /// </summary>
        /// <value>Possible values are fea_template, cfd_template, chtv2ibm_template, spec_id and spec_and_tesselation </value>
        [DataMember(Name="templateName", EmitDefaultValue=false)]
        public string TemplateName { get; private set; }

        /// <summary>
        /// Gets or Sets TemplateParameters
        /// </summary>
        [DataMember(Name="templateParameters", EmitDefaultValue=false)]
        public Object TemplateParameters { get; private set; }

        /// <summary>
        /// Gets or Sets AiModelId
        /// </summary>
        [DataMember(Name="aiModelId", EmitDefaultValue=false)]
        public Guid? AiModelId { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AiUserModel {\n");
            sb.Append("  AnalysisType: ").Append(AnalysisType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PredictorComponent: ").Append(PredictorComponent).Append("\n");
            sb.Append("  SharedWithOrganization: ").Append(SharedWithOrganization).Append("\n");
            sb.Append("  TemplateName: ").Append(TemplateName).Append("\n");
            sb.Append("  TemplateParameters: ").Append(TemplateParameters).Append("\n");
            sb.Append("  AiModelId: ").Append(AiModelId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AiUserModel);
        }

        /// <summary>
        /// Returns true if AiUserModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AiUserModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AiUserModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AnalysisType == input.AnalysisType ||
                    (this.AnalysisType != null &&
                    this.AnalysisType.Equals(input.AnalysisType))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PredictorComponent == input.PredictorComponent ||
                    (this.PredictorComponent != null &&
                    this.PredictorComponent.Equals(input.PredictorComponent))
                ) && 
                (
                    this.SharedWithOrganization == input.SharedWithOrganization ||
                    (this.SharedWithOrganization != null &&
                    this.SharedWithOrganization.Equals(input.SharedWithOrganization))
                ) && 
                (
                    this.TemplateName == input.TemplateName ||
                    (this.TemplateName != null &&
                    this.TemplateName.Equals(input.TemplateName))
                ) && 
                (
                    this.TemplateParameters == input.TemplateParameters ||
                    (this.TemplateParameters != null &&
                    this.TemplateParameters.Equals(input.TemplateParameters))
                ) && 
                (
                    this.AiModelId == input.AiModelId ||
                    (this.AiModelId != null &&
                    this.AiModelId.Equals(input.AiModelId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AnalysisType != null)
                    hashCode = hashCode * 59 + this.AnalysisType.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.PredictorComponent != null)
                    hashCode = hashCode * 59 + this.PredictorComponent.GetHashCode();
                if (this.SharedWithOrganization != null)
                    hashCode = hashCode * 59 + this.SharedWithOrganization.GetHashCode();
                if (this.TemplateName != null)
                    hashCode = hashCode * 59 + this.TemplateName.GetHashCode();
                if (this.TemplateParameters != null)
                    hashCode = hashCode * 59 + this.TemplateParameters.GetHashCode();
                if (this.AiModelId != null)
                    hashCode = hashCode * 59 + this.AiModelId.GetHashCode();
                return hashCode;
            }
        }

    }

}
