/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// RotatableCartesianBox
    /// </summary>
    [DataContract]
    public partial class RotatableCartesianBox : GeometryPrimitive, IEquatable<RotatableCartesianBox>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RotatableCartesianBox" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RotatableCartesianBox() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RotatableCartesianBox" /> class.
        /// </summary>
        /// <param name="type">type (required) (default to &quot;ROTATABLE_CARTESIAN_BOX&quot;).</param>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="min">min.</param>
        /// <param name="max">max.</param>
        /// <param name="rotationPoint">rotationPoint.</param>
        /// <param name="rotationAngles">rotationAngles.</param>
        public RotatableCartesianBox(string type = "ROTATABLE_CARTESIAN_BOX", Guid? id = default(Guid?), string name = default(string), DimensionalVectorLength min = default(DimensionalVectorLength), DimensionalVectorLength max = default(DimensionalVectorLength), DimensionalVectorLength rotationPoint = default(DimensionalVectorLength), DimensionalVectorAngle rotationAngles = default(DimensionalVectorAngle))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for RotatableCartesianBox and cannot be null");
            this.Id = id;
            this.Name = name;
            this.Min = min;
            this.Max = max;
            this.RotationPoint = rotationPoint;
            this.RotationAngles = rotationAngles;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Min
        /// </summary>
        [DataMember(Name="min", EmitDefaultValue=false)]
        public DimensionalVectorLength Min { get; set; }

        /// <summary>
        /// Gets or Sets Max
        /// </summary>
        [DataMember(Name="max", EmitDefaultValue=false)]
        public DimensionalVectorLength Max { get; set; }

        /// <summary>
        /// Gets or Sets RotationPoint
        /// </summary>
        [DataMember(Name="rotationPoint", EmitDefaultValue=false)]
        public DimensionalVectorLength RotationPoint { get; set; }

        /// <summary>
        /// Gets or Sets RotationAngles
        /// </summary>
        [DataMember(Name="rotationAngles", EmitDefaultValue=false)]
        public DimensionalVectorAngle RotationAngles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RotatableCartesianBox {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Min: ").Append(Min).Append("\n");
            sb.Append("  Max: ").Append(Max).Append("\n");
            sb.Append("  RotationPoint: ").Append(RotationPoint).Append("\n");
            sb.Append("  RotationAngles: ").Append(RotationAngles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RotatableCartesianBox);
        }

        /// <summary>
        /// Returns true if RotatableCartesianBox instances are equal
        /// </summary>
        /// <param name="input">Instance of RotatableCartesianBox to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RotatableCartesianBox input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Min == input.Min ||
                    (this.Min != null &&
                    this.Min.Equals(input.Min))
                ) && 
                (
                    this.Max == input.Max ||
                    (this.Max != null &&
                    this.Max.Equals(input.Max))
                ) && 
                (
                    this.RotationPoint == input.RotationPoint ||
                    (this.RotationPoint != null &&
                    this.RotationPoint.Equals(input.RotationPoint))
                ) && 
                (
                    this.RotationAngles == input.RotationAngles ||
                    (this.RotationAngles != null &&
                    this.RotationAngles.Equals(input.RotationAngles))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Min != null)
                    hashCode = hashCode * 59 + this.Min.GetHashCode();
                if (this.Max != null)
                    hashCode = hashCode * 59 + this.Max.GetHashCode();
                if (this.RotationPoint != null)
                    hashCode = hashCode * 59 + this.RotationPoint.GetHashCode();
                if (this.RotationAngles != null)
                    hashCode = hashCode * 59 + this.RotationAngles.GetHashCode();
                return hashCode;
            }
        }

    }

}
