/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// Filters
    /// </summary>
    [DataContract]
    public partial class Filters : IEquatable<Filters>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Filters" /> class.
        /// </summary>
        /// <param name="cuttingPlanes">cuttingPlanes.</param>
        /// <param name="isoSurfaces">isoSurfaces.</param>
        /// <param name="isoVolumes">isoVolumes.</param>
        /// <param name="displacement">displacement.</param>
        /// <param name="particleTraces">particleTraces.</param>
        public Filters(List<CuttingPlane> cuttingPlanes = default(List<CuttingPlane>), List<IsoSurface> isoSurfaces = default(List<IsoSurface>), List<IsoVolume> isoVolumes = default(List<IsoVolume>), Displacement displacement = default(Displacement), List<ParticleTrace> particleTraces = default(List<ParticleTrace>))
        {
            this.CuttingPlanes = cuttingPlanes;
            this.IsoSurfaces = isoSurfaces;
            this.IsoVolumes = isoVolumes;
            this.Displacement = displacement;
            this.ParticleTraces = particleTraces;
        }
        
        /// <summary>
        /// Gets or Sets CuttingPlanes
        /// </summary>
        [DataMember(Name="cuttingPlanes", EmitDefaultValue=false)]
        public List<CuttingPlane> CuttingPlanes { get; set; }

        /// <summary>
        /// Gets or Sets IsoSurfaces
        /// </summary>
        [DataMember(Name="isoSurfaces", EmitDefaultValue=false)]
        public List<IsoSurface> IsoSurfaces { get; set; }

        /// <summary>
        /// Gets or Sets IsoVolumes
        /// </summary>
        [DataMember(Name="isoVolumes", EmitDefaultValue=false)]
        public List<IsoVolume> IsoVolumes { get; set; }

        /// <summary>
        /// Gets or Sets Displacement
        /// </summary>
        [DataMember(Name="displacement", EmitDefaultValue=false)]
        public Displacement Displacement { get; set; }

        /// <summary>
        /// Gets or Sets ParticleTraces
        /// </summary>
        [DataMember(Name="particleTraces", EmitDefaultValue=false)]
        public List<ParticleTrace> ParticleTraces { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Filters {\n");
            sb.Append("  CuttingPlanes: ").Append(CuttingPlanes).Append("\n");
            sb.Append("  IsoSurfaces: ").Append(IsoSurfaces).Append("\n");
            sb.Append("  IsoVolumes: ").Append(IsoVolumes).Append("\n");
            sb.Append("  Displacement: ").Append(Displacement).Append("\n");
            sb.Append("  ParticleTraces: ").Append(ParticleTraces).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Filters);
        }

        /// <summary>
        /// Returns true if Filters instances are equal
        /// </summary>
        /// <param name="input">Instance of Filters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Filters input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CuttingPlanes == input.CuttingPlanes ||
                    this.CuttingPlanes != null &&
                    input.CuttingPlanes != null &&
                    this.CuttingPlanes.SequenceEqual(input.CuttingPlanes)
                ) && 
                (
                    this.IsoSurfaces == input.IsoSurfaces ||
                    this.IsoSurfaces != null &&
                    input.IsoSurfaces != null &&
                    this.IsoSurfaces.SequenceEqual(input.IsoSurfaces)
                ) && 
                (
                    this.IsoVolumes == input.IsoVolumes ||
                    this.IsoVolumes != null &&
                    input.IsoVolumes != null &&
                    this.IsoVolumes.SequenceEqual(input.IsoVolumes)
                ) && 
                (
                    this.Displacement == input.Displacement ||
                    (this.Displacement != null &&
                    this.Displacement.Equals(input.Displacement))
                ) && 
                (
                    this.ParticleTraces == input.ParticleTraces ||
                    this.ParticleTraces != null &&
                    input.ParticleTraces != null &&
                    this.ParticleTraces.SequenceEqual(input.ParticleTraces)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CuttingPlanes != null)
                    hashCode = hashCode * 59 + this.CuttingPlanes.GetHashCode();
                if (this.IsoSurfaces != null)
                    hashCode = hashCode * 59 + this.IsoSurfaces.GetHashCode();
                if (this.IsoVolumes != null)
                    hashCode = hashCode * 59 + this.IsoVolumes.GetHashCode();
                if (this.Displacement != null)
                    hashCode = hashCode * 59 + this.Displacement.GetHashCode();
                if (this.ParticleTraces != null)
                    hashCode = hashCode * 59 + this.ParticleTraces.GetHashCode();
                return hashCode;
            }
        }

    }

}
