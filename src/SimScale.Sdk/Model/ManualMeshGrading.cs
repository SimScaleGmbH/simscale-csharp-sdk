/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// ManualMeshGrading
    /// </summary>
    [DataContract]
    public partial class ManualMeshGrading : OneOfManualMeshSizingGrading, IEquatable<ManualMeshGrading>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ManualMeshGrading" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ManualMeshGrading() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ManualMeshGrading" /> class.
        /// </summary>
        /// <param name="type">type (required) (default to &quot;MANUAL&quot;).</param>
        /// <param name="numberOfSegmentsPerEdge">&lt;p&gt;This value defines the minimum number of elements along a &lt;b&gt;geometry edge&lt;/b&gt;.&lt;/p&gt; (default to 0.5M).</param>
        /// <param name="numberOfSegmentsPerRadius">&lt;p&gt;This value defines the minimum number of elements along a &lt;b&gt;geometry radius&lt;/b&gt;.&lt;/p&gt; (default to 1.5M).</param>
        /// <param name="growthRate">&lt;p&gt;The &lt;b&gt;growth rate&lt;/b&gt; determines how large the allowed difference in element size between neighbouring elements is. For example a value of 0.2 allows the edges of neighbouring elements to differ by 20%.&lt;/p&gt;&lt;p&gt;If a large value is chosen, features requiring a finer mesh, like holes or fillets, will have a very local influence on the element size whereas for a small mesh grading those features will influence the element sizes in a wider area around them.&lt;/p&gt;&lt;p&gt;Choosing a smaller value will thus lead to a higher number of elements but also result in a better overall mesh quality.&lt;/p&gt;&lt;p&gt;&lt;img src&#x3D;\&quot;/spec/resources/help/imgs/growth_rate_comparison.png\&quot; class&#x3D;\&quot;helpPopupImage\&quot;/&gt; The figure shows meshes for growth rate &lt;i&gt;2&lt;/i&gt; (left) and &lt;i&gt;0.2&lt;/i&gt; (right).&lt;/p&gt; (default to 0.5M).</param>
        public ManualMeshGrading(string type = "MANUAL", decimal? numberOfSegmentsPerEdge = default(decimal?), decimal? numberOfSegmentsPerRadius = default(decimal?), decimal? growthRate = default(decimal?))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for ManualMeshGrading and cannot be null");
            this.NumberOfSegmentsPerEdge = numberOfSegmentsPerEdge;
            this.NumberOfSegmentsPerRadius = numberOfSegmentsPerRadius;
            this.GrowthRate = growthRate;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// &lt;p&gt;This value defines the minimum number of elements along a &lt;b&gt;geometry edge&lt;/b&gt;.&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;This value defines the minimum number of elements along a &lt;b&gt;geometry edge&lt;/b&gt;.&lt;/p&gt;</value>
        [DataMember(Name="numberOfSegmentsPerEdge", EmitDefaultValue=false)]
        public decimal? NumberOfSegmentsPerEdge { get; set; }

        /// <summary>
        /// &lt;p&gt;This value defines the minimum number of elements along a &lt;b&gt;geometry radius&lt;/b&gt;.&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;This value defines the minimum number of elements along a &lt;b&gt;geometry radius&lt;/b&gt;.&lt;/p&gt;</value>
        [DataMember(Name="numberOfSegmentsPerRadius", EmitDefaultValue=false)]
        public decimal? NumberOfSegmentsPerRadius { get; set; }

        /// <summary>
        /// &lt;p&gt;The &lt;b&gt;growth rate&lt;/b&gt; determines how large the allowed difference in element size between neighbouring elements is. For example a value of 0.2 allows the edges of neighbouring elements to differ by 20%.&lt;/p&gt;&lt;p&gt;If a large value is chosen, features requiring a finer mesh, like holes or fillets, will have a very local influence on the element size whereas for a small mesh grading those features will influence the element sizes in a wider area around them.&lt;/p&gt;&lt;p&gt;Choosing a smaller value will thus lead to a higher number of elements but also result in a better overall mesh quality.&lt;/p&gt;&lt;p&gt;&lt;img src&#x3D;\&quot;/spec/resources/help/imgs/growth_rate_comparison.png\&quot; class&#x3D;\&quot;helpPopupImage\&quot;/&gt; The figure shows meshes for growth rate &lt;i&gt;2&lt;/i&gt; (left) and &lt;i&gt;0.2&lt;/i&gt; (right).&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;The &lt;b&gt;growth rate&lt;/b&gt; determines how large the allowed difference in element size between neighbouring elements is. For example a value of 0.2 allows the edges of neighbouring elements to differ by 20%.&lt;/p&gt;&lt;p&gt;If a large value is chosen, features requiring a finer mesh, like holes or fillets, will have a very local influence on the element size whereas for a small mesh grading those features will influence the element sizes in a wider area around them.&lt;/p&gt;&lt;p&gt;Choosing a smaller value will thus lead to a higher number of elements but also result in a better overall mesh quality.&lt;/p&gt;&lt;p&gt;&lt;img src&#x3D;\&quot;/spec/resources/help/imgs/growth_rate_comparison.png\&quot; class&#x3D;\&quot;helpPopupImage\&quot;/&gt; The figure shows meshes for growth rate &lt;i&gt;2&lt;/i&gt; (left) and &lt;i&gt;0.2&lt;/i&gt; (right).&lt;/p&gt;</value>
        [DataMember(Name="growthRate", EmitDefaultValue=false)]
        public decimal? GrowthRate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ManualMeshGrading {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  NumberOfSegmentsPerEdge: ").Append(NumberOfSegmentsPerEdge).Append("\n");
            sb.Append("  NumberOfSegmentsPerRadius: ").Append(NumberOfSegmentsPerRadius).Append("\n");
            sb.Append("  GrowthRate: ").Append(GrowthRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ManualMeshGrading);
        }

        /// <summary>
        /// Returns true if ManualMeshGrading instances are equal
        /// </summary>
        /// <param name="input">Instance of ManualMeshGrading to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ManualMeshGrading input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.NumberOfSegmentsPerEdge == input.NumberOfSegmentsPerEdge ||
                    (this.NumberOfSegmentsPerEdge != null &&
                    this.NumberOfSegmentsPerEdge.Equals(input.NumberOfSegmentsPerEdge))
                ) && 
                (
                    this.NumberOfSegmentsPerRadius == input.NumberOfSegmentsPerRadius ||
                    (this.NumberOfSegmentsPerRadius != null &&
                    this.NumberOfSegmentsPerRadius.Equals(input.NumberOfSegmentsPerRadius))
                ) && 
                (
                    this.GrowthRate == input.GrowthRate ||
                    (this.GrowthRate != null &&
                    this.GrowthRate.Equals(input.GrowthRate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.NumberOfSegmentsPerEdge != null)
                    hashCode = hashCode * 59 + this.NumberOfSegmentsPerEdge.GetHashCode();
                if (this.NumberOfSegmentsPerRadius != null)
                    hashCode = hashCode * 59 + this.NumberOfSegmentsPerRadius.GetHashCode();
                if (this.GrowthRate != null)
                    hashCode = hashCode * 59 + this.GrowthRate.GetHashCode();
                return hashCode;
            }
        }

    }

}
