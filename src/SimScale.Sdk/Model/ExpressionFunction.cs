/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// ExpressionFunction
    /// </summary>
    [DataContract]
    public partial class ExpressionFunction : OneOfComponentVectorFunctionX, OneOfComponentVectorFunctionY, OneOfComponentVectorFunctionZ, OneOfDimensionalFunctionAccelerationValue, OneOfDimensionalFunctionAngleValue, OneOfDimensionalFunctionDensityValue, OneOfDimensionalFunctionDimensionlessValue, OneOfDimensionalFunctionDynamicViscosityValue, OneOfDimensionalFunctionElectricResistivityValue, OneOfDimensionalFunctionHeatFluxValue, OneOfDimensionalFunctionLengthValue, OneOfDimensionalFunctionMassFlowRateValue, OneOfDimensionalFunctionPowerValue, OneOfDimensionalFunctionPressureValue, OneOfDimensionalFunctionRotationSpeedValue, OneOfDimensionalFunctionSpecificEnergyValue, OneOfDimensionalFunctionSpecificHeatValue, OneOfDimensionalFunctionSpecificTurbulenceDissipationRateValue, OneOfDimensionalFunctionSpeedValue, OneOfDimensionalFunctionTemperatureGradientValue, OneOfDimensionalFunctionTemperatureValue, OneOfDimensionalFunctionThermalConductivityValue, OneOfDimensionalFunctionThermalExpansionRateValue, OneOfDimensionalFunctionThermalTransmittanceValue, OneOfDimensionalFunctionTurbulenceKineticEnergyValue, OneOfDimensionalFunctionTurbulentDissipationValue, OneOfDimensionalFunctionVolumetricFlowRateValue, OneOfDimensionalFunctionVolumetricPowerValue, OneOfIsotropicDirectionalDependencyPoissonsRatio, OneOfIsotropicPlasticHardeningPoissonsRatio, OneOfPrescribedOptionalFunctionValue, OneOfRestrictedDimensionalFunctionFrequencyValue, OneOfRestrictedDimensionalFunctionTimeValue, OneOfStressTensorPressureSigmaXX, OneOfStressTensorPressureSigmaXY, OneOfStressTensorPressureSigmaXZ, OneOfStressTensorPressureSigmaYY, OneOfStressTensorPressureSigmaYZ, OneOfStressTensorPressureSigmaZZ, IEquatable<ExpressionFunction>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExpressionFunction" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ExpressionFunction() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExpressionFunction" /> class.
        /// </summary>
        /// <param name="type">Schema name: ExpressionFunction (required) (default to &quot;EXPRESSION&quot;).</param>
        /// <param name="expression">expression.</param>
        /// <param name="availableVariables">availableVariables.</param>
        public ExpressionFunction(string type = "EXPRESSION", string expression = default(string), List<FunctionParameter> availableVariables = default(List<FunctionParameter>))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for ExpressionFunction and cannot be null");
            this.Expression = expression;
            this.AvailableVariables = availableVariables;
        }
        
        /// <summary>
        /// Schema name: ExpressionFunction
        /// </summary>
        /// <value>Schema name: ExpressionFunction</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Expression
        /// </summary>
        [DataMember(Name="expression", EmitDefaultValue=false)]
        public string Expression { get; set; }

        /// <summary>
        /// Gets or Sets AvailableVariables
        /// </summary>
        [DataMember(Name="availableVariables", EmitDefaultValue=false)]
        public List<FunctionParameter> AvailableVariables { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExpressionFunction {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Expression: ").Append(Expression).Append("\n");
            sb.Append("  AvailableVariables: ").Append(AvailableVariables).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExpressionFunction);
        }

        /// <summary>
        /// Returns true if ExpressionFunction instances are equal
        /// </summary>
        /// <param name="input">Instance of ExpressionFunction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExpressionFunction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Expression == input.Expression ||
                    (this.Expression != null &&
                    this.Expression.Equals(input.Expression))
                ) && 
                (
                    this.AvailableVariables == input.AvailableVariables ||
                    this.AvailableVariables != null &&
                    input.AvailableVariables != null &&
                    this.AvailableVariables.SequenceEqual(input.AvailableVariables)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Expression != null)
                    hashCode = hashCode * 59 + this.Expression.GetHashCode();
                if (this.AvailableVariables != null)
                    hashCode = hashCode * 59 + this.AvailableVariables.GetHashCode();
                return hashCode;
            }
        }

    }

}
