/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// Material update operation, which can be either updating an existing material in the spec, or adding a new one. See the &#x60;path&#x60; property to learn how add/update operations are distinguished. 
    /// </summary>
    [DataContract]
    public partial class MaterialUpdateOperation : IEquatable<MaterialUpdateOperation>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MaterialUpdateOperation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MaterialUpdateOperation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MaterialUpdateOperation" /> class.
        /// </summary>
        /// <param name="path">JSON pointer (considering the &#x60;model&#x60; field as root) specifying where to add the material. If it points to a container (e.g. &#x60;/materials&#x60; or &#x60;/materials/solids&#x60;), the material will be added to that container. If it points to an existing material instead (e.g. &#x60;/materials/0&#x60; or &#x60;/materials/solids/0&#x60;), the new material will replace the one the pointer points to.  (required).</param>
        /// <param name="materialData">materialData.</param>
        /// <param name="materialSpec">Material spec object that will be used as the base to apply the physical properties passed in &#x60;materialData&#x60;..</param>
        /// <param name="reference">reference.</param>
        public MaterialUpdateOperation(string path = default(string), MaterialResponse materialData = default(MaterialResponse), Object materialSpec = default(Object), MaterialUpdateOperationReference reference = default(MaterialUpdateOperationReference))
        {
            // to ensure "path" is required (not null)
            this.Path = path ?? throw new ArgumentNullException("path is a required property for MaterialUpdateOperation and cannot be null");
            this.MaterialData = materialData;
            this.MaterialSpec = materialSpec;
            this.Reference = reference;
        }
        
        /// <summary>
        /// JSON pointer (considering the &#x60;model&#x60; field as root) specifying where to add the material. If it points to a container (e.g. &#x60;/materials&#x60; or &#x60;/materials/solids&#x60;), the material will be added to that container. If it points to an existing material instead (e.g. &#x60;/materials/0&#x60; or &#x60;/materials/solids/0&#x60;), the new material will replace the one the pointer points to. 
        /// </summary>
        /// <value>JSON pointer (considering the &#x60;model&#x60; field as root) specifying where to add the material. If it points to a container (e.g. &#x60;/materials&#x60; or &#x60;/materials/solids&#x60;), the material will be added to that container. If it points to an existing material instead (e.g. &#x60;/materials/0&#x60; or &#x60;/materials/solids/0&#x60;), the new material will replace the one the pointer points to. </value>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets MaterialData
        /// </summary>
        [DataMember(Name="materialData", EmitDefaultValue=false)]
        public MaterialResponse MaterialData { get; set; }

        /// <summary>
        /// Material spec object that will be used as the base to apply the physical properties passed in &#x60;materialData&#x60;.
        /// </summary>
        /// <value>Material spec object that will be used as the base to apply the physical properties passed in &#x60;materialData&#x60;.</value>
        [DataMember(Name="materialSpec", EmitDefaultValue=false)]
        public Object MaterialSpec { get; set; }

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name="reference", EmitDefaultValue=false)]
        public MaterialUpdateOperationReference Reference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MaterialUpdateOperation {\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  MaterialData: ").Append(MaterialData).Append("\n");
            sb.Append("  MaterialSpec: ").Append(MaterialSpec).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MaterialUpdateOperation);
        }

        /// <summary>
        /// Returns true if MaterialUpdateOperation instances are equal
        /// </summary>
        /// <param name="input">Instance of MaterialUpdateOperation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MaterialUpdateOperation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.MaterialData == input.MaterialData ||
                    (this.MaterialData != null &&
                    this.MaterialData.Equals(input.MaterialData))
                ) && 
                (
                    this.MaterialSpec == input.MaterialSpec ||
                    (this.MaterialSpec != null &&
                    this.MaterialSpec.Equals(input.MaterialSpec))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.MaterialData != null)
                    hashCode = hashCode * 59 + this.MaterialData.GetHashCode();
                if (this.MaterialSpec != null)
                    hashCode = hashCode * 59 + this.MaterialSpec.GetHashCode();
                if (this.Reference != null)
                    hashCode = hashCode * 59 + this.Reference.GetHashCode();
                return hashCode;
            }
        }

    }

}
