/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// HeatTransferCoefficients
    /// </summary>
    [DataContract]
    public partial class HeatTransferCoefficients : OneOfHeatExchangerSourceHeatExchangerMode, IEquatable<HeatTransferCoefficients>
    {
        /// <summary>
        /// Sampling method for the field temperature (T) in T - Tref. This indicates whether the temperature (T) is averaged on the complete heat exchanger or sampled at each position.
        /// </summary>
        /// <value>Sampling method for the field temperature (T) in T - Tref. This indicates whether the temperature (T) is averaged on the complete heat exchanger or sampled at each position.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HeatDistributionEnum
        {
            /// <summary>
            /// Enum LOCAL for value: LOCAL
            /// </summary>
            [EnumMember(Value = "LOCAL")]
            LOCAL = 1,

            /// <summary>
            /// Enum AVERAGE for value: AVERAGE
            /// </summary>
            [EnumMember(Value = "AVERAGE")]
            AVERAGE = 2

        }

        /// <summary>
        /// Sampling method for the field temperature (T) in T - Tref. This indicates whether the temperature (T) is averaged on the complete heat exchanger or sampled at each position.
        /// </summary>
        /// <value>Sampling method for the field temperature (T) in T - Tref. This indicates whether the temperature (T) is averaged on the complete heat exchanger or sampled at each position.</value>
        [DataMember(Name="heatDistribution", EmitDefaultValue=false)]
        public HeatDistributionEnum? HeatDistribution { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="HeatTransferCoefficients" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected HeatTransferCoefficients() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="HeatTransferCoefficients" /> class.
        /// </summary>
        /// <param name="type">Schema name: HeatTransferCoefficients (required) (default to &quot;HEAT_TRANSFER_COEFFICIENTS&quot;).</param>
        /// <param name="refTemperature">refTemperature.</param>
        /// <param name="heatTransferCoefficient">heatTransferCoefficient.</param>
        /// <param name="surfaceAreaDensity">surfaceAreaDensity.</param>
        /// <param name="heatDistribution">Sampling method for the field temperature (T) in T - Tref. This indicates whether the temperature (T) is averaged on the complete heat exchanger or sampled at each position. (default to HeatDistributionEnum.LOCAL).</param>
        public HeatTransferCoefficients(string type = "HEAT_TRANSFER_COEFFICIENTS", DimensionalFunctionTemperature refTemperature = default(DimensionalFunctionTemperature), DimensionalFunctionThermalTransmittance heatTransferCoefficient = default(DimensionalFunctionThermalTransmittance), DimensionalAbsorptivity surfaceAreaDensity = default(DimensionalAbsorptivity), HeatDistributionEnum? heatDistribution = default(HeatDistributionEnum?))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for HeatTransferCoefficients and cannot be null");
            this.RefTemperature = refTemperature;
            this.HeatTransferCoefficient = heatTransferCoefficient;
            this.SurfaceAreaDensity = surfaceAreaDensity;
            this.HeatDistribution = heatDistribution;
        }
        
        /// <summary>
        /// Schema name: HeatTransferCoefficients
        /// </summary>
        /// <value>Schema name: HeatTransferCoefficients</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets RefTemperature
        /// </summary>
        [DataMember(Name="refTemperature", EmitDefaultValue=false)]
        public DimensionalFunctionTemperature RefTemperature { get; set; }

        /// <summary>
        /// Gets or Sets HeatTransferCoefficient
        /// </summary>
        [DataMember(Name="heatTransferCoefficient", EmitDefaultValue=false)]
        public DimensionalFunctionThermalTransmittance HeatTransferCoefficient { get; set; }

        /// <summary>
        /// Gets or Sets SurfaceAreaDensity
        /// </summary>
        [DataMember(Name="surfaceAreaDensity", EmitDefaultValue=false)]
        public DimensionalAbsorptivity SurfaceAreaDensity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HeatTransferCoefficients {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  RefTemperature: ").Append(RefTemperature).Append("\n");
            sb.Append("  HeatTransferCoefficient: ").Append(HeatTransferCoefficient).Append("\n");
            sb.Append("  SurfaceAreaDensity: ").Append(SurfaceAreaDensity).Append("\n");
            sb.Append("  HeatDistribution: ").Append(HeatDistribution).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HeatTransferCoefficients);
        }

        /// <summary>
        /// Returns true if HeatTransferCoefficients instances are equal
        /// </summary>
        /// <param name="input">Instance of HeatTransferCoefficients to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HeatTransferCoefficients input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.RefTemperature == input.RefTemperature ||
                    (this.RefTemperature != null &&
                    this.RefTemperature.Equals(input.RefTemperature))
                ) && 
                (
                    this.HeatTransferCoefficient == input.HeatTransferCoefficient ||
                    (this.HeatTransferCoefficient != null &&
                    this.HeatTransferCoefficient.Equals(input.HeatTransferCoefficient))
                ) && 
                (
                    this.SurfaceAreaDensity == input.SurfaceAreaDensity ||
                    (this.SurfaceAreaDensity != null &&
                    this.SurfaceAreaDensity.Equals(input.SurfaceAreaDensity))
                ) && 
                (
                    this.HeatDistribution == input.HeatDistribution ||
                    this.HeatDistribution.Equals(input.HeatDistribution)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.RefTemperature != null)
                    hashCode = hashCode * 59 + this.RefTemperature.GetHashCode();
                if (this.HeatTransferCoefficient != null)
                    hashCode = hashCode * 59 + this.HeatTransferCoefficient.GetHashCode();
                if (this.SurfaceAreaDensity != null)
                    hashCode = hashCode * 59 + this.SurfaceAreaDensity.GetHashCode();
                hashCode = hashCode * 59 + this.HeatDistribution.GetHashCode();
                return hashCode;
            }
        }

    }

}
