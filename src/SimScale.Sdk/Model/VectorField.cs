/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// VectorField
    /// </summary>
    [DataContract]
    public partial class VectorField : IEquatable<VectorField>
    {
        /// <summary>
        /// Gets or Sets DataType
        /// </summary>
        [DataMember(Name="dataType", EmitDefaultValue=false)]
        public DataType DataType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="VectorField" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VectorField() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VectorField" /> class.
        /// </summary>
        /// <param name="fieldName">fieldName (required).</param>
        /// <param name="dataType">dataType (required).</param>
        public VectorField(string fieldName = default(string), DataType dataType = default(DataType))
        {
            // to ensure "fieldName" is required (not null)
            this.FieldName = fieldName ?? throw new ArgumentNullException("fieldName is a required property for VectorField and cannot be null");
            this.DataType = dataType;
        }
        
        /// <summary>
        /// Gets or Sets FieldName
        /// </summary>
        [DataMember(Name="fieldName", EmitDefaultValue=false)]
        public string FieldName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VectorField {\n");
            sb.Append("  FieldName: ").Append(FieldName).Append("\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VectorField);
        }

        /// <summary>
        /// Returns true if VectorField instances are equal
        /// </summary>
        /// <param name="input">Instance of VectorField to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VectorField input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FieldName == input.FieldName ||
                    (this.FieldName != null &&
                    this.FieldName.Equals(input.FieldName))
                ) && 
                (
                    this.DataType == input.DataType ||
                    this.DataType.Equals(input.DataType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FieldName != null)
                    hashCode = hashCode * 59 + this.FieldName.GetHashCode();
                hashCode = hashCode * 59 + this.DataType.GetHashCode();
                return hashCode;
            }
        }

    }

}
