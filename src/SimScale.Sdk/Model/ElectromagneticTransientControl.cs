/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// ElectromagneticTransientControl
    /// </summary>
    [DataContract]
    public partial class ElectromagneticTransientControl : IEquatable<ElectromagneticTransientControl>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ElectromagneticTransientControl" /> class.
        /// </summary>
        /// <param name="endTime">endTime.</param>
        /// <param name="timeIncrement">timeIncrement.</param>
        public ElectromagneticTransientControl(DimensionalTime endTime = default(DimensionalTime), DimensionalTime timeIncrement = default(DimensionalTime))
        {
            this.EndTime = endTime;
            this.TimeIncrement = timeIncrement;
        }
        
        /// <summary>
        /// Gets or Sets EndTime
        /// </summary>
        [DataMember(Name="endTime", EmitDefaultValue=false)]
        public DimensionalTime EndTime { get; set; }

        /// <summary>
        /// Gets or Sets TimeIncrement
        /// </summary>
        [DataMember(Name="timeIncrement", EmitDefaultValue=false)]
        public DimensionalTime TimeIncrement { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ElectromagneticTransientControl {\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  TimeIncrement: ").Append(TimeIncrement).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ElectromagneticTransientControl);
        }

        /// <summary>
        /// Returns true if ElectromagneticTransientControl instances are equal
        /// </summary>
        /// <param name="input">Instance of ElectromagneticTransientControl to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ElectromagneticTransientControl input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.TimeIncrement == input.TimeIncrement ||
                    (this.TimeIncrement != null &&
                    this.TimeIncrement.Equals(input.TimeIncrement))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EndTime != null)
                    hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                if (this.TimeIncrement != null)
                    hashCode = hashCode * 59 + this.TimeIncrement.GetHashCode();
                return hashCode;
            }
        }

    }

}
