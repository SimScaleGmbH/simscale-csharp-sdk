/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// ElectromagneticResultControl
    /// </summary>
    [DataContract]
    public partial class ElectromagneticResultControl : IEquatable<ElectromagneticResultControl>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ElectromagneticResultControl" /> class.
        /// </summary>
        /// <param name="calculateInductances">Calculate the inductance matrix of the coils. (default to false).</param>
        /// <param name="calculateCapacitances">Calculate the capacitance matrix of the conductive bodies.&lt;strong&gt;&lt;span style&#x3D;&#39;color: red;&#39;&gt;Note that the field solution will be modified.&lt;/span&gt;&lt;/strong&gt; (default to false).</param>
        /// <param name="forcesAndTorques">forcesAndTorques.</param>
        /// <param name="probePoints">probePoints.</param>
        public ElectromagneticResultControl(bool? calculateInductances = default(bool?), bool? calculateCapacitances = default(bool?), List<ForceAndTorque> forcesAndTorques = default(List<ForceAndTorque>), List<ElectromagneticResultControlProbePoint> probePoints = default(List<ElectromagneticResultControlProbePoint>))
        {
            this.CalculateInductances = calculateInductances;
            this.CalculateCapacitances = calculateCapacitances;
            this.ForcesAndTorques = forcesAndTorques;
            this.ProbePoints = probePoints;
        }
        
        /// <summary>
        /// Calculate the inductance matrix of the coils.
        /// </summary>
        /// <value>Calculate the inductance matrix of the coils.</value>
        [DataMember(Name="calculateInductances", EmitDefaultValue=false)]
        public bool? CalculateInductances { get; set; }

        /// <summary>
        /// Calculate the capacitance matrix of the conductive bodies.&lt;strong&gt;&lt;span style&#x3D;&#39;color: red;&#39;&gt;Note that the field solution will be modified.&lt;/span&gt;&lt;/strong&gt;
        /// </summary>
        /// <value>Calculate the capacitance matrix of the conductive bodies.&lt;strong&gt;&lt;span style&#x3D;&#39;color: red;&#39;&gt;Note that the field solution will be modified.&lt;/span&gt;&lt;/strong&gt;</value>
        [DataMember(Name="calculateCapacitances", EmitDefaultValue=false)]
        public bool? CalculateCapacitances { get; set; }

        /// <summary>
        /// Gets or Sets ForcesAndTorques
        /// </summary>
        [DataMember(Name="forcesAndTorques", EmitDefaultValue=false)]
        public List<ForceAndTorque> ForcesAndTorques { get; set; }

        /// <summary>
        /// Gets or Sets ProbePoints
        /// </summary>
        [DataMember(Name="probePoints", EmitDefaultValue=false)]
        public List<ElectromagneticResultControlProbePoint> ProbePoints { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ElectromagneticResultControl {\n");
            sb.Append("  CalculateInductances: ").Append(CalculateInductances).Append("\n");
            sb.Append("  CalculateCapacitances: ").Append(CalculateCapacitances).Append("\n");
            sb.Append("  ForcesAndTorques: ").Append(ForcesAndTorques).Append("\n");
            sb.Append("  ProbePoints: ").Append(ProbePoints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ElectromagneticResultControl);
        }

        /// <summary>
        /// Returns true if ElectromagneticResultControl instances are equal
        /// </summary>
        /// <param name="input">Instance of ElectromagneticResultControl to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ElectromagneticResultControl input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CalculateInductances == input.CalculateInductances ||
                    (this.CalculateInductances != null &&
                    this.CalculateInductances.Equals(input.CalculateInductances))
                ) && 
                (
                    this.CalculateCapacitances == input.CalculateCapacitances ||
                    (this.CalculateCapacitances != null &&
                    this.CalculateCapacitances.Equals(input.CalculateCapacitances))
                ) && 
                (
                    this.ForcesAndTorques == input.ForcesAndTorques ||
                    this.ForcesAndTorques != null &&
                    input.ForcesAndTorques != null &&
                    this.ForcesAndTorques.SequenceEqual(input.ForcesAndTorques)
                ) && 
                (
                    this.ProbePoints == input.ProbePoints ||
                    this.ProbePoints != null &&
                    input.ProbePoints != null &&
                    this.ProbePoints.SequenceEqual(input.ProbePoints)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CalculateInductances != null)
                    hashCode = hashCode * 59 + this.CalculateInductances.GetHashCode();
                if (this.CalculateCapacitances != null)
                    hashCode = hashCode * 59 + this.CalculateCapacitances.GetHashCode();
                if (this.ForcesAndTorques != null)
                    hashCode = hashCode * 59 + this.ForcesAndTorques.GetHashCode();
                if (this.ProbePoints != null)
                    hashCode = hashCode * 59 + this.ProbePoints.GetHashCode();
                return hashCode;
            }
        }

    }

}
