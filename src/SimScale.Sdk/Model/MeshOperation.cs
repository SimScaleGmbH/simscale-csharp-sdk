/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// MeshOperation
    /// </summary>
    [DataContract]
    public partial class MeshOperation : IEquatable<MeshOperation>
    {
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public Status? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MeshOperation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MeshOperation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MeshOperation" /> class.
        /// </summary>
        /// <param name="name">The name of the mesh operation. (required).</param>
        /// <param name="version">version (required) (default to &quot;6.0&quot;).</param>
        /// <param name="geometryId">The geometry ID of the mesh operation. (required).</param>
        /// <param name="model">model (required).</param>
        /// <param name="computeResource">computeResource.</param>
        /// <param name="status">status.</param>
        public MeshOperation(string name = default(string), string version = "6.0", Guid? geometryId = default(Guid?), Algorithm model = default(Algorithm), MeshOperationComputeResource computeResource = default(MeshOperationComputeResource), Status? status = default(Status?))
        {
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for MeshOperation and cannot be null");
            // to ensure "version" is required (not null)
            this.Version = version ?? throw new ArgumentNullException("version is a required property for MeshOperation and cannot be null");
            // to ensure "geometryId" is required (not null)
            this.GeometryId = geometryId ?? throw new ArgumentNullException("geometryId is a required property for MeshOperation and cannot be null");
            // to ensure "model" is required (not null)
            this.Model = model ?? throw new ArgumentNullException("model is a required property for MeshOperation and cannot be null");
            this.ComputeResource = computeResource;
            this.Status = status;
        }
        
        /// <summary>
        /// The mesh operation ID.
        /// </summary>
        /// <value>The mesh operation ID.</value>
        [DataMember(Name="meshOperationId", EmitDefaultValue=false)]
        public Guid? MeshOperationId { get; private set; }

        /// <summary>
        /// The name of the mesh operation.
        /// </summary>
        /// <value>The name of the mesh operation.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// The geometry ID of the mesh operation.
        /// </summary>
        /// <value>The geometry ID of the mesh operation.</value>
        [DataMember(Name="geometryId", EmitDefaultValue=false)]
        public Guid? GeometryId { get; set; }

        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [DataMember(Name="model", EmitDefaultValue=false)]
        public Algorithm Model { get; set; }

        /// <summary>
        /// The time the mesh operation was created.
        /// </summary>
        /// <value>The time the mesh operation was created.</value>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public DateTimeOffset? CreatedAt { get; private set; }

        /// <summary>
        /// The time the mesh operation was last modified.
        /// </summary>
        /// <value>The time the mesh operation was last modified.</value>
        [DataMember(Name="modifiedAt", EmitDefaultValue=false)]
        public DateTimeOffset? ModifiedAt { get; private set; }

        /// <summary>
        /// The time the mesh operation was started.
        /// </summary>
        /// <value>The time the mesh operation was started.</value>
        [DataMember(Name="startedAt", EmitDefaultValue=false)]
        public DateTimeOffset? StartedAt { get; private set; }

        /// <summary>
        /// The time the mesh operation was finished.
        /// </summary>
        /// <value>The time the mesh operation was finished.</value>
        [DataMember(Name="finishedAt", EmitDefaultValue=false)]
        public DateTimeOffset? FinishedAt { get; private set; }

        /// <summary>
        /// Gets or Sets ComputeResource
        /// </summary>
        [DataMember(Name="computeResource", EmitDefaultValue=false)]
        public MeshOperationComputeResource ComputeResource { get; set; }

        /// <summary>
        /// The current progress while the mesh operation is in progress.
        /// </summary>
        /// <value>The current progress while the mesh operation is in progress.</value>
        [DataMember(Name="progress", EmitDefaultValue=false)]
        public decimal? Progress { get; private set; }

        /// <summary>
        /// The ID of the generated mesh.
        /// </summary>
        /// <value>The ID of the generated mesh.</value>
        [DataMember(Name="meshId", EmitDefaultValue=false)]
        public Guid? MeshId { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MeshOperation {\n");
            sb.Append("  MeshOperationId: ").Append(MeshOperationId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  GeometryId: ").Append(GeometryId).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ModifiedAt: ").Append(ModifiedAt).Append("\n");
            sb.Append("  StartedAt: ").Append(StartedAt).Append("\n");
            sb.Append("  FinishedAt: ").Append(FinishedAt).Append("\n");
            sb.Append("  ComputeResource: ").Append(ComputeResource).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Progress: ").Append(Progress).Append("\n");
            sb.Append("  MeshId: ").Append(MeshId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MeshOperation);
        }

        /// <summary>
        /// Returns true if MeshOperation instances are equal
        /// </summary>
        /// <param name="input">Instance of MeshOperation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MeshOperation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MeshOperationId == input.MeshOperationId ||
                    (this.MeshOperationId != null &&
                    this.MeshOperationId.Equals(input.MeshOperationId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.GeometryId == input.GeometryId ||
                    (this.GeometryId != null &&
                    this.GeometryId.Equals(input.GeometryId))
                ) && 
                (
                    this.Model == input.Model ||
                    (this.Model != null &&
                    this.Model.Equals(input.Model))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.ModifiedAt == input.ModifiedAt ||
                    (this.ModifiedAt != null &&
                    this.ModifiedAt.Equals(input.ModifiedAt))
                ) && 
                (
                    this.StartedAt == input.StartedAt ||
                    (this.StartedAt != null &&
                    this.StartedAt.Equals(input.StartedAt))
                ) && 
                (
                    this.FinishedAt == input.FinishedAt ||
                    (this.FinishedAt != null &&
                    this.FinishedAt.Equals(input.FinishedAt))
                ) && 
                (
                    this.ComputeResource == input.ComputeResource ||
                    (this.ComputeResource != null &&
                    this.ComputeResource.Equals(input.ComputeResource))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Progress == input.Progress ||
                    (this.Progress != null &&
                    this.Progress.Equals(input.Progress))
                ) && 
                (
                    this.MeshId == input.MeshId ||
                    (this.MeshId != null &&
                    this.MeshId.Equals(input.MeshId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MeshOperationId != null)
                    hashCode = hashCode * 59 + this.MeshOperationId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.GeometryId != null)
                    hashCode = hashCode * 59 + this.GeometryId.GetHashCode();
                if (this.Model != null)
                    hashCode = hashCode * 59 + this.Model.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.ModifiedAt != null)
                    hashCode = hashCode * 59 + this.ModifiedAt.GetHashCode();
                if (this.StartedAt != null)
                    hashCode = hashCode * 59 + this.StartedAt.GetHashCode();
                if (this.FinishedAt != null)
                    hashCode = hashCode * 59 + this.FinishedAt.GetHashCode();
                if (this.ComputeResource != null)
                    hashCode = hashCode * 59 + this.ComputeResource.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Progress != null)
                    hashCode = hashCode * 59 + this.Progress.GetHashCode();
                if (this.MeshId != null)
                    hashCode = hashCode * 59 + this.MeshId.GetHashCode();
                return hashCode;
            }
        }

    }

}
