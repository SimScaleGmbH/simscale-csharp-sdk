/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// ElectromagneticAnalysis
    /// </summary>
    [DataContract]
    public partial class ElectromagneticAnalysis : Analysis, IEquatable<ElectromagneticAnalysis>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ElectromagneticAnalysis" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ElectromagneticAnalysis() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ElectromagneticAnalysis" /> class.
        /// </summary>
        /// <param name="type">Schema name: ElectromagneticAnalysis (required) (default to &quot;ELECTROMAGNETIC_ANALYSIS&quot;).</param>
        /// <param name="model">model.</param>
        /// <param name="materials">materials.</param>
        /// <param name="initialConditions">initialConditions.</param>
        /// <param name="coils">coils.</param>
        /// <param name="boundaryConditions">boundaryConditions.</param>
        /// <param name="resultControl">resultControl.</param>
        /// <param name="numerics">numerics.</param>
        /// <param name="simulationControl">simulationControl.</param>
        public ElectromagneticAnalysis(string type = "ELECTROMAGNETIC_ANALYSIS", OneOfElectromagneticAnalysisModel model = default(OneOfElectromagneticAnalysisModel), List<ElectromagneticMaterial> materials = default(List<ElectromagneticMaterial>), ElectromagneticInitialConditions initialConditions = default(ElectromagneticInitialConditions), List<Coil> coils = default(List<Coil>), List<OneOfElectromagneticAnalysisBoundaryConditions> boundaryConditions = default(List<OneOfElectromagneticAnalysisBoundaryConditions>), ElectromagneticResultControl resultControl = default(ElectromagneticResultControl), ElectromagneticNumerics numerics = default(ElectromagneticNumerics), ElectromagneticSimulationControl simulationControl = default(ElectromagneticSimulationControl))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for ElectromagneticAnalysis and cannot be null");
            this.Model = model;
            this.Materials = materials;
            this.InitialConditions = initialConditions;
            this.Coils = coils;
            this.BoundaryConditions = boundaryConditions;
            this.ResultControl = resultControl;
            this.Numerics = numerics;
            this.SimulationControl = simulationControl;
        }
        
        /// <summary>
        /// Schema name: ElectromagneticAnalysis
        /// </summary>
        /// <value>Schema name: ElectromagneticAnalysis</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [DataMember(Name="model", EmitDefaultValue=false)]
        public OneOfElectromagneticAnalysisModel Model { get; set; }

        /// <summary>
        /// Gets or Sets Materials
        /// </summary>
        [DataMember(Name="materials", EmitDefaultValue=false)]
        public List<ElectromagneticMaterial> Materials { get; set; }

        /// <summary>
        /// Gets or Sets InitialConditions
        /// </summary>
        [DataMember(Name="initialConditions", EmitDefaultValue=false)]
        public ElectromagneticInitialConditions InitialConditions { get; set; }

        /// <summary>
        /// Gets or Sets Coils
        /// </summary>
        [DataMember(Name="coils", EmitDefaultValue=false)]
        public List<Coil> Coils { get; set; }

        /// <summary>
        /// Gets or Sets BoundaryConditions
        /// </summary>
        [DataMember(Name="boundaryConditions", EmitDefaultValue=false)]
        public List<OneOfElectromagneticAnalysisBoundaryConditions> BoundaryConditions { get; set; }

        /// <summary>
        /// Gets or Sets ResultControl
        /// </summary>
        [DataMember(Name="resultControl", EmitDefaultValue=false)]
        public ElectromagneticResultControl ResultControl { get; set; }

        /// <summary>
        /// Gets or Sets Numerics
        /// </summary>
        [DataMember(Name="numerics", EmitDefaultValue=false)]
        public ElectromagneticNumerics Numerics { get; set; }

        /// <summary>
        /// Gets or Sets SimulationControl
        /// </summary>
        [DataMember(Name="simulationControl", EmitDefaultValue=false)]
        public ElectromagneticSimulationControl SimulationControl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ElectromagneticAnalysis {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Materials: ").Append(Materials).Append("\n");
            sb.Append("  InitialConditions: ").Append(InitialConditions).Append("\n");
            sb.Append("  Coils: ").Append(Coils).Append("\n");
            sb.Append("  BoundaryConditions: ").Append(BoundaryConditions).Append("\n");
            sb.Append("  ResultControl: ").Append(ResultControl).Append("\n");
            sb.Append("  Numerics: ").Append(Numerics).Append("\n");
            sb.Append("  SimulationControl: ").Append(SimulationControl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ElectromagneticAnalysis);
        }

        /// <summary>
        /// Returns true if ElectromagneticAnalysis instances are equal
        /// </summary>
        /// <param name="input">Instance of ElectromagneticAnalysis to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ElectromagneticAnalysis input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Model == input.Model ||
                    (this.Model != null &&
                    this.Model.Equals(input.Model))
                ) && 
                (
                    this.Materials == input.Materials ||
                    this.Materials != null &&
                    input.Materials != null &&
                    this.Materials.SequenceEqual(input.Materials)
                ) && 
                (
                    this.InitialConditions == input.InitialConditions ||
                    (this.InitialConditions != null &&
                    this.InitialConditions.Equals(input.InitialConditions))
                ) && 
                (
                    this.Coils == input.Coils ||
                    this.Coils != null &&
                    input.Coils != null &&
                    this.Coils.SequenceEqual(input.Coils)
                ) && 
                (
                    this.BoundaryConditions == input.BoundaryConditions ||
                    this.BoundaryConditions != null &&
                    input.BoundaryConditions != null &&
                    this.BoundaryConditions.SequenceEqual(input.BoundaryConditions)
                ) && 
                (
                    this.ResultControl == input.ResultControl ||
                    (this.ResultControl != null &&
                    this.ResultControl.Equals(input.ResultControl))
                ) && 
                (
                    this.Numerics == input.Numerics ||
                    (this.Numerics != null &&
                    this.Numerics.Equals(input.Numerics))
                ) && 
                (
                    this.SimulationControl == input.SimulationControl ||
                    (this.SimulationControl != null &&
                    this.SimulationControl.Equals(input.SimulationControl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Model != null)
                    hashCode = hashCode * 59 + this.Model.GetHashCode();
                if (this.Materials != null)
                    hashCode = hashCode * 59 + this.Materials.GetHashCode();
                if (this.InitialConditions != null)
                    hashCode = hashCode * 59 + this.InitialConditions.GetHashCode();
                if (this.Coils != null)
                    hashCode = hashCode * 59 + this.Coils.GetHashCode();
                if (this.BoundaryConditions != null)
                    hashCode = hashCode * 59 + this.BoundaryConditions.GetHashCode();
                if (this.ResultControl != null)
                    hashCode = hashCode * 59 + this.ResultControl.GetHashCode();
                if (this.Numerics != null)
                    hashCode = hashCode * 59 + this.Numerics.GetHashCode();
                if (this.SimulationControl != null)
                    hashCode = hashCode * 59 + this.SimulationControl.GetHashCode();
                return hashCode;
            }
        }

    }

}
