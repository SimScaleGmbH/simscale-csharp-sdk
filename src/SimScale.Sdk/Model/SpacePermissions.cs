/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// Permissions that the current user has on this Space. Each flag corresponds to a fine-grained action that a user may take.
    /// </summary>
    [DataContract]
    public partial class SpacePermissions : IEquatable<SpacePermissions>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SpacePermissions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public SpacePermissions()
        {
        }
        
        /// <summary>
        /// Whether the current user can list the contents of the root of this Space.
        /// </summary>
        /// <value>Whether the current user can list the contents of the root of this Space.</value>
        [DataMember(Name="canListContentInRoot", EmitDefaultValue=false)]
        public bool? CanListContentInRoot { get; private set; }

        /// <summary>
        /// Whether the current user can create new content in the root of this Space.
        /// </summary>
        /// <value>Whether the current user can create new content in the root of this Space.</value>
        [DataMember(Name="canCreateContentInRoot", EmitDefaultValue=false)]
        public bool? CanCreateContentInRoot { get; private set; }

        /// <summary>
        /// Whether the current user can move content into the root folder of this Space.
        /// </summary>
        /// <value>Whether the current user can move content into the root folder of this Space.</value>
        [DataMember(Name="canMoveContentToRoot", EmitDefaultValue=false)]
        public bool? CanMoveContentToRoot { get; private set; }

        /// <summary>
        /// Whether the current user can move content out of the root folder of this Space.
        /// </summary>
        /// <value>Whether the current user can move content out of the root folder of this Space.</value>
        [DataMember(Name="canMoveContentOutOfRoot", EmitDefaultValue=false)]
        public bool? CanMoveContentOutOfRoot { get; private set; }

        /// <summary>
        /// Whether the current user can edit the metadata of this Space.
        /// </summary>
        /// <value>Whether the current user can edit the metadata of this Space.</value>
        [DataMember(Name="canEditSpaceMetadata", EmitDefaultValue=false)]
        public bool? CanEditSpaceMetadata { get; private set; }

        /// <summary>
        /// Whether the current user can edit the settings of this Space.
        /// </summary>
        /// <value>Whether the current user can edit the settings of this Space.</value>
        [DataMember(Name="canEditSpaceSettings", EmitDefaultValue=false)]
        public bool? CanEditSpaceSettings { get; private set; }

        /// <summary>
        /// Whether the current user can add or remove users to this Space.
        /// </summary>
        /// <value>Whether the current user can add or remove users to this Space.</value>
        [DataMember(Name="canEditSpacePermissions", EmitDefaultValue=false)]
        public bool? CanEditSpacePermissions { get; private set; }

        /// <summary>
        /// Whether the current user can delete this Space.
        /// </summary>
        /// <value>Whether the current user can delete this Space.</value>
        [DataMember(Name="canDeleteSpace", EmitDefaultValue=false)]
        public bool? CanDeleteSpace { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SpacePermissions {\n");
            sb.Append("  CanListContentInRoot: ").Append(CanListContentInRoot).Append("\n");
            sb.Append("  CanCreateContentInRoot: ").Append(CanCreateContentInRoot).Append("\n");
            sb.Append("  CanMoveContentToRoot: ").Append(CanMoveContentToRoot).Append("\n");
            sb.Append("  CanMoveContentOutOfRoot: ").Append(CanMoveContentOutOfRoot).Append("\n");
            sb.Append("  CanEditSpaceMetadata: ").Append(CanEditSpaceMetadata).Append("\n");
            sb.Append("  CanEditSpaceSettings: ").Append(CanEditSpaceSettings).Append("\n");
            sb.Append("  CanEditSpacePermissions: ").Append(CanEditSpacePermissions).Append("\n");
            sb.Append("  CanDeleteSpace: ").Append(CanDeleteSpace).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SpacePermissions);
        }

        /// <summary>
        /// Returns true if SpacePermissions instances are equal
        /// </summary>
        /// <param name="input">Instance of SpacePermissions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SpacePermissions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CanListContentInRoot == input.CanListContentInRoot ||
                    (this.CanListContentInRoot != null &&
                    this.CanListContentInRoot.Equals(input.CanListContentInRoot))
                ) && 
                (
                    this.CanCreateContentInRoot == input.CanCreateContentInRoot ||
                    (this.CanCreateContentInRoot != null &&
                    this.CanCreateContentInRoot.Equals(input.CanCreateContentInRoot))
                ) && 
                (
                    this.CanMoveContentToRoot == input.CanMoveContentToRoot ||
                    (this.CanMoveContentToRoot != null &&
                    this.CanMoveContentToRoot.Equals(input.CanMoveContentToRoot))
                ) && 
                (
                    this.CanMoveContentOutOfRoot == input.CanMoveContentOutOfRoot ||
                    (this.CanMoveContentOutOfRoot != null &&
                    this.CanMoveContentOutOfRoot.Equals(input.CanMoveContentOutOfRoot))
                ) && 
                (
                    this.CanEditSpaceMetadata == input.CanEditSpaceMetadata ||
                    (this.CanEditSpaceMetadata != null &&
                    this.CanEditSpaceMetadata.Equals(input.CanEditSpaceMetadata))
                ) && 
                (
                    this.CanEditSpaceSettings == input.CanEditSpaceSettings ||
                    (this.CanEditSpaceSettings != null &&
                    this.CanEditSpaceSettings.Equals(input.CanEditSpaceSettings))
                ) && 
                (
                    this.CanEditSpacePermissions == input.CanEditSpacePermissions ||
                    (this.CanEditSpacePermissions != null &&
                    this.CanEditSpacePermissions.Equals(input.CanEditSpacePermissions))
                ) && 
                (
                    this.CanDeleteSpace == input.CanDeleteSpace ||
                    (this.CanDeleteSpace != null &&
                    this.CanDeleteSpace.Equals(input.CanDeleteSpace))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CanListContentInRoot != null)
                    hashCode = hashCode * 59 + this.CanListContentInRoot.GetHashCode();
                if (this.CanCreateContentInRoot != null)
                    hashCode = hashCode * 59 + this.CanCreateContentInRoot.GetHashCode();
                if (this.CanMoveContentToRoot != null)
                    hashCode = hashCode * 59 + this.CanMoveContentToRoot.GetHashCode();
                if (this.CanMoveContentOutOfRoot != null)
                    hashCode = hashCode * 59 + this.CanMoveContentOutOfRoot.GetHashCode();
                if (this.CanEditSpaceMetadata != null)
                    hashCode = hashCode * 59 + this.CanEditSpaceMetadata.GetHashCode();
                if (this.CanEditSpaceSettings != null)
                    hashCode = hashCode * 59 + this.CanEditSpaceSettings.GetHashCode();
                if (this.CanEditSpacePermissions != null)
                    hashCode = hashCode * 59 + this.CanEditSpacePermissions.GetHashCode();
                if (this.CanDeleteSpace != null)
                    hashCode = hashCode * 59 + this.CanDeleteSpace.GetHashCode();
                return hashCode;
            }
        }

    }

}
