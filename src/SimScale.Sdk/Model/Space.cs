/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// Space
    /// </summary>
    [DataContract]
    public partial class Space : IEquatable<Space>
    {
        /// <summary>
        /// Defines SpaceType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SpaceTypeEnum
        {
            /// <summary>
            /// Enum PERSONAL for value: PERSONAL
            /// </summary>
            [EnumMember(Value = "PERSONAL")]
            PERSONAL = 1,

            /// <summary>
            /// Enum TEAM for value: TEAM
            /// </summary>
            [EnumMember(Value = "TEAM")]
            TEAM = 2

        }

        /// <summary>
        /// Gets or Sets SpaceType
        /// </summary>
        [DataMember(Name="spaceType", EmitDefaultValue=false)]
        public SpaceTypeEnum? SpaceType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Space" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="spaceSettings">spaceSettings.</param>
        public Space(string name = default(string), SpaceSettings spaceSettings = default(SpaceSettings))
        {
            this.Name = name;
            this.SpaceSettings = spaceSettings;
        }
        
        /// <summary>
        /// Gets or Sets SpaceId
        /// </summary>
        [DataMember(Name="spaceId", EmitDefaultValue=false)]
        public Guid? SpaceId { get; private set; }

        /// <summary>
        /// Only present for Team Spaces
        /// </summary>
        /// <value>Only present for Team Spaces</value>
        [DataMember(Name="organizationId", EmitDefaultValue=false)]
        public Guid? OrganizationId { get; private set; }

        /// <summary>
        /// Only present for Personal Spaces
        /// </summary>
        /// <value>Only present for Personal Spaces</value>
        [DataMember(Name="ownerUsername", EmitDefaultValue=false)]
        public string OwnerUsername { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public DateTimeOffset? CreatedAt { get; private set; }

        /// <summary>
        /// Gets or Sets LastModifiedAt
        /// </summary>
        [DataMember(Name="lastModifiedAt", EmitDefaultValue=false)]
        public DateTimeOffset? LastModifiedAt { get; private set; }

        /// <summary>
        /// Gets or Sets SpaceSettings
        /// </summary>
        [DataMember(Name="spaceSettings", EmitDefaultValue=false)]
        public SpaceSettings SpaceSettings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Space {\n");
            sb.Append("  SpaceId: ").Append(SpaceId).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  OwnerUsername: ").Append(OwnerUsername).Append("\n");
            sb.Append("  SpaceType: ").Append(SpaceType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  LastModifiedAt: ").Append(LastModifiedAt).Append("\n");
            sb.Append("  SpaceSettings: ").Append(SpaceSettings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Space);
        }

        /// <summary>
        /// Returns true if Space instances are equal
        /// </summary>
        /// <param name="input">Instance of Space to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Space input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SpaceId == input.SpaceId ||
                    (this.SpaceId != null &&
                    this.SpaceId.Equals(input.SpaceId))
                ) && 
                (
                    this.OrganizationId == input.OrganizationId ||
                    (this.OrganizationId != null &&
                    this.OrganizationId.Equals(input.OrganizationId))
                ) && 
                (
                    this.OwnerUsername == input.OwnerUsername ||
                    (this.OwnerUsername != null &&
                    this.OwnerUsername.Equals(input.OwnerUsername))
                ) && 
                (
                    this.SpaceType == input.SpaceType ||
                    this.SpaceType.Equals(input.SpaceType)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.LastModifiedAt == input.LastModifiedAt ||
                    (this.LastModifiedAt != null &&
                    this.LastModifiedAt.Equals(input.LastModifiedAt))
                ) && 
                (
                    this.SpaceSettings == input.SpaceSettings ||
                    (this.SpaceSettings != null &&
                    this.SpaceSettings.Equals(input.SpaceSettings))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SpaceId != null)
                    hashCode = hashCode * 59 + this.SpaceId.GetHashCode();
                if (this.OrganizationId != null)
                    hashCode = hashCode * 59 + this.OrganizationId.GetHashCode();
                if (this.OwnerUsername != null)
                    hashCode = hashCode * 59 + this.OwnerUsername.GetHashCode();
                hashCode = hashCode * 59 + this.SpaceType.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.LastModifiedAt != null)
                    hashCode = hashCode * 59 + this.LastModifiedAt.GetHashCode();
                if (this.SpaceSettings != null)
                    hashCode = hashCode * 59 + this.SpaceSettings.GetHashCode();
                return hashCode;
            }
        }

    }

}
