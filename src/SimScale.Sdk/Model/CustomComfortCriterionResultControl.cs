/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// CustomComfortCriterionResultControl
    /// </summary>
    [DataContract]
    public partial class CustomComfortCriterionResultControl : IEquatable<CustomComfortCriterionResultControl>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomComfortCriterionResultControl" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomComfortCriterionResultControl() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomComfortCriterionResultControl" /> class.
        /// </summary>
        /// <param name="type">Schema name: CustomComfortCriterionResultControl (required) (default to &quot;CUSTOM_COMFORT_CRITERION&quot;).</param>
        /// <param name="name">name.</param>
        /// <param name="comfortCriterionDefinitionV2">comfortCriterionDefinitionV2.</param>
        /// <param name="outOfBoundsName">It defines the name of the category that is reached if all defined criteria are exceeded. (default to &quot;Uncomfortable&quot;).</param>
        /// <param name="advancedSettings">advancedSettings.</param>
        public CustomComfortCriterionResultControl(string type = "CUSTOM_COMFORT_CRITERION", string name = default(string), ComfortCriterionDefinitionV2 comfortCriterionDefinitionV2 = default(ComfortCriterionDefinitionV2), string outOfBoundsName = default(string), AdvancedComfortCriterionSettings advancedSettings = default(AdvancedComfortCriterionSettings))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for CustomComfortCriterionResultControl and cannot be null");
            this.Name = name;
            this.ComfortCriterionDefinitionV2 = comfortCriterionDefinitionV2;
            this.OutOfBoundsName = outOfBoundsName;
            this.AdvancedSettings = advancedSettings;
        }
        
        /// <summary>
        /// Schema name: CustomComfortCriterionResultControl
        /// </summary>
        /// <value>Schema name: CustomComfortCriterionResultControl</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ComfortCriterionDefinitionV2
        /// </summary>
        [DataMember(Name="comfortCriterionDefinitionV2", EmitDefaultValue=false)]
        public ComfortCriterionDefinitionV2 ComfortCriterionDefinitionV2 { get; set; }

        /// <summary>
        /// It defines the name of the category that is reached if all defined criteria are exceeded.
        /// </summary>
        /// <value>It defines the name of the category that is reached if all defined criteria are exceeded.</value>
        [DataMember(Name="outOfBoundsName", EmitDefaultValue=false)]
        public string OutOfBoundsName { get; set; }

        /// <summary>
        /// Gets or Sets AdvancedSettings
        /// </summary>
        [DataMember(Name="advancedSettings", EmitDefaultValue=false)]
        public AdvancedComfortCriterionSettings AdvancedSettings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomComfortCriterionResultControl {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ComfortCriterionDefinitionV2: ").Append(ComfortCriterionDefinitionV2).Append("\n");
            sb.Append("  OutOfBoundsName: ").Append(OutOfBoundsName).Append("\n");
            sb.Append("  AdvancedSettings: ").Append(AdvancedSettings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomComfortCriterionResultControl);
        }

        /// <summary>
        /// Returns true if CustomComfortCriterionResultControl instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomComfortCriterionResultControl to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomComfortCriterionResultControl input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ComfortCriterionDefinitionV2 == input.ComfortCriterionDefinitionV2 ||
                    (this.ComfortCriterionDefinitionV2 != null &&
                    this.ComfortCriterionDefinitionV2.Equals(input.ComfortCriterionDefinitionV2))
                ) && 
                (
                    this.OutOfBoundsName == input.OutOfBoundsName ||
                    (this.OutOfBoundsName != null &&
                    this.OutOfBoundsName.Equals(input.OutOfBoundsName))
                ) && 
                (
                    this.AdvancedSettings == input.AdvancedSettings ||
                    (this.AdvancedSettings != null &&
                    this.AdvancedSettings.Equals(input.AdvancedSettings))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ComfortCriterionDefinitionV2 != null)
                    hashCode = hashCode * 59 + this.ComfortCriterionDefinitionV2.GetHashCode();
                if (this.OutOfBoundsName != null)
                    hashCode = hashCode * 59 + this.OutOfBoundsName.GetHashCode();
                if (this.AdvancedSettings != null)
                    hashCode = hashCode * 59 + this.AdvancedSettings.GetHashCode();
                return hashCode;
            }
        }

    }

}
