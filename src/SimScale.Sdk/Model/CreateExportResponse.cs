/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// CreateExportResponse
    /// </summary>
    [DataContract]
    public partial class CreateExportResponse : IEquatable<CreateExportResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateExportResponse" /> class.
        /// </summary>
        /// <param name="exportId">exportId.</param>
        /// <param name="resultId">The result to be exported.</param>
        /// <param name="format">The format to export to.</param>
        /// <param name="status">RUNNING - Export is still in progress DONE - Export is done and ready for download FAILED - Export failed, please retry or contact support EXPIRED - Export is expired, please trigger a new export for the result .</param>
        /// <param name="errorCode">errorCode.</param>
        public CreateExportResponse(Guid? exportId = default(Guid?), Guid? resultId = default(Guid?), string format = default(string), string status = default(string), string errorCode = default(string))
        {
            this.ExportId = exportId;
            this.ResultId = resultId;
            this.Format = format;
            this.Status = status;
            this.ErrorCode = errorCode;
        }
        
        /// <summary>
        /// Gets or Sets ExportId
        /// </summary>
        [DataMember(Name="exportId", EmitDefaultValue=false)]
        public Guid? ExportId { get; set; }

        /// <summary>
        /// The result to be exported
        /// </summary>
        /// <value>The result to be exported</value>
        [DataMember(Name="resultId", EmitDefaultValue=false)]
        public Guid? ResultId { get; set; }

        /// <summary>
        /// The format to export to
        /// </summary>
        /// <value>The format to export to</value>
        [DataMember(Name="format", EmitDefaultValue=false)]
        public string Format { get; set; }

        /// <summary>
        /// RUNNING - Export is still in progress DONE - Export is done and ready for download FAILED - Export failed, please retry or contact support EXPIRED - Export is expired, please trigger a new export for the result 
        /// </summary>
        /// <value>RUNNING - Export is still in progress DONE - Export is done and ready for download FAILED - Export failed, please retry or contact support EXPIRED - Export is expired, please trigger a new export for the result </value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets ErrorCode
        /// </summary>
        [DataMember(Name="errorCode", EmitDefaultValue=false)]
        public string ErrorCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateExportResponse {\n");
            sb.Append("  ExportId: ").Append(ExportId).Append("\n");
            sb.Append("  ResultId: ").Append(ResultId).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateExportResponse);
        }

        /// <summary>
        /// Returns true if CreateExportResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateExportResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateExportResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ExportId == input.ExportId ||
                    (this.ExportId != null &&
                    this.ExportId.Equals(input.ExportId))
                ) && 
                (
                    this.ResultId == input.ResultId ||
                    (this.ResultId != null &&
                    this.ResultId.Equals(input.ResultId))
                ) && 
                (
                    this.Format == input.Format ||
                    (this.Format != null &&
                    this.Format.Equals(input.Format))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.ErrorCode == input.ErrorCode ||
                    (this.ErrorCode != null &&
                    this.ErrorCode.Equals(input.ErrorCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExportId != null)
                    hashCode = hashCode * 59 + this.ExportId.GetHashCode();
                if (this.ResultId != null)
                    hashCode = hashCode * 59 + this.ResultId.GetHashCode();
                if (this.Format != null)
                    hashCode = hashCode * 59 + this.Format.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.ErrorCode != null)
                    hashCode = hashCode * 59 + this.ErrorCode.GetHashCode();
                return hashCode;
            }
        }

    }

}
