/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// AdvancedPinSettings
    /// </summary>
    [DataContract]
    public partial class AdvancedPinSettings : IEquatable<AdvancedPinSettings>
    {
        /// <summary>
        /// &lt;p&gt;Choose the deformation behavior of the assigned entity. If &lt;b&gt;deformable&lt;/b&gt; is selected, the entity is allowed to deform without applying additional stiffness, selecting &lt;b&gt;undeformable&lt;/b&gt; leads to a rigid entity. &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/boundary-conditions/remote-displacement/#deformation-behavior&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;Choose the deformation behavior of the assigned entity. If &lt;b&gt;deformable&lt;/b&gt; is selected, the entity is allowed to deform without applying additional stiffness, selecting &lt;b&gt;undeformable&lt;/b&gt; leads to a rigid entity. &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/boundary-conditions/remote-displacement/#deformation-behavior&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;&lt;/p&gt;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AssignedFaceBehaviorEnum
        {
            /// <summary>
            /// Enum DEFORMABLE for value: DEFORMABLE
            /// </summary>
            [EnumMember(Value = "DEFORMABLE")]
            DEFORMABLE = 1,

            /// <summary>
            /// Enum UNDEFORMABLE for value: UNDEFORMABLE
            /// </summary>
            [EnumMember(Value = "UNDEFORMABLE")]
            UNDEFORMABLE = 2

        }

        /// <summary>
        /// &lt;p&gt;Choose the deformation behavior of the assigned entity. If &lt;b&gt;deformable&lt;/b&gt; is selected, the entity is allowed to deform without applying additional stiffness, selecting &lt;b&gt;undeformable&lt;/b&gt; leads to a rigid entity. &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/boundary-conditions/remote-displacement/#deformation-behavior&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;Choose the deformation behavior of the assigned entity. If &lt;b&gt;deformable&lt;/b&gt; is selected, the entity is allowed to deform without applying additional stiffness, selecting &lt;b&gt;undeformable&lt;/b&gt; leads to a rigid entity. &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/boundary-conditions/remote-displacement/#deformation-behavior&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;&lt;/p&gt;</value>
        [DataMember(Name="assignedFaceBehavior", EmitDefaultValue=false)]
        public AssignedFaceBehaviorEnum? AssignedFaceBehavior { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AdvancedPinSettings" /> class.
        /// </summary>
        /// <param name="assignedFaceBehavior">&lt;p&gt;Choose the deformation behavior of the assigned entity. If &lt;b&gt;deformable&lt;/b&gt; is selected, the entity is allowed to deform without applying additional stiffness, selecting &lt;b&gt;undeformable&lt;/b&gt; leads to a rigid entity. &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/boundary-conditions/remote-displacement/#deformation-behavior&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;&lt;/p&gt; (default to AssignedFaceBehaviorEnum.DEFORMABLE).</param>
        public AdvancedPinSettings(AssignedFaceBehaviorEnum? assignedFaceBehavior = default(AssignedFaceBehaviorEnum?))
        {
            this.AssignedFaceBehavior = assignedFaceBehavior;
        }
        
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdvancedPinSettings {\n");
            sb.Append("  AssignedFaceBehavior: ").Append(AssignedFaceBehavior).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdvancedPinSettings);
        }

        /// <summary>
        /// Returns true if AdvancedPinSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of AdvancedPinSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdvancedPinSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AssignedFaceBehavior == input.AssignedFaceBehavior ||
                    this.AssignedFaceBehavior.Equals(input.AssignedFaceBehavior)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.AssignedFaceBehavior.GetHashCode();
                return hashCode;
            }
        }

    }

}
