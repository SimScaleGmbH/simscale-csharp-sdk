/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// SolarCalculator
    /// </summary>
    [DataContract]
    public partial class SolarCalculator : IEquatable<SolarCalculator>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SolarCalculator" /> class.
        /// </summary>
        /// <param name="sunDirection">sunDirection.</param>
        /// <param name="solarLoad">solarLoad.</param>
        public SolarCalculator(OneOfSolarCalculatorSunDirection sunDirection = default(OneOfSolarCalculatorSunDirection), OneOfSolarCalculatorSolarLoad solarLoad = default(OneOfSolarCalculatorSolarLoad))
        {
            this.SunDirection = sunDirection;
            this.SolarLoad = solarLoad;
        }
        
        /// <summary>
        /// Gets or Sets SunDirection
        /// </summary>
        [DataMember(Name="sunDirection", EmitDefaultValue=false)]
        public OneOfSolarCalculatorSunDirection SunDirection { get; set; }

        /// <summary>
        /// Gets or Sets SolarLoad
        /// </summary>
        [DataMember(Name="solarLoad", EmitDefaultValue=false)]
        public OneOfSolarCalculatorSolarLoad SolarLoad { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SolarCalculator {\n");
            sb.Append("  SunDirection: ").Append(SunDirection).Append("\n");
            sb.Append("  SolarLoad: ").Append(SolarLoad).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SolarCalculator);
        }

        /// <summary>
        /// Returns true if SolarCalculator instances are equal
        /// </summary>
        /// <param name="input">Instance of SolarCalculator to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SolarCalculator input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SunDirection == input.SunDirection ||
                    (this.SunDirection != null &&
                    this.SunDirection.Equals(input.SunDirection))
                ) && 
                (
                    this.SolarLoad == input.SolarLoad ||
                    (this.SolarLoad != null &&
                    this.SolarLoad.Equals(input.SolarLoad))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SunDirection != null)
                    hashCode = hashCode * 59 + this.SunDirection.GetHashCode();
                if (this.SolarLoad != null)
                    hashCode = hashCode * 59 + this.SolarLoad.GetHashCode();
                return hashCode;
            }
        }

    }

}
