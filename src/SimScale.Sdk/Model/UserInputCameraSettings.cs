/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// UserInputCameraSettings
    /// </summary>
    [DataContract]
    public partial class UserInputCameraSettings : OneOfCameraSettings, IEquatable<UserInputCameraSettings>
    {
        /// <summary>
        /// Gets or Sets ProjectionType
        /// </summary>
        [DataMember(Name="projectionType", EmitDefaultValue=false)]
        public ProjectionType ProjectionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserInputCameraSettings" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserInputCameraSettings() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserInputCameraSettings" /> class.
        /// </summary>
        /// <param name="settingType">settingType (required) (default to &quot;USER_INPUT&quot;).</param>
        /// <param name="projectionType">projectionType (required).</param>
        /// <param name="up">up (required).</param>
        /// <param name="direction">direction (required).</param>
        /// <param name="center">center (required).</param>
        /// <param name="frontPlaneFrustumHeight">required only for orthogonal projection type.</param>
        public UserInputCameraSettings(string settingType = "USER_INPUT", ProjectionType projectionType = default(ProjectionType), Vector3D up = default(Vector3D), Vector3D direction = default(Vector3D), Vector3D center = default(Vector3D), decimal? frontPlaneFrustumHeight = default(decimal?))
        {
            // to ensure "settingType" is required (not null)
            this.SettingType = settingType ?? throw new ArgumentNullException("settingType is a required property for UserInputCameraSettings and cannot be null");
            this.ProjectionType = projectionType;
            // to ensure "up" is required (not null)
            this.Up = up ?? throw new ArgumentNullException("up is a required property for UserInputCameraSettings and cannot be null");
            // to ensure "direction" is required (not null)
            this.Direction = direction ?? throw new ArgumentNullException("direction is a required property for UserInputCameraSettings and cannot be null");
            // to ensure "center" is required (not null)
            this.Center = center ?? throw new ArgumentNullException("center is a required property for UserInputCameraSettings and cannot be null");
            this.FrontPlaneFrustumHeight = frontPlaneFrustumHeight;
        }
        
        /// <summary>
        /// Gets or Sets SettingType
        /// </summary>
        [DataMember(Name="settingType", EmitDefaultValue=false)]
        public string SettingType { get; set; }

        /// <summary>
        /// Gets or Sets Up
        /// </summary>
        [DataMember(Name="up", EmitDefaultValue=false)]
        public Vector3D Up { get; set; }

        /// <summary>
        /// Gets or Sets Direction
        /// </summary>
        [DataMember(Name="direction", EmitDefaultValue=false)]
        public Vector3D Direction { get; set; }

        /// <summary>
        /// Gets or Sets Center
        /// </summary>
        [DataMember(Name="center", EmitDefaultValue=false)]
        public Vector3D Center { get; set; }

        /// <summary>
        /// required only for orthogonal projection type
        /// </summary>
        /// <value>required only for orthogonal projection type</value>
        [DataMember(Name="frontPlaneFrustumHeight", EmitDefaultValue=false)]
        public decimal? FrontPlaneFrustumHeight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserInputCameraSettings {\n");
            sb.Append("  SettingType: ").Append(SettingType).Append("\n");
            sb.Append("  ProjectionType: ").Append(ProjectionType).Append("\n");
            sb.Append("  Up: ").Append(Up).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  Center: ").Append(Center).Append("\n");
            sb.Append("  FrontPlaneFrustumHeight: ").Append(FrontPlaneFrustumHeight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserInputCameraSettings);
        }

        /// <summary>
        /// Returns true if UserInputCameraSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of UserInputCameraSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserInputCameraSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SettingType == input.SettingType ||
                    (this.SettingType != null &&
                    this.SettingType.Equals(input.SettingType))
                ) && 
                (
                    this.ProjectionType == input.ProjectionType ||
                    this.ProjectionType.Equals(input.ProjectionType)
                ) && 
                (
                    this.Up == input.Up ||
                    (this.Up != null &&
                    this.Up.Equals(input.Up))
                ) && 
                (
                    this.Direction == input.Direction ||
                    (this.Direction != null &&
                    this.Direction.Equals(input.Direction))
                ) && 
                (
                    this.Center == input.Center ||
                    (this.Center != null &&
                    this.Center.Equals(input.Center))
                ) && 
                (
                    this.FrontPlaneFrustumHeight == input.FrontPlaneFrustumHeight ||
                    (this.FrontPlaneFrustumHeight != null &&
                    this.FrontPlaneFrustumHeight.Equals(input.FrontPlaneFrustumHeight))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SettingType != null)
                    hashCode = hashCode * 59 + this.SettingType.GetHashCode();
                hashCode = hashCode * 59 + this.ProjectionType.GetHashCode();
                if (this.Up != null)
                    hashCode = hashCode * 59 + this.Up.GetHashCode();
                if (this.Direction != null)
                    hashCode = hashCode * 59 + this.Direction.GetHashCode();
                if (this.Center != null)
                    hashCode = hashCode * 59 + this.Center.GetHashCode();
                if (this.FrontPlaneFrustumHeight != null)
                    hashCode = hashCode * 59 + this.FrontPlaneFrustumHeight.GetHashCode();
                return hashCode;
            }
        }

    }

}
