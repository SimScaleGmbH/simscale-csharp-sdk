/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// EntityDescription
    /// </summary>
    [DataContract]
    public partial class EntityDescription : IEquatable<EntityDescription>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityDescription" /> class.
        /// </summary>
        /// <param name="name">The internal name of the entity..</param>
        /// <param name="_class">The topological entity class (body or face)..</param>
        /// <param name="originateFrom">originateFrom.</param>
        public EntityDescription(string name = default(string), string _class = default(string), List<OriginalEntityReference> originateFrom = default(List<OriginalEntityReference>))
        {
            this.Name = name;
            this.Class = _class;
            this.OriginateFrom = originateFrom;
        }
        
        /// <summary>
        /// The internal name of the entity.
        /// </summary>
        /// <value>The internal name of the entity.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The topological entity class (body or face).
        /// </summary>
        /// <value>The topological entity class (body or face).</value>
        [DataMember(Name="class", EmitDefaultValue=false)]
        public string Class { get; set; }

        /// <summary>
        /// Gets or Sets OriginateFrom
        /// </summary>
        [DataMember(Name="originateFrom", EmitDefaultValue=false)]
        public List<OriginalEntityReference> OriginateFrom { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EntityDescription {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Class: ").Append(Class).Append("\n");
            sb.Append("  OriginateFrom: ").Append(OriginateFrom).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EntityDescription);
        }

        /// <summary>
        /// Returns true if EntityDescription instances are equal
        /// </summary>
        /// <param name="input">Instance of EntityDescription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EntityDescription input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Class == input.Class ||
                    (this.Class != null &&
                    this.Class.Equals(input.Class))
                ) && 
                (
                    this.OriginateFrom == input.OriginateFrom ||
                    this.OriginateFrom != null &&
                    input.OriginateFrom != null &&
                    this.OriginateFrom.SequenceEqual(input.OriginateFrom)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Class != null)
                    hashCode = hashCode * 59 + this.Class.GetHashCode();
                if (this.OriginateFrom != null)
                    hashCode = hashCode * 59 + this.OriginateFrom.GetHashCode();
                return hashCode;
            }
        }

    }

}
