/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// ElementTechnology
    /// </summary>
    [DataContract]
    public partial class ElementTechnology : IEquatable<ElementTechnology>
    {
        /// <summary>
        /// Defines MechanicalElementType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MechanicalElementTypeEnum
        {
            /// <summary>
            /// Enum STANDARD for value: STANDARD
            /// </summary>
            [EnumMember(Value = "STANDARD")]
            STANDARD = 1,

            /// <summary>
            /// Enum REDUCEDINTEGRATION for value: REDUCED_INTEGRATION
            /// </summary>
            [EnumMember(Value = "REDUCED_INTEGRATION")]
            REDUCEDINTEGRATION = 2

        }

        /// <summary>
        /// Gets or Sets MechanicalElementType
        /// </summary>
        [DataMember(Name="mechanicalElementType", EmitDefaultValue=false)]
        public MechanicalElementTypeEnum? MechanicalElementType { get; set; }
        /// <summary>
        /// Defines ThermalElementType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ThermalElementTypeEnum
        {
            /// <summary>
            /// Enum STANDARD for value: STANDARD
            /// </summary>
            [EnumMember(Value = "STANDARD")]
            STANDARD = 1,

            /// <summary>
            /// Enum LUMPEDTHERMALMASS for value: LUMPED_THERMAL_MASS
            /// </summary>
            [EnumMember(Value = "LUMPED_THERMAL_MASS")]
            LUMPEDTHERMALMASS = 2

        }

        /// <summary>
        /// Gets or Sets ThermalElementType
        /// </summary>
        [DataMember(Name="thermalElementType", EmitDefaultValue=false)]
        public ThermalElementTypeEnum? ThermalElementType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ElementTechnology" /> class.
        /// </summary>
        /// <param name="mechanicalElementType">mechanicalElementType (default to MechanicalElementTypeEnum.STANDARD).</param>
        /// <param name="thermalElementType">thermalElementType (default to ThermalElementTypeEnum.STANDARD).</param>
        /// <param name="thermalMassOrderReduction">thermalMassOrderReduction (default to false).</param>
        /// <param name="definitions">definitions.</param>
        public ElementTechnology(MechanicalElementTypeEnum? mechanicalElementType = default(MechanicalElementTypeEnum?), ThermalElementTypeEnum? thermalElementType = default(ThermalElementTypeEnum?), bool? thermalMassOrderReduction = default(bool?), List<ElementTechnologyDefinition> definitions = default(List<ElementTechnologyDefinition>))
        {
            this.MechanicalElementType = mechanicalElementType;
            this.ThermalElementType = thermalElementType;
            this.ThermalMassOrderReduction = thermalMassOrderReduction;
            this.Definitions = definitions;
        }
        
        /// <summary>
        /// Gets or Sets ThermalMassOrderReduction
        /// </summary>
        [DataMember(Name="thermalMassOrderReduction", EmitDefaultValue=false)]
        public bool? ThermalMassOrderReduction { get; set; }

        /// <summary>
        /// Gets or Sets Definitions
        /// </summary>
        [DataMember(Name="definitions", EmitDefaultValue=false)]
        public List<ElementTechnologyDefinition> Definitions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ElementTechnology {\n");
            sb.Append("  MechanicalElementType: ").Append(MechanicalElementType).Append("\n");
            sb.Append("  ThermalElementType: ").Append(ThermalElementType).Append("\n");
            sb.Append("  ThermalMassOrderReduction: ").Append(ThermalMassOrderReduction).Append("\n");
            sb.Append("  Definitions: ").Append(Definitions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ElementTechnology);
        }

        /// <summary>
        /// Returns true if ElementTechnology instances are equal
        /// </summary>
        /// <param name="input">Instance of ElementTechnology to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ElementTechnology input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MechanicalElementType == input.MechanicalElementType ||
                    this.MechanicalElementType.Equals(input.MechanicalElementType)
                ) && 
                (
                    this.ThermalElementType == input.ThermalElementType ||
                    this.ThermalElementType.Equals(input.ThermalElementType)
                ) && 
                (
                    this.ThermalMassOrderReduction == input.ThermalMassOrderReduction ||
                    (this.ThermalMassOrderReduction != null &&
                    this.ThermalMassOrderReduction.Equals(input.ThermalMassOrderReduction))
                ) && 
                (
                    this.Definitions == input.Definitions ||
                    this.Definitions != null &&
                    input.Definitions != null &&
                    this.Definitions.SequenceEqual(input.Definitions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.MechanicalElementType.GetHashCode();
                hashCode = hashCode * 59 + this.ThermalElementType.GetHashCode();
                if (this.ThermalMassOrderReduction != null)
                    hashCode = hashCode * 59 + this.ThermalMassOrderReduction.GetHashCode();
                if (this.Definitions != null)
                    hashCode = hashCode * 59 + this.Definitions.GetHashCode();
                return hashCode;
            }
        }

    }

}
