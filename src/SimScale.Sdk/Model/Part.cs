/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// Part
    /// </summary>
    [DataContract]
    public partial class Part : IEquatable<Part>
    {
        /// <summary>
        /// Gets or Sets RenderMode
        /// </summary>
        [DataMember(Name="renderMode", EmitDefaultValue=false)]
        public RenderMode RenderMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Part" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Part() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Part" /> class.
        /// </summary>
        /// <param name="partIdentifier">The identifier of the part in the result. (required).</param>
        /// <param name="opacity">opacity (required) (default to 1.0D).</param>
        /// <param name="renderMode">renderMode (required).</param>
        /// <param name="solidColor">solidColor.</param>
        public Part(string partIdentifier = default(string), double? opacity = 1.0D, RenderMode renderMode = default(RenderMode), Color solidColor = default(Color))
        {
            // to ensure "partIdentifier" is required (not null)
            this.PartIdentifier = partIdentifier ?? throw new ArgumentNullException("partIdentifier is a required property for Part and cannot be null");
            // to ensure "opacity" is required (not null)
            this.Opacity = opacity ?? throw new ArgumentNullException("opacity is a required property for Part and cannot be null");
            this.RenderMode = renderMode;
            this.SolidColor = solidColor;
        }
        
        /// <summary>
        /// The identifier of the part in the result.
        /// </summary>
        /// <value>The identifier of the part in the result.</value>
        [DataMember(Name="partIdentifier", EmitDefaultValue=false)]
        public string PartIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets Opacity
        /// </summary>
        [DataMember(Name="opacity", EmitDefaultValue=false)]
        public double? Opacity { get; set; }

        /// <summary>
        /// Gets or Sets SolidColor
        /// </summary>
        [DataMember(Name="solidColor", EmitDefaultValue=false)]
        public Color SolidColor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Part {\n");
            sb.Append("  PartIdentifier: ").Append(PartIdentifier).Append("\n");
            sb.Append("  Opacity: ").Append(Opacity).Append("\n");
            sb.Append("  RenderMode: ").Append(RenderMode).Append("\n");
            sb.Append("  SolidColor: ").Append(SolidColor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Part);
        }

        /// <summary>
        /// Returns true if Part instances are equal
        /// </summary>
        /// <param name="input">Instance of Part to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Part input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PartIdentifier == input.PartIdentifier ||
                    (this.PartIdentifier != null &&
                    this.PartIdentifier.Equals(input.PartIdentifier))
                ) && 
                (
                    this.Opacity == input.Opacity ||
                    (this.Opacity != null &&
                    this.Opacity.Equals(input.Opacity))
                ) && 
                (
                    this.RenderMode == input.RenderMode ||
                    this.RenderMode.Equals(input.RenderMode)
                ) && 
                (
                    this.SolidColor == input.SolidColor ||
                    (this.SolidColor != null &&
                    this.SolidColor.Equals(input.SolidColor))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PartIdentifier != null)
                    hashCode = hashCode * 59 + this.PartIdentifier.GetHashCode();
                if (this.Opacity != null)
                    hashCode = hashCode * 59 + this.Opacity.GetHashCode();
                hashCode = hashCode * 59 + this.RenderMode.GetHashCode();
                if (this.SolidColor != null)
                    hashCode = hashCode * 59 + this.SolidColor.GetHashCode();
                return hashCode;
            }
        }

    }

}
