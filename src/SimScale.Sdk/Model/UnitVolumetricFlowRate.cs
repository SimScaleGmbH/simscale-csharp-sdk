/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// UnitVolumetricFlowRate
    /// </summary>
    [DataContract]
    public partial class UnitVolumetricFlowRate : IEquatable<UnitVolumetricFlowRate>
    {
        /// <summary>
        /// Defines Unit
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UnitEnum
        {
            /// <summary>
            /// Enum MS for value: m³/s
            /// </summary>
            [EnumMember(Value = "m³/s")]
            MS = 1,

            /// <summary>
            /// Enum InS for value: in³/s
            /// </summary>
            [EnumMember(Value = "in³/s")]
            InS = 2,

            /// <summary>
            /// Enum MMin for value: m³/min
            /// </summary>
            [EnumMember(Value = "m³/min")]
            MMin = 3,

            /// <summary>
            /// Enum MH for value: m³/h
            /// </summary>
            [EnumMember(Value = "m³/h")]
            MH = 4,

            /// <summary>
            /// Enum MmS for value: mm³/s
            /// </summary>
            [EnumMember(Value = "mm³/s")]
            MmS = 5,

            /// <summary>
            /// Enum MmMin for value: mm³/min
            /// </summary>
            [EnumMember(Value = "mm³/min")]
            MmMin = 6,

            /// <summary>
            /// Enum MmH for value: mm³/h
            /// </summary>
            [EnumMember(Value = "mm³/h")]
            MmH = 7,

            /// <summary>
            /// Enum CmS for value: cm³/s
            /// </summary>
            [EnumMember(Value = "cm³/s")]
            CmS = 8,

            /// <summary>
            /// Enum CmMin for value: cm³/min
            /// </summary>
            [EnumMember(Value = "cm³/min")]
            CmMin = 9,

            /// <summary>
            /// Enum CmH for value: cm³/h
            /// </summary>
            [EnumMember(Value = "cm³/h")]
            CmH = 10,

            /// <summary>
            /// Enum LS for value: l/s
            /// </summary>
            [EnumMember(Value = "l/s")]
            LS = 11,

            /// <summary>
            /// Enum LMin for value: l/min
            /// </summary>
            [EnumMember(Value = "l/min")]
            LMin = 12,

            /// <summary>
            /// Enum LH for value: l/h
            /// </summary>
            [EnumMember(Value = "l/h")]
            LH = 13,

            /// <summary>
            /// Enum InMin for value: in³/min
            /// </summary>
            [EnumMember(Value = "in³/min")]
            InMin = 14,

            /// <summary>
            /// Enum InH for value: in³/h
            /// </summary>
            [EnumMember(Value = "in³/h")]
            InH = 15,

            /// <summary>
            /// Enum FtS for value: ft³/s
            /// </summary>
            [EnumMember(Value = "ft³/s")]
            FtS = 16,

            /// <summary>
            /// Enum FtMin for value: ft³/min
            /// </summary>
            [EnumMember(Value = "ft³/min")]
            FtMin = 17,

            /// <summary>
            /// Enum FtH for value: ft³/h
            /// </summary>
            [EnumMember(Value = "ft³/h")]
            FtH = 18,

            /// <summary>
            /// Enum GalMin for value: gal/min
            /// </summary>
            [EnumMember(Value = "gal/min")]
            GalMin = 19,

            /// <summary>
            /// Enum GalH for value: gal/h
            /// </summary>
            [EnumMember(Value = "gal/h")]
            GalH = 20,

            /// <summary>
            /// Enum GalS for value: gal/s
            /// </summary>
            [EnumMember(Value = "gal/s")]
            GalS = 21

        }

        /// <summary>
        /// Gets or Sets Unit
        /// </summary>
        [DataMember(Name="unit", EmitDefaultValue=false)]
        public UnitEnum? Unit { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UnitVolumetricFlowRate" /> class.
        /// </summary>
        /// <param name="value">value.</param>
        /// <param name="unit">unit.</param>
        public UnitVolumetricFlowRate(decimal? value = default(decimal?), UnitEnum? unit = default(UnitEnum?))
        {
            this.Value = value;
            this.Unit = unit;
        }
        
        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public decimal? Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UnitVolumetricFlowRate {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UnitVolumetricFlowRate);
        }

        /// <summary>
        /// Returns true if UnitVolumetricFlowRate instances are equal
        /// </summary>
        /// <param name="input">Instance of UnitVolumetricFlowRate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UnitVolumetricFlowRate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Unit == input.Unit ||
                    this.Unit.Equals(input.Unit)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                hashCode = hashCode * 59 + this.Unit.GetHashCode();
                return hashCode;
            }
        }

    }

}
