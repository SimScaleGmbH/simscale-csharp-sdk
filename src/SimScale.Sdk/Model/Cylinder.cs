/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// Cylinder
    /// </summary>
    [DataContract]
    public partial class Cylinder : GeometryPrimitive, IEquatable<Cylinder>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Cylinder" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Cylinder() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Cylinder" /> class.
        /// </summary>
        /// <param name="type">Schema name: Cylinder (required) (default to &quot;CYLINDER&quot;).</param>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="reference">reference.</param>
        /// <param name="axis">axis.</param>
        /// <param name="radius">radius.</param>
        public Cylinder(string type = "CYLINDER", Guid? id = default(Guid?), string name = default(string), DimensionalVectorLength reference = default(DimensionalVectorLength), DimensionalVectorLength axis = default(DimensionalVectorLength), DimensionalLength radius = default(DimensionalLength))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for Cylinder and cannot be null");
            this.Id = id;
            this.Name = name;
            this.Reference = reference;
            this.Axis = axis;
            this.Radius = radius;
        }
        
        /// <summary>
        /// Schema name: Cylinder
        /// </summary>
        /// <value>Schema name: Cylinder</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name="reference", EmitDefaultValue=false)]
        public DimensionalVectorLength Reference { get; set; }

        /// <summary>
        /// Gets or Sets Axis
        /// </summary>
        [DataMember(Name="axis", EmitDefaultValue=false)]
        public DimensionalVectorLength Axis { get; set; }

        /// <summary>
        /// Gets or Sets Radius
        /// </summary>
        [DataMember(Name="radius", EmitDefaultValue=false)]
        public DimensionalLength Radius { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Cylinder {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Axis: ").Append(Axis).Append("\n");
            sb.Append("  Radius: ").Append(Radius).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Cylinder);
        }

        /// <summary>
        /// Returns true if Cylinder instances are equal
        /// </summary>
        /// <param name="input">Instance of Cylinder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Cylinder input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.Axis == input.Axis ||
                    (this.Axis != null &&
                    this.Axis.Equals(input.Axis))
                ) && 
                (
                    this.Radius == input.Radius ||
                    (this.Radius != null &&
                    this.Radius.Equals(input.Radius))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Reference != null)
                    hashCode = hashCode * 59 + this.Reference.GetHashCode();
                if (this.Axis != null)
                    hashCode = hashCode * 59 + this.Axis.GetHashCode();
                if (this.Radius != null)
                    hashCode = hashCode * 59 + this.Radius.GetHashCode();
                return hashCode;
            }
        }

    }

}
