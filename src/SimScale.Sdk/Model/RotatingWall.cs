/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// RotatingWall
    /// </summary>
    [DataContract]
    public partial class RotatingWall : IEquatable<RotatingWall>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RotatingWall" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="origin">origin.</param>
        /// <param name="axis">axis.</param>
        /// <param name="rotationalVelocity">rotationalVelocity.</param>
        /// <param name="topologicalReference">topologicalReference.</param>
        public RotatingWall(string name = default(string), DimensionalVectorLength origin = default(DimensionalVectorLength), DimensionalVectorLength axis = default(DimensionalVectorLength), DimensionalRotationSpeed rotationalVelocity = default(DimensionalRotationSpeed), TopologicalReference topologicalReference = default(TopologicalReference))
        {
            this.Name = name;
            this.Origin = origin;
            this.Axis = axis;
            this.RotationalVelocity = rotationalVelocity;
            this.TopologicalReference = topologicalReference;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Origin
        /// </summary>
        [DataMember(Name="origin", EmitDefaultValue=false)]
        public DimensionalVectorLength Origin { get; set; }

        /// <summary>
        /// Gets or Sets Axis
        /// </summary>
        [DataMember(Name="axis", EmitDefaultValue=false)]
        public DimensionalVectorLength Axis { get; set; }

        /// <summary>
        /// Gets or Sets RotationalVelocity
        /// </summary>
        [DataMember(Name="rotationalVelocity", EmitDefaultValue=false)]
        public DimensionalRotationSpeed RotationalVelocity { get; set; }

        /// <summary>
        /// Gets or Sets TopologicalReference
        /// </summary>
        [DataMember(Name="topologicalReference", EmitDefaultValue=false)]
        public TopologicalReference TopologicalReference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RotatingWall {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  Axis: ").Append(Axis).Append("\n");
            sb.Append("  RotationalVelocity: ").Append(RotationalVelocity).Append("\n");
            sb.Append("  TopologicalReference: ").Append(TopologicalReference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RotatingWall);
        }

        /// <summary>
        /// Returns true if RotatingWall instances are equal
        /// </summary>
        /// <param name="input">Instance of RotatingWall to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RotatingWall input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Origin == input.Origin ||
                    (this.Origin != null &&
                    this.Origin.Equals(input.Origin))
                ) && 
                (
                    this.Axis == input.Axis ||
                    (this.Axis != null &&
                    this.Axis.Equals(input.Axis))
                ) && 
                (
                    this.RotationalVelocity == input.RotationalVelocity ||
                    (this.RotationalVelocity != null &&
                    this.RotationalVelocity.Equals(input.RotationalVelocity))
                ) && 
                (
                    this.TopologicalReference == input.TopologicalReference ||
                    (this.TopologicalReference != null &&
                    this.TopologicalReference.Equals(input.TopologicalReference))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Origin != null)
                    hashCode = hashCode * 59 + this.Origin.GetHashCode();
                if (this.Axis != null)
                    hashCode = hashCode * 59 + this.Axis.GetHashCode();
                if (this.RotationalVelocity != null)
                    hashCode = hashCode * 59 + this.RotationalVelocity.GetHashCode();
                if (this.TopologicalReference != null)
                    hashCode = hashCode * 59 + this.TopologicalReference.GetHashCode();
                return hashCode;
            }
        }

    }

}
