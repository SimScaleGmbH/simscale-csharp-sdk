/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// MrtSolarParameters
    /// </summary>
    [DataContract]
    public partial class MrtSolarParameters : IEquatable<MrtSolarParameters>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MrtSolarParameters" /> class.
        /// </summary>
        /// <param name="fractionBodySurface">fractionBodySurface.</param>
        /// <param name="projectedAreaFactor">The projected area of a standard person exposed to direct beam sunlight in the range [0, 1]. This projection depends on the time of day and year usually in the range [0, 0.7]. This parameter is not a necessary input if the solar load is computed from time and place since it can be computed. (default to 0.7M).</param>
        /// <param name="shortWaveAbsorptivity">The radiation wavelength of a source depends on its temperature. Since the sun is much hotter than surfaces in a typical room, the amount of sun heat absorbed by a person is different than the amount it is able to emit back to its surroundings. Typical values are: &lt;br&gt;&lt;li&gt;&lt;b&gt; 0.2 &lt;/b&gt;: White clothing. &lt;br&gt;&lt;li&gt;&lt;b&gt; 0.57 &lt;/b&gt;: Khaki clothing &lt;br&gt;&lt;li&gt;&lt;b&gt; 0.57 &lt;/b&gt;: White skin &lt;br&gt;&lt;li&gt;&lt;b&gt; 0.65 &lt;/b&gt;: Brown skin &lt;br&gt;&lt;li&gt;&lt;b&gt; 0.84 &lt;/b&gt;: Black skin. &lt;br&gt;&lt;li&gt;&lt;b&gt; 0.88 &lt;/b&gt;: Black clothing. (default to 0.67M).</param>
        public MrtSolarParameters(OneOfMrtSolarParametersFractionBodySurface fractionBodySurface = default(OneOfMrtSolarParametersFractionBodySurface), decimal? projectedAreaFactor = default(decimal?), decimal? shortWaveAbsorptivity = default(decimal?))
        {
            this.FractionBodySurface = fractionBodySurface;
            this.ProjectedAreaFactor = projectedAreaFactor;
            this.ShortWaveAbsorptivity = shortWaveAbsorptivity;
        }
        
        /// <summary>
        /// Gets or Sets FractionBodySurface
        /// </summary>
        [DataMember(Name="fractionBodySurface", EmitDefaultValue=false)]
        public OneOfMrtSolarParametersFractionBodySurface FractionBodySurface { get; set; }

        /// <summary>
        /// The projected area of a standard person exposed to direct beam sunlight in the range [0, 1]. This projection depends on the time of day and year usually in the range [0, 0.7]. This parameter is not a necessary input if the solar load is computed from time and place since it can be computed.
        /// </summary>
        /// <value>The projected area of a standard person exposed to direct beam sunlight in the range [0, 1]. This projection depends on the time of day and year usually in the range [0, 0.7]. This parameter is not a necessary input if the solar load is computed from time and place since it can be computed.</value>
        [DataMember(Name="projectedAreaFactor", EmitDefaultValue=false)]
        public decimal? ProjectedAreaFactor { get; set; }

        /// <summary>
        /// The radiation wavelength of a source depends on its temperature. Since the sun is much hotter than surfaces in a typical room, the amount of sun heat absorbed by a person is different than the amount it is able to emit back to its surroundings. Typical values are: &lt;br&gt;&lt;li&gt;&lt;b&gt; 0.2 &lt;/b&gt;: White clothing. &lt;br&gt;&lt;li&gt;&lt;b&gt; 0.57 &lt;/b&gt;: Khaki clothing &lt;br&gt;&lt;li&gt;&lt;b&gt; 0.57 &lt;/b&gt;: White skin &lt;br&gt;&lt;li&gt;&lt;b&gt; 0.65 &lt;/b&gt;: Brown skin &lt;br&gt;&lt;li&gt;&lt;b&gt; 0.84 &lt;/b&gt;: Black skin. &lt;br&gt;&lt;li&gt;&lt;b&gt; 0.88 &lt;/b&gt;: Black clothing.
        /// </summary>
        /// <value>The radiation wavelength of a source depends on its temperature. Since the sun is much hotter than surfaces in a typical room, the amount of sun heat absorbed by a person is different than the amount it is able to emit back to its surroundings. Typical values are: &lt;br&gt;&lt;li&gt;&lt;b&gt; 0.2 &lt;/b&gt;: White clothing. &lt;br&gt;&lt;li&gt;&lt;b&gt; 0.57 &lt;/b&gt;: Khaki clothing &lt;br&gt;&lt;li&gt;&lt;b&gt; 0.57 &lt;/b&gt;: White skin &lt;br&gt;&lt;li&gt;&lt;b&gt; 0.65 &lt;/b&gt;: Brown skin &lt;br&gt;&lt;li&gt;&lt;b&gt; 0.84 &lt;/b&gt;: Black skin. &lt;br&gt;&lt;li&gt;&lt;b&gt; 0.88 &lt;/b&gt;: Black clothing.</value>
        [DataMember(Name="shortWaveAbsorptivity", EmitDefaultValue=false)]
        public decimal? ShortWaveAbsorptivity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MrtSolarParameters {\n");
            sb.Append("  FractionBodySurface: ").Append(FractionBodySurface).Append("\n");
            sb.Append("  ProjectedAreaFactor: ").Append(ProjectedAreaFactor).Append("\n");
            sb.Append("  ShortWaveAbsorptivity: ").Append(ShortWaveAbsorptivity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MrtSolarParameters);
        }

        /// <summary>
        /// Returns true if MrtSolarParameters instances are equal
        /// </summary>
        /// <param name="input">Instance of MrtSolarParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MrtSolarParameters input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FractionBodySurface == input.FractionBodySurface ||
                    (this.FractionBodySurface != null &&
                    this.FractionBodySurface.Equals(input.FractionBodySurface))
                ) && 
                (
                    this.ProjectedAreaFactor == input.ProjectedAreaFactor ||
                    (this.ProjectedAreaFactor != null &&
                    this.ProjectedAreaFactor.Equals(input.ProjectedAreaFactor))
                ) && 
                (
                    this.ShortWaveAbsorptivity == input.ShortWaveAbsorptivity ||
                    (this.ShortWaveAbsorptivity != null &&
                    this.ShortWaveAbsorptivity.Equals(input.ShortWaveAbsorptivity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FractionBodySurface != null)
                    hashCode = hashCode * 59 + this.FractionBodySurface.GetHashCode();
                if (this.ProjectedAreaFactor != null)
                    hashCode = hashCode * 59 + this.ProjectedAreaFactor.GetHashCode();
                if (this.ShortWaveAbsorptivity != null)
                    hashCode = hashCode * 59 + this.ShortWaveAbsorptivity.GetHashCode();
                return hashCode;
            }
        }

    }

}
