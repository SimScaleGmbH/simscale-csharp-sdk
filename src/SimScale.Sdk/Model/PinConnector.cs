/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// PinConnector
    /// </summary>
    [DataContract]
    public partial class PinConnector : IEquatable<PinConnector>
    {
        /// <summary>
        /// Defines Interaction
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InteractionEnum
        {
            /// <summary>
            /// Enum BODY for value: BODY_TO_BODY
            /// </summary>
            [EnumMember(Value = "BODY_TO_BODY")]
            BODY = 1,

            /// <summary>
            /// Enum GROUND for value: BODY_TO_GROUND
            /// </summary>
            [EnumMember(Value = "BODY_TO_GROUND")]
            GROUND = 2

        }

        /// <summary>
        /// Gets or Sets Interaction
        /// </summary>
        [DataMember(Name="interaction", EmitDefaultValue=false)]
        public InteractionEnum? Interaction { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PinConnector" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PinConnector() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PinConnector" /> class.
        /// </summary>
        /// <param name="type">Schema name: PinConnector (required) (default to &quot;PIN_CONNECTOR&quot;).</param>
        /// <param name="name">name.</param>
        /// <param name="interaction">interaction (default to InteractionEnum.BODY).</param>
        /// <param name="kinematicBehavior">kinematicBehavior.</param>
        /// <param name="advancedPinSettings">advancedPinSettings.</param>
        /// <param name="topologicalReference">topologicalReference.</param>
        public PinConnector(string type = "PIN_CONNECTOR", string name = default(string), InteractionEnum? interaction = default(InteractionEnum?), PinKinematicBehavior kinematicBehavior = default(PinKinematicBehavior), AdvancedPinSettings advancedPinSettings = default(AdvancedPinSettings), TopologicalReference topologicalReference = default(TopologicalReference))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for PinConnector and cannot be null");
            this.Name = name;
            this.Interaction = interaction;
            this.KinematicBehavior = kinematicBehavior;
            this.AdvancedPinSettings = advancedPinSettings;
            this.TopologicalReference = topologicalReference;
        }
        
        /// <summary>
        /// Schema name: PinConnector
        /// </summary>
        /// <value>Schema name: PinConnector</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets KinematicBehavior
        /// </summary>
        [DataMember(Name="kinematicBehavior", EmitDefaultValue=false)]
        public PinKinematicBehavior KinematicBehavior { get; set; }

        /// <summary>
        /// Gets or Sets AdvancedPinSettings
        /// </summary>
        [DataMember(Name="advancedPinSettings", EmitDefaultValue=false)]
        public AdvancedPinSettings AdvancedPinSettings { get; set; }

        /// <summary>
        /// Gets or Sets TopologicalReference
        /// </summary>
        [DataMember(Name="topologicalReference", EmitDefaultValue=false)]
        public TopologicalReference TopologicalReference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PinConnector {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Interaction: ").Append(Interaction).Append("\n");
            sb.Append("  KinematicBehavior: ").Append(KinematicBehavior).Append("\n");
            sb.Append("  AdvancedPinSettings: ").Append(AdvancedPinSettings).Append("\n");
            sb.Append("  TopologicalReference: ").Append(TopologicalReference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PinConnector);
        }

        /// <summary>
        /// Returns true if PinConnector instances are equal
        /// </summary>
        /// <param name="input">Instance of PinConnector to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PinConnector input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Interaction == input.Interaction ||
                    this.Interaction.Equals(input.Interaction)
                ) && 
                (
                    this.KinematicBehavior == input.KinematicBehavior ||
                    (this.KinematicBehavior != null &&
                    this.KinematicBehavior.Equals(input.KinematicBehavior))
                ) && 
                (
                    this.AdvancedPinSettings == input.AdvancedPinSettings ||
                    (this.AdvancedPinSettings != null &&
                    this.AdvancedPinSettings.Equals(input.AdvancedPinSettings))
                ) && 
                (
                    this.TopologicalReference == input.TopologicalReference ||
                    (this.TopologicalReference != null &&
                    this.TopologicalReference.Equals(input.TopologicalReference))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                hashCode = hashCode * 59 + this.Interaction.GetHashCode();
                if (this.KinematicBehavior != null)
                    hashCode = hashCode * 59 + this.KinematicBehavior.GetHashCode();
                if (this.AdvancedPinSettings != null)
                    hashCode = hashCode * 59 + this.AdvancedPinSettings.GetHashCode();
                if (this.TopologicalReference != null)
                    hashCode = hashCode * 59 + this.TopologicalReference.GetHashCode();
                return hashCode;
            }
        }

    }

}
