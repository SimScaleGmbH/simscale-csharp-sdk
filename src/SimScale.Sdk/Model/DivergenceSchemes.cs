/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// DivergenceSchemes
    /// </summary>
    [DataContract]
    public partial class DivergenceSchemes : IEquatable<DivergenceSchemes>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DivergenceSchemes" /> class.
        /// </summary>
        /// <param name="forDefault">forDefault.</param>
        /// <param name="divPhiVelocity">divPhiVelocity.</param>
        /// <param name="divPhiKineticEnergy">divPhiKineticEnergy.</param>
        /// <param name="divPhiEnthalpy">divPhiEnthalpy.</param>
        /// <param name="divPhiInternalEnergy">divPhiInternalEnergy.</param>
        /// <param name="divPhivPressure">divPhivPressure.</param>
        /// <param name="divPhiTurbulentKineticEnergy">divPhiTurbulentKineticEnergy.</param>
        /// <param name="divNuEffDevTGradVelocity">divNuEffDevTGradVelocity.</param>
        /// <param name="divMuEffDev2TGradVelocity">divMuEffDev2TGradVelocity.</param>
        /// <param name="divPhiOmegaDissipationRate">divPhiOmegaDissipationRate.</param>
        /// <param name="divPhiEpsilonDissipationRate">divPhiEpsilonDissipationRate.</param>
        /// <param name="divR">divR.</param>
        /// <param name="divPhiR">divPhiR.</param>
        /// <param name="divPhiNuTilda">divPhiNuTilda.</param>
        /// <param name="divPhiTemperature">divPhiTemperature.</param>
        /// <param name="divPhiPassiveScalar">divPhiPassiveScalar.</param>
        /// <param name="divTauMC">divTauMC.</param>
        /// <param name="divPhidPressure">divPhidPressure.</param>
        /// <param name="divVelocity">divVelocity.</param>
        /// <param name="divPhiEkp">divPhiEkp.</param>
        /// <param name="divPhirbAlpha">divPhirbAlpha.</param>
        /// <param name="divMuEffDevTGradVelocity">divMuEffDevTGradVelocity.</param>
        /// <param name="divPhiAlpha">divPhiAlpha.</param>
        /// <param name="divRhoPhiVelocity">divRhoPhiVelocity.</param>
        public DivergenceSchemes(OneOfDivergenceSchemesForDefault forDefault = default(OneOfDivergenceSchemesForDefault), OneOfDivergenceSchemesDivPhiVelocity divPhiVelocity = default(OneOfDivergenceSchemesDivPhiVelocity), OneOfDivergenceSchemesDivPhiKineticEnergy divPhiKineticEnergy = default(OneOfDivergenceSchemesDivPhiKineticEnergy), OneOfDivergenceSchemesDivPhiEnthalpy divPhiEnthalpy = default(OneOfDivergenceSchemesDivPhiEnthalpy), OneOfDivergenceSchemesDivPhiInternalEnergy divPhiInternalEnergy = default(OneOfDivergenceSchemesDivPhiInternalEnergy), OneOfDivergenceSchemesDivPhivPressure divPhivPressure = default(OneOfDivergenceSchemesDivPhivPressure), OneOfDivergenceSchemesDivPhiTurbulentKineticEnergy divPhiTurbulentKineticEnergy = default(OneOfDivergenceSchemesDivPhiTurbulentKineticEnergy), GaussLinearDivergenceScheme divNuEffDevTGradVelocity = default(GaussLinearDivergenceScheme), GaussLinearDivergenceScheme divMuEffDev2TGradVelocity = default(GaussLinearDivergenceScheme), OneOfDivergenceSchemesDivPhiOmegaDissipationRate divPhiOmegaDissipationRate = default(OneOfDivergenceSchemesDivPhiOmegaDissipationRate), OneOfDivergenceSchemesDivPhiEpsilonDissipationRate divPhiEpsilonDissipationRate = default(OneOfDivergenceSchemesDivPhiEpsilonDissipationRate), OneOfDivergenceSchemesDivR divR = default(OneOfDivergenceSchemesDivR), OneOfDivergenceSchemesDivPhiR divPhiR = default(OneOfDivergenceSchemesDivPhiR), OneOfDivergenceSchemesDivPhiNuTilda divPhiNuTilda = default(OneOfDivergenceSchemesDivPhiNuTilda), OneOfDivergenceSchemesDivPhiTemperature divPhiTemperature = default(OneOfDivergenceSchemesDivPhiTemperature), OneOfDivergenceSchemesDivPhiPassiveScalar divPhiPassiveScalar = default(OneOfDivergenceSchemesDivPhiPassiveScalar), OneOfDivergenceSchemesDivTauMC divTauMC = default(OneOfDivergenceSchemesDivTauMC), OneOfDivergenceSchemesDivPhidPressure divPhidPressure = default(OneOfDivergenceSchemesDivPhidPressure), OneOfDivergenceSchemesDivVelocity divVelocity = default(OneOfDivergenceSchemesDivVelocity), OneOfDivergenceSchemesDivPhiEkp divPhiEkp = default(OneOfDivergenceSchemesDivPhiEkp), OneOfDivergenceSchemesDivPhirbAlpha divPhirbAlpha = default(OneOfDivergenceSchemesDivPhirbAlpha), GaussLinearDivergenceScheme divMuEffDevTGradVelocity = default(GaussLinearDivergenceScheme), OneOfDivergenceSchemesDivPhiAlpha divPhiAlpha = default(OneOfDivergenceSchemesDivPhiAlpha), OneOfDivergenceSchemesDivRhoPhiVelocity divRhoPhiVelocity = default(OneOfDivergenceSchemesDivRhoPhiVelocity))
        {
            this.ForDefault = forDefault;
            this.DivPhiVelocity = divPhiVelocity;
            this.DivPhiKineticEnergy = divPhiKineticEnergy;
            this.DivPhiEnthalpy = divPhiEnthalpy;
            this.DivPhiInternalEnergy = divPhiInternalEnergy;
            this.DivPhivPressure = divPhivPressure;
            this.DivPhiTurbulentKineticEnergy = divPhiTurbulentKineticEnergy;
            this.DivNuEffDevTGradVelocity = divNuEffDevTGradVelocity;
            this.DivMuEffDev2TGradVelocity = divMuEffDev2TGradVelocity;
            this.DivPhiOmegaDissipationRate = divPhiOmegaDissipationRate;
            this.DivPhiEpsilonDissipationRate = divPhiEpsilonDissipationRate;
            this.DivR = divR;
            this.DivPhiR = divPhiR;
            this.DivPhiNuTilda = divPhiNuTilda;
            this.DivPhiTemperature = divPhiTemperature;
            this.DivPhiPassiveScalar = divPhiPassiveScalar;
            this.DivTauMC = divTauMC;
            this.DivPhidPressure = divPhidPressure;
            this.DivVelocity = divVelocity;
            this.DivPhiEkp = divPhiEkp;
            this.DivPhirbAlpha = divPhirbAlpha;
            this.DivMuEffDevTGradVelocity = divMuEffDevTGradVelocity;
            this.DivPhiAlpha = divPhiAlpha;
            this.DivRhoPhiVelocity = divRhoPhiVelocity;
        }
        
        /// <summary>
        /// Gets or Sets ForDefault
        /// </summary>
        [DataMember(Name="forDefault", EmitDefaultValue=false)]
        public OneOfDivergenceSchemesForDefault ForDefault { get; set; }

        /// <summary>
        /// Gets or Sets DivPhiVelocity
        /// </summary>
        [DataMember(Name="div_Phi_velocity", EmitDefaultValue=false)]
        public OneOfDivergenceSchemesDivPhiVelocity DivPhiVelocity { get; set; }

        /// <summary>
        /// Gets or Sets DivPhiKineticEnergy
        /// </summary>
        [DataMember(Name="div_Phi_kineticEnergy", EmitDefaultValue=false)]
        public OneOfDivergenceSchemesDivPhiKineticEnergy DivPhiKineticEnergy { get; set; }

        /// <summary>
        /// Gets or Sets DivPhiEnthalpy
        /// </summary>
        [DataMember(Name="div_Phi_enthalpy", EmitDefaultValue=false)]
        public OneOfDivergenceSchemesDivPhiEnthalpy DivPhiEnthalpy { get; set; }

        /// <summary>
        /// Gets or Sets DivPhiInternalEnergy
        /// </summary>
        [DataMember(Name="div_Phi_internalEnergy", EmitDefaultValue=false)]
        public OneOfDivergenceSchemesDivPhiInternalEnergy DivPhiInternalEnergy { get; set; }

        /// <summary>
        /// Gets or Sets DivPhivPressure
        /// </summary>
        [DataMember(Name="div_Phiv_pressure", EmitDefaultValue=false)]
        public OneOfDivergenceSchemesDivPhivPressure DivPhivPressure { get; set; }

        /// <summary>
        /// Gets or Sets DivPhiTurbulentKineticEnergy
        /// </summary>
        [DataMember(Name="div_Phi_turbulentKineticEnergy", EmitDefaultValue=false)]
        public OneOfDivergenceSchemesDivPhiTurbulentKineticEnergy DivPhiTurbulentKineticEnergy { get; set; }

        /// <summary>
        /// Gets or Sets DivNuEffDevTGradVelocity
        /// </summary>
        [DataMember(Name="div_NuEff_dev_T_grad_velocity", EmitDefaultValue=false)]
        public GaussLinearDivergenceScheme DivNuEffDevTGradVelocity { get; set; }

        /// <summary>
        /// Gets or Sets DivMuEffDev2TGradVelocity
        /// </summary>
        [DataMember(Name="div_MuEff_dev2_T_grad_velocity", EmitDefaultValue=false)]
        public GaussLinearDivergenceScheme DivMuEffDev2TGradVelocity { get; set; }

        /// <summary>
        /// Gets or Sets DivPhiOmegaDissipationRate
        /// </summary>
        [DataMember(Name="div_Phi_omegaDissipationRate", EmitDefaultValue=false)]
        public OneOfDivergenceSchemesDivPhiOmegaDissipationRate DivPhiOmegaDissipationRate { get; set; }

        /// <summary>
        /// Gets or Sets DivPhiEpsilonDissipationRate
        /// </summary>
        [DataMember(Name="div_Phi_epsilonDissipationRate", EmitDefaultValue=false)]
        public OneOfDivergenceSchemesDivPhiEpsilonDissipationRate DivPhiEpsilonDissipationRate { get; set; }

        /// <summary>
        /// Gets or Sets DivR
        /// </summary>
        [DataMember(Name="div_R", EmitDefaultValue=false)]
        public OneOfDivergenceSchemesDivR DivR { get; set; }

        /// <summary>
        /// Gets or Sets DivPhiR
        /// </summary>
        [DataMember(Name="div_Phi_R", EmitDefaultValue=false)]
        public OneOfDivergenceSchemesDivPhiR DivPhiR { get; set; }

        /// <summary>
        /// Gets or Sets DivPhiNuTilda
        /// </summary>
        [DataMember(Name="div_Phi_nuTilda", EmitDefaultValue=false)]
        public OneOfDivergenceSchemesDivPhiNuTilda DivPhiNuTilda { get; set; }

        /// <summary>
        /// Gets or Sets DivPhiTemperature
        /// </summary>
        [DataMember(Name="div_Phi_temperature", EmitDefaultValue=false)]
        public OneOfDivergenceSchemesDivPhiTemperature DivPhiTemperature { get; set; }

        /// <summary>
        /// Gets or Sets DivPhiPassiveScalar
        /// </summary>
        [DataMember(Name="div_Phi_passiveScalar", EmitDefaultValue=false)]
        public OneOfDivergenceSchemesDivPhiPassiveScalar DivPhiPassiveScalar { get; set; }

        /// <summary>
        /// Gets or Sets DivTauMC
        /// </summary>
        [DataMember(Name="div_tauMC", EmitDefaultValue=false)]
        public OneOfDivergenceSchemesDivTauMC DivTauMC { get; set; }

        /// <summary>
        /// Gets or Sets DivPhidPressure
        /// </summary>
        [DataMember(Name="div_phid_pressure", EmitDefaultValue=false)]
        public OneOfDivergenceSchemesDivPhidPressure DivPhidPressure { get; set; }

        /// <summary>
        /// Gets or Sets DivVelocity
        /// </summary>
        [DataMember(Name="div_velocity", EmitDefaultValue=false)]
        public OneOfDivergenceSchemesDivVelocity DivVelocity { get; set; }

        /// <summary>
        /// Gets or Sets DivPhiEkp
        /// </summary>
        [DataMember(Name="div_phi_Ekp", EmitDefaultValue=false)]
        public OneOfDivergenceSchemesDivPhiEkp DivPhiEkp { get; set; }

        /// <summary>
        /// Gets or Sets DivPhirbAlpha
        /// </summary>
        [DataMember(Name="div_phirb_alpha", EmitDefaultValue=false)]
        public OneOfDivergenceSchemesDivPhirbAlpha DivPhirbAlpha { get; set; }

        /// <summary>
        /// Gets or Sets DivMuEffDevTGradVelocity
        /// </summary>
        [DataMember(Name="div_muEff_dev_T_grad_velocity", EmitDefaultValue=false)]
        public GaussLinearDivergenceScheme DivMuEffDevTGradVelocity { get; set; }

        /// <summary>
        /// Gets or Sets DivPhiAlpha
        /// </summary>
        [DataMember(Name="div_phi_alpha", EmitDefaultValue=false)]
        public OneOfDivergenceSchemesDivPhiAlpha DivPhiAlpha { get; set; }

        /// <summary>
        /// Gets or Sets DivRhoPhiVelocity
        /// </summary>
        [DataMember(Name="div_rhoPhi_velocity", EmitDefaultValue=false)]
        public OneOfDivergenceSchemesDivRhoPhiVelocity DivRhoPhiVelocity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DivergenceSchemes {\n");
            sb.Append("  ForDefault: ").Append(ForDefault).Append("\n");
            sb.Append("  DivPhiVelocity: ").Append(DivPhiVelocity).Append("\n");
            sb.Append("  DivPhiKineticEnergy: ").Append(DivPhiKineticEnergy).Append("\n");
            sb.Append("  DivPhiEnthalpy: ").Append(DivPhiEnthalpy).Append("\n");
            sb.Append("  DivPhiInternalEnergy: ").Append(DivPhiInternalEnergy).Append("\n");
            sb.Append("  DivPhivPressure: ").Append(DivPhivPressure).Append("\n");
            sb.Append("  DivPhiTurbulentKineticEnergy: ").Append(DivPhiTurbulentKineticEnergy).Append("\n");
            sb.Append("  DivNuEffDevTGradVelocity: ").Append(DivNuEffDevTGradVelocity).Append("\n");
            sb.Append("  DivMuEffDev2TGradVelocity: ").Append(DivMuEffDev2TGradVelocity).Append("\n");
            sb.Append("  DivPhiOmegaDissipationRate: ").Append(DivPhiOmegaDissipationRate).Append("\n");
            sb.Append("  DivPhiEpsilonDissipationRate: ").Append(DivPhiEpsilonDissipationRate).Append("\n");
            sb.Append("  DivR: ").Append(DivR).Append("\n");
            sb.Append("  DivPhiR: ").Append(DivPhiR).Append("\n");
            sb.Append("  DivPhiNuTilda: ").Append(DivPhiNuTilda).Append("\n");
            sb.Append("  DivPhiTemperature: ").Append(DivPhiTemperature).Append("\n");
            sb.Append("  DivPhiPassiveScalar: ").Append(DivPhiPassiveScalar).Append("\n");
            sb.Append("  DivTauMC: ").Append(DivTauMC).Append("\n");
            sb.Append("  DivPhidPressure: ").Append(DivPhidPressure).Append("\n");
            sb.Append("  DivVelocity: ").Append(DivVelocity).Append("\n");
            sb.Append("  DivPhiEkp: ").Append(DivPhiEkp).Append("\n");
            sb.Append("  DivPhirbAlpha: ").Append(DivPhirbAlpha).Append("\n");
            sb.Append("  DivMuEffDevTGradVelocity: ").Append(DivMuEffDevTGradVelocity).Append("\n");
            sb.Append("  DivPhiAlpha: ").Append(DivPhiAlpha).Append("\n");
            sb.Append("  DivRhoPhiVelocity: ").Append(DivRhoPhiVelocity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DivergenceSchemes);
        }

        /// <summary>
        /// Returns true if DivergenceSchemes instances are equal
        /// </summary>
        /// <param name="input">Instance of DivergenceSchemes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DivergenceSchemes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ForDefault == input.ForDefault ||
                    (this.ForDefault != null &&
                    this.ForDefault.Equals(input.ForDefault))
                ) && 
                (
                    this.DivPhiVelocity == input.DivPhiVelocity ||
                    (this.DivPhiVelocity != null &&
                    this.DivPhiVelocity.Equals(input.DivPhiVelocity))
                ) && 
                (
                    this.DivPhiKineticEnergy == input.DivPhiKineticEnergy ||
                    (this.DivPhiKineticEnergy != null &&
                    this.DivPhiKineticEnergy.Equals(input.DivPhiKineticEnergy))
                ) && 
                (
                    this.DivPhiEnthalpy == input.DivPhiEnthalpy ||
                    (this.DivPhiEnthalpy != null &&
                    this.DivPhiEnthalpy.Equals(input.DivPhiEnthalpy))
                ) && 
                (
                    this.DivPhiInternalEnergy == input.DivPhiInternalEnergy ||
                    (this.DivPhiInternalEnergy != null &&
                    this.DivPhiInternalEnergy.Equals(input.DivPhiInternalEnergy))
                ) && 
                (
                    this.DivPhivPressure == input.DivPhivPressure ||
                    (this.DivPhivPressure != null &&
                    this.DivPhivPressure.Equals(input.DivPhivPressure))
                ) && 
                (
                    this.DivPhiTurbulentKineticEnergy == input.DivPhiTurbulentKineticEnergy ||
                    (this.DivPhiTurbulentKineticEnergy != null &&
                    this.DivPhiTurbulentKineticEnergy.Equals(input.DivPhiTurbulentKineticEnergy))
                ) && 
                (
                    this.DivNuEffDevTGradVelocity == input.DivNuEffDevTGradVelocity ||
                    (this.DivNuEffDevTGradVelocity != null &&
                    this.DivNuEffDevTGradVelocity.Equals(input.DivNuEffDevTGradVelocity))
                ) && 
                (
                    this.DivMuEffDev2TGradVelocity == input.DivMuEffDev2TGradVelocity ||
                    (this.DivMuEffDev2TGradVelocity != null &&
                    this.DivMuEffDev2TGradVelocity.Equals(input.DivMuEffDev2TGradVelocity))
                ) && 
                (
                    this.DivPhiOmegaDissipationRate == input.DivPhiOmegaDissipationRate ||
                    (this.DivPhiOmegaDissipationRate != null &&
                    this.DivPhiOmegaDissipationRate.Equals(input.DivPhiOmegaDissipationRate))
                ) && 
                (
                    this.DivPhiEpsilonDissipationRate == input.DivPhiEpsilonDissipationRate ||
                    (this.DivPhiEpsilonDissipationRate != null &&
                    this.DivPhiEpsilonDissipationRate.Equals(input.DivPhiEpsilonDissipationRate))
                ) && 
                (
                    this.DivR == input.DivR ||
                    (this.DivR != null &&
                    this.DivR.Equals(input.DivR))
                ) && 
                (
                    this.DivPhiR == input.DivPhiR ||
                    (this.DivPhiR != null &&
                    this.DivPhiR.Equals(input.DivPhiR))
                ) && 
                (
                    this.DivPhiNuTilda == input.DivPhiNuTilda ||
                    (this.DivPhiNuTilda != null &&
                    this.DivPhiNuTilda.Equals(input.DivPhiNuTilda))
                ) && 
                (
                    this.DivPhiTemperature == input.DivPhiTemperature ||
                    (this.DivPhiTemperature != null &&
                    this.DivPhiTemperature.Equals(input.DivPhiTemperature))
                ) && 
                (
                    this.DivPhiPassiveScalar == input.DivPhiPassiveScalar ||
                    (this.DivPhiPassiveScalar != null &&
                    this.DivPhiPassiveScalar.Equals(input.DivPhiPassiveScalar))
                ) && 
                (
                    this.DivTauMC == input.DivTauMC ||
                    (this.DivTauMC != null &&
                    this.DivTauMC.Equals(input.DivTauMC))
                ) && 
                (
                    this.DivPhidPressure == input.DivPhidPressure ||
                    (this.DivPhidPressure != null &&
                    this.DivPhidPressure.Equals(input.DivPhidPressure))
                ) && 
                (
                    this.DivVelocity == input.DivVelocity ||
                    (this.DivVelocity != null &&
                    this.DivVelocity.Equals(input.DivVelocity))
                ) && 
                (
                    this.DivPhiEkp == input.DivPhiEkp ||
                    (this.DivPhiEkp != null &&
                    this.DivPhiEkp.Equals(input.DivPhiEkp))
                ) && 
                (
                    this.DivPhirbAlpha == input.DivPhirbAlpha ||
                    (this.DivPhirbAlpha != null &&
                    this.DivPhirbAlpha.Equals(input.DivPhirbAlpha))
                ) && 
                (
                    this.DivMuEffDevTGradVelocity == input.DivMuEffDevTGradVelocity ||
                    (this.DivMuEffDevTGradVelocity != null &&
                    this.DivMuEffDevTGradVelocity.Equals(input.DivMuEffDevTGradVelocity))
                ) && 
                (
                    this.DivPhiAlpha == input.DivPhiAlpha ||
                    (this.DivPhiAlpha != null &&
                    this.DivPhiAlpha.Equals(input.DivPhiAlpha))
                ) && 
                (
                    this.DivRhoPhiVelocity == input.DivRhoPhiVelocity ||
                    (this.DivRhoPhiVelocity != null &&
                    this.DivRhoPhiVelocity.Equals(input.DivRhoPhiVelocity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ForDefault != null)
                    hashCode = hashCode * 59 + this.ForDefault.GetHashCode();
                if (this.DivPhiVelocity != null)
                    hashCode = hashCode * 59 + this.DivPhiVelocity.GetHashCode();
                if (this.DivPhiKineticEnergy != null)
                    hashCode = hashCode * 59 + this.DivPhiKineticEnergy.GetHashCode();
                if (this.DivPhiEnthalpy != null)
                    hashCode = hashCode * 59 + this.DivPhiEnthalpy.GetHashCode();
                if (this.DivPhiInternalEnergy != null)
                    hashCode = hashCode * 59 + this.DivPhiInternalEnergy.GetHashCode();
                if (this.DivPhivPressure != null)
                    hashCode = hashCode * 59 + this.DivPhivPressure.GetHashCode();
                if (this.DivPhiTurbulentKineticEnergy != null)
                    hashCode = hashCode * 59 + this.DivPhiTurbulentKineticEnergy.GetHashCode();
                if (this.DivNuEffDevTGradVelocity != null)
                    hashCode = hashCode * 59 + this.DivNuEffDevTGradVelocity.GetHashCode();
                if (this.DivMuEffDev2TGradVelocity != null)
                    hashCode = hashCode * 59 + this.DivMuEffDev2TGradVelocity.GetHashCode();
                if (this.DivPhiOmegaDissipationRate != null)
                    hashCode = hashCode * 59 + this.DivPhiOmegaDissipationRate.GetHashCode();
                if (this.DivPhiEpsilonDissipationRate != null)
                    hashCode = hashCode * 59 + this.DivPhiEpsilonDissipationRate.GetHashCode();
                if (this.DivR != null)
                    hashCode = hashCode * 59 + this.DivR.GetHashCode();
                if (this.DivPhiR != null)
                    hashCode = hashCode * 59 + this.DivPhiR.GetHashCode();
                if (this.DivPhiNuTilda != null)
                    hashCode = hashCode * 59 + this.DivPhiNuTilda.GetHashCode();
                if (this.DivPhiTemperature != null)
                    hashCode = hashCode * 59 + this.DivPhiTemperature.GetHashCode();
                if (this.DivPhiPassiveScalar != null)
                    hashCode = hashCode * 59 + this.DivPhiPassiveScalar.GetHashCode();
                if (this.DivTauMC != null)
                    hashCode = hashCode * 59 + this.DivTauMC.GetHashCode();
                if (this.DivPhidPressure != null)
                    hashCode = hashCode * 59 + this.DivPhidPressure.GetHashCode();
                if (this.DivVelocity != null)
                    hashCode = hashCode * 59 + this.DivVelocity.GetHashCode();
                if (this.DivPhiEkp != null)
                    hashCode = hashCode * 59 + this.DivPhiEkp.GetHashCode();
                if (this.DivPhirbAlpha != null)
                    hashCode = hashCode * 59 + this.DivPhirbAlpha.GetHashCode();
                if (this.DivMuEffDevTGradVelocity != null)
                    hashCode = hashCode * 59 + this.DivMuEffDevTGradVelocity.GetHashCode();
                if (this.DivPhiAlpha != null)
                    hashCode = hashCode * 59 + this.DivPhiAlpha.GetHashCode();
                if (this.DivRhoPhiVelocity != null)
                    hashCode = hashCode * 59 + this.DivRhoPhiVelocity.GetHashCode();
                return hashCode;
            }
        }

    }

}
