/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// Estimation
    /// </summary>
    [DataContract]
    public partial class Estimation : IEquatable<Estimation>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Estimation" /> class.
        /// </summary>
        /// <param name="duration">duration.</param>
        /// <param name="computeResource">computeResource.</param>
        /// <param name="cellCount">cellCount.</param>
        public Estimation(Duration duration = default(Duration), ComputeResource computeResource = default(ComputeResource), CellCount cellCount = default(CellCount))
        {
            this.Duration = duration;
            this.ComputeResource = computeResource;
            this.CellCount = cellCount;
        }
        
        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public Duration Duration { get; set; }

        /// <summary>
        /// Gets or Sets ComputeResource
        /// </summary>
        [DataMember(Name="computeResource", EmitDefaultValue=false)]
        public ComputeResource ComputeResource { get; set; }

        /// <summary>
        /// Gets or Sets CellCount
        /// </summary>
        [DataMember(Name="cellCount", EmitDefaultValue=false)]
        public CellCount CellCount { get; set; }

        /// <summary>
        /// The total number of jobs that will be triggered for this simulation run or mesh operation.
        /// </summary>
        /// <value>The total number of jobs that will be triggered for this simulation run or mesh operation.</value>
        [DataMember(Name="totalRunCount", EmitDefaultValue=false)]
        public int? TotalRunCount { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Estimation {\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  ComputeResource: ").Append(ComputeResource).Append("\n");
            sb.Append("  CellCount: ").Append(CellCount).Append("\n");
            sb.Append("  TotalRunCount: ").Append(TotalRunCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Estimation);
        }

        /// <summary>
        /// Returns true if Estimation instances are equal
        /// </summary>
        /// <param name="input">Instance of Estimation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Estimation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.ComputeResource == input.ComputeResource ||
                    (this.ComputeResource != null &&
                    this.ComputeResource.Equals(input.ComputeResource))
                ) && 
                (
                    this.CellCount == input.CellCount ||
                    (this.CellCount != null &&
                    this.CellCount.Equals(input.CellCount))
                ) && 
                (
                    this.TotalRunCount == input.TotalRunCount ||
                    (this.TotalRunCount != null &&
                    this.TotalRunCount.Equals(input.TotalRunCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                if (this.ComputeResource != null)
                    hashCode = hashCode * 59 + this.ComputeResource.GetHashCode();
                if (this.CellCount != null)
                    hashCode = hashCode * 59 + this.CellCount.GetHashCode();
                if (this.TotalRunCount != null)
                    hashCode = hashCode * 59 + this.TotalRunCount.GetHashCode();
                return hashCode;
            }
        }

    }

}
