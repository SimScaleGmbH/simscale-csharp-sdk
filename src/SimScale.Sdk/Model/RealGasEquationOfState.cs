/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// &lt;br&gt;&lt;p&gt;The &lt;b&gt;Equation of state&lt;/b&gt; describes the relation between density of a fluid and the fluid pressure and temperature. The available options are:&lt;/p&gt;&lt;p&gt;&lt;b&gt;Rho const:&lt;/b&gt; Fluid density is assumed constant.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Incompressibel perfect gas:&lt;/b&gt; The fluid is assumed to be an &#39;Ideal Gas&#39; that is incompressible by pressure. But, fluid density can change due to temperature.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Perfect gas:&lt;/b&gt; Fluid is assumed to be an &#39;Ideal Gas&#39; and obeys the &#39;Ideal Gas Law&#39;.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Perfect fluid:&lt;/b&gt; Fluid density can change due to pressure and temperature with respect to a base value.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Adiabatic perfect fluid:&lt;/b&gt; The fluid is a perfect fluid which is adiabatic in nature.&lt;/p&gt; &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/materials/thermophysical-fluid-models/#equation-of-state&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.
    /// </summary>
    [DataContract]
    public partial class RealGasEquationOfState : OneOfHConstThermoEquationOfState, IEquatable<RealGasEquationOfState>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RealGasEquationOfState" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RealGasEquationOfState() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RealGasEquationOfState" /> class.
        /// </summary>
        /// <param name="type">&lt;br&gt;&lt;p&gt;The &lt;b&gt;Equation of state&lt;/b&gt; describes the relation between density of a fluid and the fluid pressure and temperature. The available options are:&lt;/p&gt;&lt;p&gt;&lt;b&gt;Rho const:&lt;/b&gt; Fluid density is assumed constant.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Incompressibel perfect gas:&lt;/b&gt; The fluid is assumed to be an &#39;Ideal Gas&#39; that is incompressible by pressure. But, fluid density can change due to temperature.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Perfect gas:&lt;/b&gt; Fluid is assumed to be an &#39;Ideal Gas&#39; and obeys the &#39;Ideal Gas Law&#39;.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Perfect fluid:&lt;/b&gt; Fluid density can change due to pressure and temperature with respect to a base value.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Adiabatic perfect fluid:&lt;/b&gt; The fluid is a perfect fluid which is adiabatic in nature.&lt;/p&gt; &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/materials/thermophysical-fluid-models/#equation-of-state&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.  Schema name: RealGasEquationOfState (required) (default to &quot;REAL_GAS&quot;).</param>
        /// <param name="density">density.</param>
        /// <param name="specificEnthalpy">specificEnthalpy.</param>
        public RealGasEquationOfState(string type = "REAL_GAS", DimensionalFunctionDensity density = default(DimensionalFunctionDensity), DimensionalFunctionSpecificEnergy specificEnthalpy = default(DimensionalFunctionSpecificEnergy))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for RealGasEquationOfState and cannot be null");
            this.Density = density;
            this.SpecificEnthalpy = specificEnthalpy;
        }
        
        /// <summary>
        /// &lt;br&gt;&lt;p&gt;The &lt;b&gt;Equation of state&lt;/b&gt; describes the relation between density of a fluid and the fluid pressure and temperature. The available options are:&lt;/p&gt;&lt;p&gt;&lt;b&gt;Rho const:&lt;/b&gt; Fluid density is assumed constant.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Incompressibel perfect gas:&lt;/b&gt; The fluid is assumed to be an &#39;Ideal Gas&#39; that is incompressible by pressure. But, fluid density can change due to temperature.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Perfect gas:&lt;/b&gt; Fluid is assumed to be an &#39;Ideal Gas&#39; and obeys the &#39;Ideal Gas Law&#39;.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Perfect fluid:&lt;/b&gt; Fluid density can change due to pressure and temperature with respect to a base value.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Adiabatic perfect fluid:&lt;/b&gt; The fluid is a perfect fluid which is adiabatic in nature.&lt;/p&gt; &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/materials/thermophysical-fluid-models/#equation-of-state&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.  Schema name: RealGasEquationOfState
        /// </summary>
        /// <value>&lt;br&gt;&lt;p&gt;The &lt;b&gt;Equation of state&lt;/b&gt; describes the relation between density of a fluid and the fluid pressure and temperature. The available options are:&lt;/p&gt;&lt;p&gt;&lt;b&gt;Rho const:&lt;/b&gt; Fluid density is assumed constant.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Incompressibel perfect gas:&lt;/b&gt; The fluid is assumed to be an &#39;Ideal Gas&#39; that is incompressible by pressure. But, fluid density can change due to temperature.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Perfect gas:&lt;/b&gt; Fluid is assumed to be an &#39;Ideal Gas&#39; and obeys the &#39;Ideal Gas Law&#39;.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Perfect fluid:&lt;/b&gt; Fluid density can change due to pressure and temperature with respect to a base value.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Adiabatic perfect fluid:&lt;/b&gt; The fluid is a perfect fluid which is adiabatic in nature.&lt;/p&gt; &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/materials/thermophysical-fluid-models/#equation-of-state&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.  Schema name: RealGasEquationOfState</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Density
        /// </summary>
        [DataMember(Name="density", EmitDefaultValue=false)]
        public DimensionalFunctionDensity Density { get; set; }

        /// <summary>
        /// Gets or Sets SpecificEnthalpy
        /// </summary>
        [DataMember(Name="specificEnthalpy", EmitDefaultValue=false)]
        public DimensionalFunctionSpecificEnergy SpecificEnthalpy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RealGasEquationOfState {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Density: ").Append(Density).Append("\n");
            sb.Append("  SpecificEnthalpy: ").Append(SpecificEnthalpy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RealGasEquationOfState);
        }

        /// <summary>
        /// Returns true if RealGasEquationOfState instances are equal
        /// </summary>
        /// <param name="input">Instance of RealGasEquationOfState to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RealGasEquationOfState input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Density == input.Density ||
                    (this.Density != null &&
                    this.Density.Equals(input.Density))
                ) && 
                (
                    this.SpecificEnthalpy == input.SpecificEnthalpy ||
                    (this.SpecificEnthalpy != null &&
                    this.SpecificEnthalpy.Equals(input.SpecificEnthalpy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Density != null)
                    hashCode = hashCode * 59 + this.Density.GetHashCode();
                if (this.SpecificEnthalpy != null)
                    hashCode = hashCode * 59 + this.SpecificEnthalpy.GetHashCode();
                return hashCode;
            }
        }

    }

}
