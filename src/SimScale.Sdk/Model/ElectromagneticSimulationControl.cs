/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// ElectromagneticSimulationControl
    /// </summary>
    [DataContract]
    public partial class ElectromagneticSimulationControl : IEquatable<ElectromagneticSimulationControl>
    {
        /// <summary>
        /// &lt;p&gt;Selecting more processor cores will speed up the simulation process. Choosing a smaller computation instance will save core hours. &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/simulation-control-fluid/#number-of-processors&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;Selecting more processor cores will speed up the simulation process. Choosing a smaller computation instance will save core hours. &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/simulation-control-fluid/#number-of-processors&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.&lt;/p&gt;</value>
        public enum NumProcessorsEnum
        {
            /// <summary>
            /// Enum NUMBER_MINUS_1 for value: -1
            /// </summary>
            NUMBER_MINUS_1 = -1,

            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            NUMBER_2 = 2,

            /// <summary>
            /// Enum NUMBER_4 for value: 4
            /// </summary>
            NUMBER_4 = 4,

            /// <summary>
            /// Enum NUMBER_8 for value: 8
            /// </summary>
            NUMBER_8 = 8,

            /// <summary>
            /// Enum NUMBER_16 for value: 16
            /// </summary>
            NUMBER_16 = 16,

            /// <summary>
            /// Enum NUMBER_32 for value: 32
            /// </summary>
            NUMBER_32 = 32,

            /// <summary>
            /// Enum NUMBER_48 for value: 48
            /// </summary>
            NUMBER_48 = 48,

            /// <summary>
            /// Enum NUMBER_64 for value: 64
            /// </summary>
            NUMBER_64 = 64,

            /// <summary>
            /// Enum NUMBER_96 for value: 96
            /// </summary>
            NUMBER_96 = 96,

            /// <summary>
            /// Enum NUMBER_128 for value: 128
            /// </summary>
            NUMBER_128 = 128,

            /// <summary>
            /// Enum NUMBER_192 for value: 192
            /// </summary>
            NUMBER_192 = 192

        }

        /// <summary>
        /// &lt;p&gt;Selecting more processor cores will speed up the simulation process. Choosing a smaller computation instance will save core hours. &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/simulation-control-fluid/#number-of-processors&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;Selecting more processor cores will speed up the simulation process. Choosing a smaller computation instance will save core hours. &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/simulation-control-fluid/#number-of-processors&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.&lt;/p&gt;</value>
        [DataMember(Name="numProcessors", EmitDefaultValue=false)]
        public NumProcessorsEnum? NumProcessors { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ElectromagneticSimulationControl" /> class.
        /// </summary>
        /// <param name="transientMagneticsControl">transientMagneticsControl.</param>
        /// <param name="writeControl">writeControl.</param>
        /// <param name="numProcessors">&lt;p&gt;Selecting more processor cores will speed up the simulation process. Choosing a smaller computation instance will save core hours. &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/simulation-control-fluid/#number-of-processors&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.&lt;/p&gt; (default to NumProcessorsEnum.NUMBER_MINUS_1).</param>
        /// <param name="maxRunTime">maxRunTime.</param>
        /// <param name="coreLossReferencePeriod">coreLossReferencePeriod.</param>
        public ElectromagneticSimulationControl(ElectromagneticTransientControl transientMagneticsControl = default(ElectromagneticTransientControl), TimeStepWriteControl writeControl = default(TimeStepWriteControl), NumProcessorsEnum? numProcessors = default(NumProcessorsEnum?), DimensionalTime maxRunTime = default(DimensionalTime), DimensionalTime coreLossReferencePeriod = default(DimensionalTime))
        {
            this.TransientMagneticsControl = transientMagneticsControl;
            this.WriteControl = writeControl;
            this.NumProcessors = numProcessors;
            this.MaxRunTime = maxRunTime;
            this.CoreLossReferencePeriod = coreLossReferencePeriod;
        }
        
        /// <summary>
        /// Gets or Sets TransientMagneticsControl
        /// </summary>
        [DataMember(Name="transientMagneticsControl", EmitDefaultValue=false)]
        public ElectromagneticTransientControl TransientMagneticsControl { get; set; }

        /// <summary>
        /// Gets or Sets WriteControl
        /// </summary>
        [DataMember(Name="writeControl", EmitDefaultValue=false)]
        public TimeStepWriteControl WriteControl { get; set; }

        /// <summary>
        /// Gets or Sets MaxRunTime
        /// </summary>
        [DataMember(Name="maxRunTime", EmitDefaultValue=false)]
        public DimensionalTime MaxRunTime { get; set; }

        /// <summary>
        /// Gets or Sets CoreLossReferencePeriod
        /// </summary>
        [DataMember(Name="coreLossReferencePeriod", EmitDefaultValue=false)]
        public DimensionalTime CoreLossReferencePeriod { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ElectromagneticSimulationControl {\n");
            sb.Append("  TransientMagneticsControl: ").Append(TransientMagneticsControl).Append("\n");
            sb.Append("  WriteControl: ").Append(WriteControl).Append("\n");
            sb.Append("  NumProcessors: ").Append(NumProcessors).Append("\n");
            sb.Append("  MaxRunTime: ").Append(MaxRunTime).Append("\n");
            sb.Append("  CoreLossReferencePeriod: ").Append(CoreLossReferencePeriod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ElectromagneticSimulationControl);
        }

        /// <summary>
        /// Returns true if ElectromagneticSimulationControl instances are equal
        /// </summary>
        /// <param name="input">Instance of ElectromagneticSimulationControl to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ElectromagneticSimulationControl input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TransientMagneticsControl == input.TransientMagneticsControl ||
                    (this.TransientMagneticsControl != null &&
                    this.TransientMagneticsControl.Equals(input.TransientMagneticsControl))
                ) && 
                (
                    this.WriteControl == input.WriteControl ||
                    (this.WriteControl != null &&
                    this.WriteControl.Equals(input.WriteControl))
                ) && 
                (
                    this.NumProcessors == input.NumProcessors ||
                    this.NumProcessors.Equals(input.NumProcessors)
                ) && 
                (
                    this.MaxRunTime == input.MaxRunTime ||
                    (this.MaxRunTime != null &&
                    this.MaxRunTime.Equals(input.MaxRunTime))
                ) && 
                (
                    this.CoreLossReferencePeriod == input.CoreLossReferencePeriod ||
                    (this.CoreLossReferencePeriod != null &&
                    this.CoreLossReferencePeriod.Equals(input.CoreLossReferencePeriod))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TransientMagneticsControl != null)
                    hashCode = hashCode * 59 + this.TransientMagneticsControl.GetHashCode();
                if (this.WriteControl != null)
                    hashCode = hashCode * 59 + this.WriteControl.GetHashCode();
                hashCode = hashCode * 59 + this.NumProcessors.GetHashCode();
                if (this.MaxRunTime != null)
                    hashCode = hashCode * 59 + this.MaxRunTime.GetHashCode();
                if (this.CoreLossReferencePeriod != null)
                    hashCode = hashCode * 59 + this.CoreLossReferencePeriod.GetHashCode();
                return hashCode;
            }
        }

    }

}
