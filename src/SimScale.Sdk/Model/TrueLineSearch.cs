/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// &lt;p&gt;Line search can be used to improve convergence for nonlinear calculations with the Newton method.&lt;/p&gt;
    /// </summary>
    [DataContract]
    public partial class TrueLineSearch : OneOfSolidNumericsMechanicalLineSearch, OneOfSolidNumericsThermalLineSearch, IEquatable<TrueLineSearch>
    {
        /// <summary>
        /// &lt;p&gt;Choose the method of the line search algorithm. The &lt;b&gt;Secant method&lt;/b&gt; is a simple one dimensional search algorithm. The &lt;b&gt;mixed method&lt;/b&gt; is a more elaborate algorithm that uses variable bounds.&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;Choose the method of the line search algorithm. The &lt;b&gt;Secant method&lt;/b&gt; is a simple one dimensional search algorithm. The &lt;b&gt;mixed method&lt;/b&gt; is a more elaborate algorithm that uses variable bounds.&lt;/p&gt;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MethodEnum
        {
            /// <summary>
            /// Enum SECANT for value: SECANT
            /// </summary>
            [EnumMember(Value = "SECANT")]
            SECANT = 1,

            /// <summary>
            /// Enum MIXED for value: MIXED
            /// </summary>
            [EnumMember(Value = "MIXED")]
            MIXED = 2

        }

        /// <summary>
        /// &lt;p&gt;Choose the method of the line search algorithm. The &lt;b&gt;Secant method&lt;/b&gt; is a simple one dimensional search algorithm. The &lt;b&gt;mixed method&lt;/b&gt; is a more elaborate algorithm that uses variable bounds.&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;Choose the method of the line search algorithm. The &lt;b&gt;Secant method&lt;/b&gt; is a simple one dimensional search algorithm. The &lt;b&gt;mixed method&lt;/b&gt; is a more elaborate algorithm that uses variable bounds.&lt;/p&gt;</value>
        [DataMember(Name="method", EmitDefaultValue=false)]
        public MethodEnum? Method { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TrueLineSearch" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TrueLineSearch() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TrueLineSearch" /> class.
        /// </summary>
        /// <param name="type">type (required) (default to &quot;TRUE&quot;).</param>
        /// <param name="method">&lt;p&gt;Choose the method of the line search algorithm. The &lt;b&gt;Secant method&lt;/b&gt; is a simple one dimensional search algorithm. The &lt;b&gt;mixed method&lt;/b&gt; is a more elaborate algorithm that uses variable bounds.&lt;/p&gt; (default to MethodEnum.SECANT).</param>
        /// <param name="residual">&lt;p&gt;Set the residual for the line search convergence&lt;/p&gt; (default to 0.001M).</param>
        /// <param name="maxIterations">&lt;p&gt;Set the maximum number for line search iterations. Typically a sinlge-digit number should be sufficient.&lt;/p&gt; (default to 3).</param>
        public TrueLineSearch(string type = "TRUE", MethodEnum? method = default(MethodEnum?), decimal? residual = default(decimal?), int? maxIterations = default(int?))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for TrueLineSearch and cannot be null");
            this.Method = method;
            this.Residual = residual;
            this.MaxIterations = maxIterations;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// &lt;p&gt;Set the residual for the line search convergence&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;Set the residual for the line search convergence&lt;/p&gt;</value>
        [DataMember(Name="residual", EmitDefaultValue=false)]
        public decimal? Residual { get; set; }

        /// <summary>
        /// &lt;p&gt;Set the maximum number for line search iterations. Typically a sinlge-digit number should be sufficient.&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;Set the maximum number for line search iterations. Typically a sinlge-digit number should be sufficient.&lt;/p&gt;</value>
        [DataMember(Name="maxIterations", EmitDefaultValue=false)]
        public int? MaxIterations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrueLineSearch {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Residual: ").Append(Residual).Append("\n");
            sb.Append("  MaxIterations: ").Append(MaxIterations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TrueLineSearch);
        }

        /// <summary>
        /// Returns true if TrueLineSearch instances are equal
        /// </summary>
        /// <param name="input">Instance of TrueLineSearch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrueLineSearch input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Method == input.Method ||
                    this.Method.Equals(input.Method)
                ) && 
                (
                    this.Residual == input.Residual ||
                    (this.Residual != null &&
                    this.Residual.Equals(input.Residual))
                ) && 
                (
                    this.MaxIterations == input.MaxIterations ||
                    (this.MaxIterations != null &&
                    this.MaxIterations.Equals(input.MaxIterations))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                hashCode = hashCode * 59 + this.Method.GetHashCode();
                if (this.Residual != null)
                    hashCode = hashCode * 59 + this.Residual.GetHashCode();
                if (this.MaxIterations != null)
                    hashCode = hashCode * 59 + this.MaxIterations.GetHashCode();
                return hashCode;
            }
        }

    }

}
