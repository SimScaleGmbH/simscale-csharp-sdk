/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// JohnsonCookElastoPlasticModel
    /// </summary>
    [DataContract]
    public partial class JohnsonCookElastoPlasticModel : OneOfPlasticMaterialBehaviorElastoPlasticModel, IEquatable<JohnsonCookElastoPlasticModel>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JohnsonCookElastoPlasticModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected JohnsonCookElastoPlasticModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="JohnsonCookElastoPlasticModel" /> class.
        /// </summary>
        /// <param name="type">Schema name: JohnsonCookElastoPlasticModel (required) (default to &quot;JOHNSON_COOK&quot;).</param>
        /// <param name="youngsModulus">youngsModulus.</param>
        /// <param name="poissonsRatio">poissonsRatio.</param>
        /// <param name="initialYieldStress">initialYieldStress.</param>
        /// <param name="hardeningCoefficient">hardeningCoefficient.</param>
        /// <param name="hardeningExponent">The strain hardening exponent describes the rate at which the material hardens with respect to plastic strain..</param>
        /// <param name="strainRateEffect">This term indicates how the flow stress increases with increasing strain rate. (default to false).</param>
        /// <param name="strainRateHardeningCoefficient">The strain rate hardening coefficient describes the sensitivity of the material&#39;s flow stress to changes in the strain rate. (default to 0M).</param>
        /// <param name="referenceStrainRate">referenceStrainRate.</param>
        /// <param name="thermalSofteningEffect">This term indicates how the material softens with increasing temperature. (default to false).</param>
        /// <param name="thermalSofteningExponent">The thermal softening exponent describes the rate at which the material&#39;s strength decreases with increasing temperature..</param>
        /// <param name="referenceTemperatureJC">referenceTemperatureJC.</param>
        /// <param name="meltingTemperatureJC">meltingTemperatureJC.</param>
        public JohnsonCookElastoPlasticModel(string type = "JOHNSON_COOK", DimensionalFunctionPressure youngsModulus = default(DimensionalFunctionPressure), OneOfJohnsonCookElastoPlasticModelPoissonsRatio poissonsRatio = default(OneOfJohnsonCookElastoPlasticModelPoissonsRatio), DimensionalFunctionPressure initialYieldStress = default(DimensionalFunctionPressure), DimensionalFunctionPressure hardeningCoefficient = default(DimensionalFunctionPressure), decimal? hardeningExponent = default(decimal?), bool? strainRateEffect = default(bool?), decimal? strainRateHardeningCoefficient = default(decimal?), DimensionalStrainRate referenceStrainRate = default(DimensionalStrainRate), bool? thermalSofteningEffect = default(bool?), decimal? thermalSofteningExponent = default(decimal?), DimensionalTemperature referenceTemperatureJC = default(DimensionalTemperature), DimensionalTemperature meltingTemperatureJC = default(DimensionalTemperature))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for JohnsonCookElastoPlasticModel and cannot be null");
            this.YoungsModulus = youngsModulus;
            this.PoissonsRatio = poissonsRatio;
            this.InitialYieldStress = initialYieldStress;
            this.HardeningCoefficient = hardeningCoefficient;
            this.HardeningExponent = hardeningExponent;
            this.StrainRateEffect = strainRateEffect;
            this.StrainRateHardeningCoefficient = strainRateHardeningCoefficient;
            this.ReferenceStrainRate = referenceStrainRate;
            this.ThermalSofteningEffect = thermalSofteningEffect;
            this.ThermalSofteningExponent = thermalSofteningExponent;
            this.ReferenceTemperatureJC = referenceTemperatureJC;
            this.MeltingTemperatureJC = meltingTemperatureJC;
        }
        
        /// <summary>
        /// Schema name: JohnsonCookElastoPlasticModel
        /// </summary>
        /// <value>Schema name: JohnsonCookElastoPlasticModel</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets YoungsModulus
        /// </summary>
        [DataMember(Name="youngsModulus", EmitDefaultValue=false)]
        public DimensionalFunctionPressure YoungsModulus { get; set; }

        /// <summary>
        /// Gets or Sets PoissonsRatio
        /// </summary>
        [DataMember(Name="poissonsRatio", EmitDefaultValue=false)]
        public OneOfJohnsonCookElastoPlasticModelPoissonsRatio PoissonsRatio { get; set; }

        /// <summary>
        /// Gets or Sets InitialYieldStress
        /// </summary>
        [DataMember(Name="initialYieldStress", EmitDefaultValue=false)]
        public DimensionalFunctionPressure InitialYieldStress { get; set; }

        /// <summary>
        /// Gets or Sets HardeningCoefficient
        /// </summary>
        [DataMember(Name="hardeningCoefficient", EmitDefaultValue=false)]
        public DimensionalFunctionPressure HardeningCoefficient { get; set; }

        /// <summary>
        /// The strain hardening exponent describes the rate at which the material hardens with respect to plastic strain.
        /// </summary>
        /// <value>The strain hardening exponent describes the rate at which the material hardens with respect to plastic strain.</value>
        [DataMember(Name="hardeningExponent", EmitDefaultValue=false)]
        public decimal? HardeningExponent { get; set; }

        /// <summary>
        /// This term indicates how the flow stress increases with increasing strain rate.
        /// </summary>
        /// <value>This term indicates how the flow stress increases with increasing strain rate.</value>
        [DataMember(Name="strainRateEffect", EmitDefaultValue=false)]
        public bool? StrainRateEffect { get; set; }

        /// <summary>
        /// The strain rate hardening coefficient describes the sensitivity of the material&#39;s flow stress to changes in the strain rate.
        /// </summary>
        /// <value>The strain rate hardening coefficient describes the sensitivity of the material&#39;s flow stress to changes in the strain rate.</value>
        [DataMember(Name="strainRateHardeningCoefficient", EmitDefaultValue=false)]
        public decimal? StrainRateHardeningCoefficient { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceStrainRate
        /// </summary>
        [DataMember(Name="referenceStrainRate", EmitDefaultValue=false)]
        public DimensionalStrainRate ReferenceStrainRate { get; set; }

        /// <summary>
        /// This term indicates how the material softens with increasing temperature.
        /// </summary>
        /// <value>This term indicates how the material softens with increasing temperature.</value>
        [DataMember(Name="thermalSofteningEffect", EmitDefaultValue=false)]
        public bool? ThermalSofteningEffect { get; set; }

        /// <summary>
        /// The thermal softening exponent describes the rate at which the material&#39;s strength decreases with increasing temperature.
        /// </summary>
        /// <value>The thermal softening exponent describes the rate at which the material&#39;s strength decreases with increasing temperature.</value>
        [DataMember(Name="thermalSofteningExponent", EmitDefaultValue=false)]
        public decimal? ThermalSofteningExponent { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceTemperatureJC
        /// </summary>
        [DataMember(Name="referenceTemperatureJC", EmitDefaultValue=false)]
        public DimensionalTemperature ReferenceTemperatureJC { get; set; }

        /// <summary>
        /// Gets or Sets MeltingTemperatureJC
        /// </summary>
        [DataMember(Name="meltingTemperatureJC", EmitDefaultValue=false)]
        public DimensionalTemperature MeltingTemperatureJC { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JohnsonCookElastoPlasticModel {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  YoungsModulus: ").Append(YoungsModulus).Append("\n");
            sb.Append("  PoissonsRatio: ").Append(PoissonsRatio).Append("\n");
            sb.Append("  InitialYieldStress: ").Append(InitialYieldStress).Append("\n");
            sb.Append("  HardeningCoefficient: ").Append(HardeningCoefficient).Append("\n");
            sb.Append("  HardeningExponent: ").Append(HardeningExponent).Append("\n");
            sb.Append("  StrainRateEffect: ").Append(StrainRateEffect).Append("\n");
            sb.Append("  StrainRateHardeningCoefficient: ").Append(StrainRateHardeningCoefficient).Append("\n");
            sb.Append("  ReferenceStrainRate: ").Append(ReferenceStrainRate).Append("\n");
            sb.Append("  ThermalSofteningEffect: ").Append(ThermalSofteningEffect).Append("\n");
            sb.Append("  ThermalSofteningExponent: ").Append(ThermalSofteningExponent).Append("\n");
            sb.Append("  ReferenceTemperatureJC: ").Append(ReferenceTemperatureJC).Append("\n");
            sb.Append("  MeltingTemperatureJC: ").Append(MeltingTemperatureJC).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JohnsonCookElastoPlasticModel);
        }

        /// <summary>
        /// Returns true if JohnsonCookElastoPlasticModel instances are equal
        /// </summary>
        /// <param name="input">Instance of JohnsonCookElastoPlasticModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JohnsonCookElastoPlasticModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.YoungsModulus == input.YoungsModulus ||
                    (this.YoungsModulus != null &&
                    this.YoungsModulus.Equals(input.YoungsModulus))
                ) && 
                (
                    this.PoissonsRatio == input.PoissonsRatio ||
                    (this.PoissonsRatio != null &&
                    this.PoissonsRatio.Equals(input.PoissonsRatio))
                ) && 
                (
                    this.InitialYieldStress == input.InitialYieldStress ||
                    (this.InitialYieldStress != null &&
                    this.InitialYieldStress.Equals(input.InitialYieldStress))
                ) && 
                (
                    this.HardeningCoefficient == input.HardeningCoefficient ||
                    (this.HardeningCoefficient != null &&
                    this.HardeningCoefficient.Equals(input.HardeningCoefficient))
                ) && 
                (
                    this.HardeningExponent == input.HardeningExponent ||
                    (this.HardeningExponent != null &&
                    this.HardeningExponent.Equals(input.HardeningExponent))
                ) && 
                (
                    this.StrainRateEffect == input.StrainRateEffect ||
                    (this.StrainRateEffect != null &&
                    this.StrainRateEffect.Equals(input.StrainRateEffect))
                ) && 
                (
                    this.StrainRateHardeningCoefficient == input.StrainRateHardeningCoefficient ||
                    (this.StrainRateHardeningCoefficient != null &&
                    this.StrainRateHardeningCoefficient.Equals(input.StrainRateHardeningCoefficient))
                ) && 
                (
                    this.ReferenceStrainRate == input.ReferenceStrainRate ||
                    (this.ReferenceStrainRate != null &&
                    this.ReferenceStrainRate.Equals(input.ReferenceStrainRate))
                ) && 
                (
                    this.ThermalSofteningEffect == input.ThermalSofteningEffect ||
                    (this.ThermalSofteningEffect != null &&
                    this.ThermalSofteningEffect.Equals(input.ThermalSofteningEffect))
                ) && 
                (
                    this.ThermalSofteningExponent == input.ThermalSofteningExponent ||
                    (this.ThermalSofteningExponent != null &&
                    this.ThermalSofteningExponent.Equals(input.ThermalSofteningExponent))
                ) && 
                (
                    this.ReferenceTemperatureJC == input.ReferenceTemperatureJC ||
                    (this.ReferenceTemperatureJC != null &&
                    this.ReferenceTemperatureJC.Equals(input.ReferenceTemperatureJC))
                ) && 
                (
                    this.MeltingTemperatureJC == input.MeltingTemperatureJC ||
                    (this.MeltingTemperatureJC != null &&
                    this.MeltingTemperatureJC.Equals(input.MeltingTemperatureJC))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.YoungsModulus != null)
                    hashCode = hashCode * 59 + this.YoungsModulus.GetHashCode();
                if (this.PoissonsRatio != null)
                    hashCode = hashCode * 59 + this.PoissonsRatio.GetHashCode();
                if (this.InitialYieldStress != null)
                    hashCode = hashCode * 59 + this.InitialYieldStress.GetHashCode();
                if (this.HardeningCoefficient != null)
                    hashCode = hashCode * 59 + this.HardeningCoefficient.GetHashCode();
                if (this.HardeningExponent != null)
                    hashCode = hashCode * 59 + this.HardeningExponent.GetHashCode();
                if (this.StrainRateEffect != null)
                    hashCode = hashCode * 59 + this.StrainRateEffect.GetHashCode();
                if (this.StrainRateHardeningCoefficient != null)
                    hashCode = hashCode * 59 + this.StrainRateHardeningCoefficient.GetHashCode();
                if (this.ReferenceStrainRate != null)
                    hashCode = hashCode * 59 + this.ReferenceStrainRate.GetHashCode();
                if (this.ThermalSofteningEffect != null)
                    hashCode = hashCode * 59 + this.ThermalSofteningEffect.GetHashCode();
                if (this.ThermalSofteningExponent != null)
                    hashCode = hashCode * 59 + this.ThermalSofteningExponent.GetHashCode();
                if (this.ReferenceTemperatureJC != null)
                    hashCode = hashCode * 59 + this.ReferenceTemperatureJC.GetHashCode();
                if (this.MeltingTemperatureJC != null)
                    hashCode = hashCode * 59 + this.MeltingTemperatureJC.GetHashCode();
                return hashCode;
            }
        }

    }

}
