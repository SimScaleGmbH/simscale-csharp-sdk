/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// Permissions that the current user has on this Project. Each flag corresponds to a fine-grained action that a user may take.
    /// </summary>
    [DataContract]
    public partial class ProjectPermissions : IEquatable<ProjectPermissions>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectPermissions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public ProjectPermissions()
        {
        }
        
        /// <summary>
        /// Whether the current user can see basic details about this Project.
        /// </summary>
        /// <value>Whether the current user can see basic details about this Project.</value>
        [DataMember(Name="canPreviewProject", EmitDefaultValue=false)]
        public bool? CanPreviewProject { get; private set; }

        /// <summary>
        /// Whether the current user can open this Project.
        /// </summary>
        /// <value>Whether the current user can open this Project.</value>
        [DataMember(Name="canReadProject", EmitDefaultValue=false)]
        public bool? CanReadProject { get; private set; }

        /// <summary>
        /// Whether the current user can copy this Project.
        /// </summary>
        /// <value>Whether the current user can copy this Project.</value>
        [DataMember(Name="canCopyProject", EmitDefaultValue=false)]
        public bool? CanCopyProject { get; private set; }

        /// <summary>
        /// Whether the current user can edit this Project.
        /// </summary>
        /// <value>Whether the current user can edit this Project.</value>
        [DataMember(Name="canWriteProject", EmitDefaultValue=false)]
        public bool? CanWriteProject { get; private set; }

        /// <summary>
        /// Whether the current user can execute a billable action on this Project.
        /// </summary>
        /// <value>Whether the current user can execute a billable action on this Project.</value>
        [DataMember(Name="canExecuteProjectBillableAction", EmitDefaultValue=false)]
        public bool? CanExecuteProjectBillableAction { get; private set; }

        /// <summary>
        /// Whether the current user can manage this Project.
        /// </summary>
        /// <value>Whether the current user can manage this Project.</value>
        [DataMember(Name="canManageProject", EmitDefaultValue=false)]
        public bool? CanManageProject { get; private set; }

        /// <summary>
        /// Whether the current user can move this Project to their Personal Space.
        /// </summary>
        /// <value>Whether the current user can move this Project to their Personal Space.</value>
        [DataMember(Name="canMoveProjectToPersonalSpace", EmitDefaultValue=false)]
        public bool? CanMoveProjectToPersonalSpace { get; private set; }

        /// <summary>
        /// Whether the current user can see who has access to this Project.
        /// </summary>
        /// <value>Whether the current user can see who has access to this Project.</value>
        [DataMember(Name="canListProjectPermissions", EmitDefaultValue=false)]
        public bool? CanListProjectPermissions { get; private set; }

        /// <summary>
        /// Whether the current user can change who has access to this Project.
        /// </summary>
        /// <value>Whether the current user can change who has access to this Project.</value>
        [DataMember(Name="canEditProjectPermissions", EmitDefaultValue=false)]
        public bool? CanEditProjectPermissions { get; private set; }

        /// <summary>
        /// Whether the current user can share this project with users that have access to the Space.
        /// </summary>
        /// <value>Whether the current user can share this project with users that have access to the Space.</value>
        [DataMember(Name="canShareProjectWithSpaceMembers", EmitDefaultValue=false)]
        public bool? CanShareProjectWithSpaceMembers { get; private set; }

        /// <summary>
        /// Whether the current user can share this project with members of the Organization.
        /// </summary>
        /// <value>Whether the current user can share this project with members of the Organization.</value>
        [DataMember(Name="canShareProjectWithOrganizationMembers", EmitDefaultValue=false)]
        public bool? CanShareProjectWithOrganizationMembers { get; private set; }

        /// <summary>
        /// Whether the current user can share this project with any user of the platform.
        /// </summary>
        /// <value>Whether the current user can share this project with any user of the platform.</value>
        [DataMember(Name="canShareProjectWithAnyone", EmitDefaultValue=false)]
        public bool? CanShareProjectWithAnyone { get; private set; }

        /// <summary>
        /// Whether the current user can make this project public.
        /// </summary>
        /// <value>Whether the current user can make this project public.</value>
        [DataMember(Name="canMakeProjectPublic", EmitDefaultValue=false)]
        public bool? CanMakeProjectPublic { get; private set; }

        /// <summary>
        /// Whether the current user can delete this Project.
        /// </summary>
        /// <value>Whether the current user can delete this Project.</value>
        [DataMember(Name="canDeleteProject", EmitDefaultValue=false)]
        public bool? CanDeleteProject { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProjectPermissions {\n");
            sb.Append("  CanPreviewProject: ").Append(CanPreviewProject).Append("\n");
            sb.Append("  CanReadProject: ").Append(CanReadProject).Append("\n");
            sb.Append("  CanCopyProject: ").Append(CanCopyProject).Append("\n");
            sb.Append("  CanWriteProject: ").Append(CanWriteProject).Append("\n");
            sb.Append("  CanExecuteProjectBillableAction: ").Append(CanExecuteProjectBillableAction).Append("\n");
            sb.Append("  CanManageProject: ").Append(CanManageProject).Append("\n");
            sb.Append("  CanMoveProjectToPersonalSpace: ").Append(CanMoveProjectToPersonalSpace).Append("\n");
            sb.Append("  CanListProjectPermissions: ").Append(CanListProjectPermissions).Append("\n");
            sb.Append("  CanEditProjectPermissions: ").Append(CanEditProjectPermissions).Append("\n");
            sb.Append("  CanShareProjectWithSpaceMembers: ").Append(CanShareProjectWithSpaceMembers).Append("\n");
            sb.Append("  CanShareProjectWithOrganizationMembers: ").Append(CanShareProjectWithOrganizationMembers).Append("\n");
            sb.Append("  CanShareProjectWithAnyone: ").Append(CanShareProjectWithAnyone).Append("\n");
            sb.Append("  CanMakeProjectPublic: ").Append(CanMakeProjectPublic).Append("\n");
            sb.Append("  CanDeleteProject: ").Append(CanDeleteProject).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProjectPermissions);
        }

        /// <summary>
        /// Returns true if ProjectPermissions instances are equal
        /// </summary>
        /// <param name="input">Instance of ProjectPermissions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectPermissions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CanPreviewProject == input.CanPreviewProject ||
                    (this.CanPreviewProject != null &&
                    this.CanPreviewProject.Equals(input.CanPreviewProject))
                ) && 
                (
                    this.CanReadProject == input.CanReadProject ||
                    (this.CanReadProject != null &&
                    this.CanReadProject.Equals(input.CanReadProject))
                ) && 
                (
                    this.CanCopyProject == input.CanCopyProject ||
                    (this.CanCopyProject != null &&
                    this.CanCopyProject.Equals(input.CanCopyProject))
                ) && 
                (
                    this.CanWriteProject == input.CanWriteProject ||
                    (this.CanWriteProject != null &&
                    this.CanWriteProject.Equals(input.CanWriteProject))
                ) && 
                (
                    this.CanExecuteProjectBillableAction == input.CanExecuteProjectBillableAction ||
                    (this.CanExecuteProjectBillableAction != null &&
                    this.CanExecuteProjectBillableAction.Equals(input.CanExecuteProjectBillableAction))
                ) && 
                (
                    this.CanManageProject == input.CanManageProject ||
                    (this.CanManageProject != null &&
                    this.CanManageProject.Equals(input.CanManageProject))
                ) && 
                (
                    this.CanMoveProjectToPersonalSpace == input.CanMoveProjectToPersonalSpace ||
                    (this.CanMoveProjectToPersonalSpace != null &&
                    this.CanMoveProjectToPersonalSpace.Equals(input.CanMoveProjectToPersonalSpace))
                ) && 
                (
                    this.CanListProjectPermissions == input.CanListProjectPermissions ||
                    (this.CanListProjectPermissions != null &&
                    this.CanListProjectPermissions.Equals(input.CanListProjectPermissions))
                ) && 
                (
                    this.CanEditProjectPermissions == input.CanEditProjectPermissions ||
                    (this.CanEditProjectPermissions != null &&
                    this.CanEditProjectPermissions.Equals(input.CanEditProjectPermissions))
                ) && 
                (
                    this.CanShareProjectWithSpaceMembers == input.CanShareProjectWithSpaceMembers ||
                    (this.CanShareProjectWithSpaceMembers != null &&
                    this.CanShareProjectWithSpaceMembers.Equals(input.CanShareProjectWithSpaceMembers))
                ) && 
                (
                    this.CanShareProjectWithOrganizationMembers == input.CanShareProjectWithOrganizationMembers ||
                    (this.CanShareProjectWithOrganizationMembers != null &&
                    this.CanShareProjectWithOrganizationMembers.Equals(input.CanShareProjectWithOrganizationMembers))
                ) && 
                (
                    this.CanShareProjectWithAnyone == input.CanShareProjectWithAnyone ||
                    (this.CanShareProjectWithAnyone != null &&
                    this.CanShareProjectWithAnyone.Equals(input.CanShareProjectWithAnyone))
                ) && 
                (
                    this.CanMakeProjectPublic == input.CanMakeProjectPublic ||
                    (this.CanMakeProjectPublic != null &&
                    this.CanMakeProjectPublic.Equals(input.CanMakeProjectPublic))
                ) && 
                (
                    this.CanDeleteProject == input.CanDeleteProject ||
                    (this.CanDeleteProject != null &&
                    this.CanDeleteProject.Equals(input.CanDeleteProject))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CanPreviewProject != null)
                    hashCode = hashCode * 59 + this.CanPreviewProject.GetHashCode();
                if (this.CanReadProject != null)
                    hashCode = hashCode * 59 + this.CanReadProject.GetHashCode();
                if (this.CanCopyProject != null)
                    hashCode = hashCode * 59 + this.CanCopyProject.GetHashCode();
                if (this.CanWriteProject != null)
                    hashCode = hashCode * 59 + this.CanWriteProject.GetHashCode();
                if (this.CanExecuteProjectBillableAction != null)
                    hashCode = hashCode * 59 + this.CanExecuteProjectBillableAction.GetHashCode();
                if (this.CanManageProject != null)
                    hashCode = hashCode * 59 + this.CanManageProject.GetHashCode();
                if (this.CanMoveProjectToPersonalSpace != null)
                    hashCode = hashCode * 59 + this.CanMoveProjectToPersonalSpace.GetHashCode();
                if (this.CanListProjectPermissions != null)
                    hashCode = hashCode * 59 + this.CanListProjectPermissions.GetHashCode();
                if (this.CanEditProjectPermissions != null)
                    hashCode = hashCode * 59 + this.CanEditProjectPermissions.GetHashCode();
                if (this.CanShareProjectWithSpaceMembers != null)
                    hashCode = hashCode * 59 + this.CanShareProjectWithSpaceMembers.GetHashCode();
                if (this.CanShareProjectWithOrganizationMembers != null)
                    hashCode = hashCode * 59 + this.CanShareProjectWithOrganizationMembers.GetHashCode();
                if (this.CanShareProjectWithAnyone != null)
                    hashCode = hashCode * 59 + this.CanShareProjectWithAnyone.GetHashCode();
                if (this.CanMakeProjectPublic != null)
                    hashCode = hashCode * 59 + this.CanMakeProjectPublic.GetHashCode();
                if (this.CanDeleteProject != null)
                    hashCode = hashCode * 59 + this.CanDeleteProject.GetHashCode();
                return hashCode;
            }
        }

    }

}
