/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// An interval with the estimated cell count of the generated mesh.
    /// </summary>
    [DataContract]
    public partial class CellCount : IEquatable<CellCount>
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum CELLS for value: CELLS
            /// </summary>
            [EnumMember(Value = "CELLS")]
            CELLS = 1

        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CellCount" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public CellCount()
        {
        }
        
        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public long? Value { get; private set; }

        /// <summary>
        /// Gets or Sets IntervalMin
        /// </summary>
        [DataMember(Name="intervalMin", EmitDefaultValue=false)]
        public long? IntervalMin { get; private set; }

        /// <summary>
        /// Gets or Sets IntervalMax
        /// </summary>
        [DataMember(Name="intervalMax", EmitDefaultValue=false)]
        public long? IntervalMax { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CellCount {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  IntervalMin: ").Append(IntervalMin).Append("\n");
            sb.Append("  IntervalMax: ").Append(IntervalMax).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CellCount);
        }

        /// <summary>
        /// Returns true if CellCount instances are equal
        /// </summary>
        /// <param name="input">Instance of CellCount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CellCount input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.IntervalMin == input.IntervalMin ||
                    (this.IntervalMin != null &&
                    this.IntervalMin.Equals(input.IntervalMin))
                ) && 
                (
                    this.IntervalMax == input.IntervalMax ||
                    (this.IntervalMax != null &&
                    this.IntervalMax.Equals(input.IntervalMax))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.IntervalMin != null)
                    hashCode = hashCode * 59 + this.IntervalMin.GetHashCode();
                if (this.IntervalMax != null)
                    hashCode = hashCode * 59 + this.IntervalMax.GetHashCode();
                return hashCode;
            }
        }

    }

}
