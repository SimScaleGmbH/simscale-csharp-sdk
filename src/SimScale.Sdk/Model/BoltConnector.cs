/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// &lt;p&gt;Connect multiple bodies via a virtual bolt &lt;br /&gt;&lt;br /&gt;&lt;b&gt;Usage&lt;/b&gt;: &lt;br /&gt;&lt;ul&gt;&lt;li&gt;Define a separate bolt connector item for each virtual bolt&lt;/li&gt;&lt;li&gt;Assign entities must be coaxial&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Behavior&lt;/b&gt;:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Bolt connectors mimic physical bolts using beam formulations. Relative translations and rotations of the connected entities are computed based on the defined bolt mechanical properties&lt;/li&gt;&lt;li&gt;Ability to apply preload&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;
    /// </summary>
    [DataContract]
    public partial class BoltConnector : OneOfDynamicAnalysisConnectors, OneOfFrequencyAnalysisConnectors, OneOfHarmonicAnalysisConnectors, OneOfStaticAnalysisConnectors, IEquatable<BoltConnector>
    {
        /// <summary>
        /// &lt;p&gt;Select your desired type of fastener&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;Bolt and nut&lt;/b&gt; - a virtual connection between a bolt head and nut location&lt;/li&gt;&lt;li&gt;&lt;b&gt;Screw&lt;/b&gt; - a virtual connection between a screw head location and a cylindrical surface representing a threaded section&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;Select your desired type of fastener&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;Bolt and nut&lt;/b&gt; - a virtual connection between a bolt head and nut location&lt;/li&gt;&lt;li&gt;&lt;b&gt;Screw&lt;/b&gt; - a virtual connection between a screw head location and a cylindrical surface representing a threaded section&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BoltTypeEnum
        {
            /// <summary>
            /// Enum BOLTANDNUT for value: BOLT_AND_NUT
            /// </summary>
            [EnumMember(Value = "BOLT_AND_NUT")]
            BOLTANDNUT = 1,

            /// <summary>
            /// Enum SCREW for value: SCREW
            /// </summary>
            [EnumMember(Value = "SCREW")]
            SCREW = 2

        }

        /// <summary>
        /// &lt;p&gt;Select your desired type of fastener&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;Bolt and nut&lt;/b&gt; - a virtual connection between a bolt head and nut location&lt;/li&gt;&lt;li&gt;&lt;b&gt;Screw&lt;/b&gt; - a virtual connection between a screw head location and a cylindrical surface representing a threaded section&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;Select your desired type of fastener&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;Bolt and nut&lt;/b&gt; - a virtual connection between a bolt head and nut location&lt;/li&gt;&lt;li&gt;&lt;b&gt;Screw&lt;/b&gt; - a virtual connection between a screw head location and a cylindrical surface representing a threaded section&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;</value>
        [DataMember(Name="boltType", EmitDefaultValue=false)]
        public BoltTypeEnum? BoltType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BoltConnector" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BoltConnector() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BoltConnector" /> class.
        /// </summary>
        /// <param name="type">&lt;p&gt;Connect multiple bodies via a virtual bolt &lt;br /&gt;&lt;br /&gt;&lt;b&gt;Usage&lt;/b&gt;: &lt;br /&gt;&lt;ul&gt;&lt;li&gt;Define a separate bolt connector item for each virtual bolt&lt;/li&gt;&lt;li&gt;Assign entities must be coaxial&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Behavior&lt;/b&gt;:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Bolt connectors mimic physical bolts using beam formulations. Relative translations and rotations of the connected entities are computed based on the defined bolt mechanical properties&lt;/li&gt;&lt;li&gt;Ability to apply preload&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;  Schema name: BoltConnector (required) (default to &quot;BOLT_CONNECTOR&quot;).</param>
        /// <param name="name">name.</param>
        /// <param name="boltType">&lt;p&gt;Select your desired type of fastener&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;Bolt and nut&lt;/b&gt; - a virtual connection between a bolt head and nut location&lt;/li&gt;&lt;li&gt;&lt;b&gt;Screw&lt;/b&gt; - a virtual connection between a screw head location and a cylindrical surface representing a threaded section&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt; (default to BoltTypeEnum.BOLTANDNUT).</param>
        /// <param name="shankDiameter">shankDiameter.</param>
        /// <param name="mechanicalProperties">mechanicalProperties.</param>
        /// <param name="enableBoltPreload">Enable the definition of pretension within the virtual bolt. (default to false).</param>
        /// <param name="preload">preload.</param>
        /// <param name="advancedBoltSettings">advancedBoltSettings.</param>
        /// <param name="masterTopologicalReference">masterTopologicalReference.</param>
        /// <param name="slaveTopologicalReference">slaveTopologicalReference.</param>
        public BoltConnector(string type = "BOLT_CONNECTOR", string name = default(string), BoltTypeEnum? boltType = default(BoltTypeEnum?), DimensionalLength shankDiameter = default(DimensionalLength), BoltMechanicalProperties mechanicalProperties = default(BoltMechanicalProperties), bool? enableBoltPreload = default(bool?), ForcePreload preload = default(ForcePreload), AdvancedConnectorSettings advancedBoltSettings = default(AdvancedConnectorSettings), TopologicalReference masterTopologicalReference = default(TopologicalReference), TopologicalReference slaveTopologicalReference = default(TopologicalReference))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for BoltConnector and cannot be null");
            this.Name = name;
            this.BoltType = boltType;
            this.ShankDiameter = shankDiameter;
            this.MechanicalProperties = mechanicalProperties;
            this.EnableBoltPreload = enableBoltPreload;
            this.Preload = preload;
            this.AdvancedBoltSettings = advancedBoltSettings;
            this.MasterTopologicalReference = masterTopologicalReference;
            this.SlaveTopologicalReference = slaveTopologicalReference;
        }
        
        /// <summary>
        /// &lt;p&gt;Connect multiple bodies via a virtual bolt &lt;br /&gt;&lt;br /&gt;&lt;b&gt;Usage&lt;/b&gt;: &lt;br /&gt;&lt;ul&gt;&lt;li&gt;Define a separate bolt connector item for each virtual bolt&lt;/li&gt;&lt;li&gt;Assign entities must be coaxial&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Behavior&lt;/b&gt;:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Bolt connectors mimic physical bolts using beam formulations. Relative translations and rotations of the connected entities are computed based on the defined bolt mechanical properties&lt;/li&gt;&lt;li&gt;Ability to apply preload&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;  Schema name: BoltConnector
        /// </summary>
        /// <value>&lt;p&gt;Connect multiple bodies via a virtual bolt &lt;br /&gt;&lt;br /&gt;&lt;b&gt;Usage&lt;/b&gt;: &lt;br /&gt;&lt;ul&gt;&lt;li&gt;Define a separate bolt connector item for each virtual bolt&lt;/li&gt;&lt;li&gt;Assign entities must be coaxial&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Behavior&lt;/b&gt;:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Bolt connectors mimic physical bolts using beam formulations. Relative translations and rotations of the connected entities are computed based on the defined bolt mechanical properties&lt;/li&gt;&lt;li&gt;Ability to apply preload&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;  Schema name: BoltConnector</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ShankDiameter
        /// </summary>
        [DataMember(Name="shankDiameter", EmitDefaultValue=false)]
        public DimensionalLength ShankDiameter { get; set; }

        /// <summary>
        /// Gets or Sets MechanicalProperties
        /// </summary>
        [DataMember(Name="mechanicalProperties", EmitDefaultValue=false)]
        public BoltMechanicalProperties MechanicalProperties { get; set; }

        /// <summary>
        /// Enable the definition of pretension within the virtual bolt.
        /// </summary>
        /// <value>Enable the definition of pretension within the virtual bolt.</value>
        [DataMember(Name="enableBoltPreload", EmitDefaultValue=false)]
        public bool? EnableBoltPreload { get; set; }

        /// <summary>
        /// Gets or Sets Preload
        /// </summary>
        [DataMember(Name="preload", EmitDefaultValue=false)]
        public ForcePreload Preload { get; set; }

        /// <summary>
        /// Gets or Sets AdvancedBoltSettings
        /// </summary>
        [DataMember(Name="advancedBoltSettings", EmitDefaultValue=false)]
        public AdvancedConnectorSettings AdvancedBoltSettings { get; set; }

        /// <summary>
        /// Gets or Sets MasterTopologicalReference
        /// </summary>
        [DataMember(Name="masterTopologicalReference", EmitDefaultValue=false)]
        public TopologicalReference MasterTopologicalReference { get; set; }

        /// <summary>
        /// Gets or Sets SlaveTopologicalReference
        /// </summary>
        [DataMember(Name="slaveTopologicalReference", EmitDefaultValue=false)]
        public TopologicalReference SlaveTopologicalReference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BoltConnector {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  BoltType: ").Append(BoltType).Append("\n");
            sb.Append("  ShankDiameter: ").Append(ShankDiameter).Append("\n");
            sb.Append("  MechanicalProperties: ").Append(MechanicalProperties).Append("\n");
            sb.Append("  EnableBoltPreload: ").Append(EnableBoltPreload).Append("\n");
            sb.Append("  Preload: ").Append(Preload).Append("\n");
            sb.Append("  AdvancedBoltSettings: ").Append(AdvancedBoltSettings).Append("\n");
            sb.Append("  MasterTopologicalReference: ").Append(MasterTopologicalReference).Append("\n");
            sb.Append("  SlaveTopologicalReference: ").Append(SlaveTopologicalReference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BoltConnector);
        }

        /// <summary>
        /// Returns true if BoltConnector instances are equal
        /// </summary>
        /// <param name="input">Instance of BoltConnector to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BoltConnector input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.BoltType == input.BoltType ||
                    this.BoltType.Equals(input.BoltType)
                ) && 
                (
                    this.ShankDiameter == input.ShankDiameter ||
                    (this.ShankDiameter != null &&
                    this.ShankDiameter.Equals(input.ShankDiameter))
                ) && 
                (
                    this.MechanicalProperties == input.MechanicalProperties ||
                    (this.MechanicalProperties != null &&
                    this.MechanicalProperties.Equals(input.MechanicalProperties))
                ) && 
                (
                    this.EnableBoltPreload == input.EnableBoltPreload ||
                    (this.EnableBoltPreload != null &&
                    this.EnableBoltPreload.Equals(input.EnableBoltPreload))
                ) && 
                (
                    this.Preload == input.Preload ||
                    (this.Preload != null &&
                    this.Preload.Equals(input.Preload))
                ) && 
                (
                    this.AdvancedBoltSettings == input.AdvancedBoltSettings ||
                    (this.AdvancedBoltSettings != null &&
                    this.AdvancedBoltSettings.Equals(input.AdvancedBoltSettings))
                ) && 
                (
                    this.MasterTopologicalReference == input.MasterTopologicalReference ||
                    (this.MasterTopologicalReference != null &&
                    this.MasterTopologicalReference.Equals(input.MasterTopologicalReference))
                ) && 
                (
                    this.SlaveTopologicalReference == input.SlaveTopologicalReference ||
                    (this.SlaveTopologicalReference != null &&
                    this.SlaveTopologicalReference.Equals(input.SlaveTopologicalReference))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                hashCode = hashCode * 59 + this.BoltType.GetHashCode();
                if (this.ShankDiameter != null)
                    hashCode = hashCode * 59 + this.ShankDiameter.GetHashCode();
                if (this.MechanicalProperties != null)
                    hashCode = hashCode * 59 + this.MechanicalProperties.GetHashCode();
                if (this.EnableBoltPreload != null)
                    hashCode = hashCode * 59 + this.EnableBoltPreload.GetHashCode();
                if (this.Preload != null)
                    hashCode = hashCode * 59 + this.Preload.GetHashCode();
                if (this.AdvancedBoltSettings != null)
                    hashCode = hashCode * 59 + this.AdvancedBoltSettings.GetHashCode();
                if (this.MasterTopologicalReference != null)
                    hashCode = hashCode * 59 + this.MasterTopologicalReference.GetHashCode();
                if (this.SlaveTopologicalReference != null)
                    hashCode = hashCode * 59 + this.SlaveTopologicalReference.GetHashCode();
                return hashCode;
            }
        }

    }

}
