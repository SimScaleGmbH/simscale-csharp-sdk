/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// Choose between &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/materials/#newtonian-model&#39; target&#x3D;&#39;_blank&#39;&gt;Newtonian&lt;/a&gt; and &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/materials/non-newtonian-models/&#39; target&#x3D;&#39;_blank&#39;&gt;Non-Newtonian&lt;/a&gt; viscosity models.
    /// </summary>
    [DataContract]
    public partial class StandardHerschelBulkleyViscosityModel : OneOfIncompressibleMaterialViscosityModel, IEquatable<StandardHerschelBulkleyViscosityModel>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StandardHerschelBulkleyViscosityModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StandardHerschelBulkleyViscosityModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StandardHerschelBulkleyViscosityModel" /> class.
        /// </summary>
        /// <param name="type">Choose between &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/materials/#newtonian-model&#39; target&#x3D;&#39;_blank&#39;&gt;Newtonian&lt;/a&gt; and &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/materials/non-newtonian-models/&#39; target&#x3D;&#39;_blank&#39;&gt;Non-Newtonian&lt;/a&gt; viscosity models.  Schema name: StandardHerschelBulkleyViscosityModel (required) (default to &quot;STD_HERSCHEL_BULKLEY&quot;).</param>
        /// <param name="consistency">consistency.</param>
        /// <param name="flowIndex">flowIndex.</param>
        /// <param name="fluidYieldStress">fluidYieldStress.</param>
        /// <param name="criticalShearRate">criticalShearRate.</param>
        public StandardHerschelBulkleyViscosityModel(string type = "STD_HERSCHEL_BULKLEY", DimensionalDynamicViscosity consistency = default(DimensionalDynamicViscosity), DimensionalDimensionless flowIndex = default(DimensionalDimensionless), DimensionalPressure fluidYieldStress = default(DimensionalPressure), DimensionalStrainRate criticalShearRate = default(DimensionalStrainRate))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for StandardHerschelBulkleyViscosityModel and cannot be null");
            this.Consistency = consistency;
            this.FlowIndex = flowIndex;
            this.FluidYieldStress = fluidYieldStress;
            this.CriticalShearRate = criticalShearRate;
        }
        
        /// <summary>
        /// Choose between &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/materials/#newtonian-model&#39; target&#x3D;&#39;_blank&#39;&gt;Newtonian&lt;/a&gt; and &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/materials/non-newtonian-models/&#39; target&#x3D;&#39;_blank&#39;&gt;Non-Newtonian&lt;/a&gt; viscosity models.  Schema name: StandardHerschelBulkleyViscosityModel
        /// </summary>
        /// <value>Choose between &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/materials/#newtonian-model&#39; target&#x3D;&#39;_blank&#39;&gt;Newtonian&lt;/a&gt; and &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/materials/non-newtonian-models/&#39; target&#x3D;&#39;_blank&#39;&gt;Non-Newtonian&lt;/a&gt; viscosity models.  Schema name: StandardHerschelBulkleyViscosityModel</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Consistency
        /// </summary>
        [DataMember(Name="consistency", EmitDefaultValue=false)]
        public DimensionalDynamicViscosity Consistency { get; set; }

        /// <summary>
        /// Gets or Sets FlowIndex
        /// </summary>
        [DataMember(Name="flowIndex", EmitDefaultValue=false)]
        public DimensionalDimensionless FlowIndex { get; set; }

        /// <summary>
        /// Gets or Sets FluidYieldStress
        /// </summary>
        [DataMember(Name="fluidYieldStress", EmitDefaultValue=false)]
        public DimensionalPressure FluidYieldStress { get; set; }

        /// <summary>
        /// Gets or Sets CriticalShearRate
        /// </summary>
        [DataMember(Name="criticalShearRate", EmitDefaultValue=false)]
        public DimensionalStrainRate CriticalShearRate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StandardHerschelBulkleyViscosityModel {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Consistency: ").Append(Consistency).Append("\n");
            sb.Append("  FlowIndex: ").Append(FlowIndex).Append("\n");
            sb.Append("  FluidYieldStress: ").Append(FluidYieldStress).Append("\n");
            sb.Append("  CriticalShearRate: ").Append(CriticalShearRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StandardHerschelBulkleyViscosityModel);
        }

        /// <summary>
        /// Returns true if StandardHerschelBulkleyViscosityModel instances are equal
        /// </summary>
        /// <param name="input">Instance of StandardHerschelBulkleyViscosityModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StandardHerschelBulkleyViscosityModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Consistency == input.Consistency ||
                    (this.Consistency != null &&
                    this.Consistency.Equals(input.Consistency))
                ) && 
                (
                    this.FlowIndex == input.FlowIndex ||
                    (this.FlowIndex != null &&
                    this.FlowIndex.Equals(input.FlowIndex))
                ) && 
                (
                    this.FluidYieldStress == input.FluidYieldStress ||
                    (this.FluidYieldStress != null &&
                    this.FluidYieldStress.Equals(input.FluidYieldStress))
                ) && 
                (
                    this.CriticalShearRate == input.CriticalShearRate ||
                    (this.CriticalShearRate != null &&
                    this.CriticalShearRate.Equals(input.CriticalShearRate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Consistency != null)
                    hashCode = hashCode * 59 + this.Consistency.GetHashCode();
                if (this.FlowIndex != null)
                    hashCode = hashCode * 59 + this.FlowIndex.GetHashCode();
                if (this.FluidYieldStress != null)
                    hashCode = hashCode * 59 + this.FluidYieldStress.GetHashCode();
                if (this.CriticalShearRate != null)
                    hashCode = hashCode * 59 + this.CriticalShearRate.GetHashCode();
                return hashCode;
            }
        }

    }

}
