/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// SimmetrixMeshingElectromagnetics
    /// </summary>
    [DataContract]
    public partial class SimmetrixMeshingElectromagnetics : Algorithm, IEquatable<SimmetrixMeshingElectromagnetics>
    {
        /// <summary>
        /// &lt;p&gt;Selecting more processor cores might speed up the meshing process. Choosing a smaller computation instance will save core hours. &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/meshing/#number-of-processors&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;Selecting more processor cores might speed up the meshing process. Choosing a smaller computation instance will save core hours. &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/meshing/#number-of-processors&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.&lt;/p&gt;</value>
        public enum NumOfProcessorsEnum
        {
            /// <summary>
            /// Enum NUMBER_MINUS_1 for value: -1
            /// </summary>
            NUMBER_MINUS_1 = -1,

            /// <summary>
            /// Enum NUMBER_4 for value: 4
            /// </summary>
            NUMBER_4 = 4,

            /// <summary>
            /// Enum NUMBER_8 for value: 8
            /// </summary>
            NUMBER_8 = 8,

            /// <summary>
            /// Enum NUMBER_16 for value: 16
            /// </summary>
            NUMBER_16 = 16,

            /// <summary>
            /// Enum NUMBER_32 for value: 32
            /// </summary>
            NUMBER_32 = 32,

            /// <summary>
            /// Enum NUMBER_48 for value: 48
            /// </summary>
            NUMBER_48 = 48,

            /// <summary>
            /// Enum NUMBER_64 for value: 64
            /// </summary>
            NUMBER_64 = 64,

            /// <summary>
            /// Enum NUMBER_96 for value: 96
            /// </summary>
            NUMBER_96 = 96

        }

        /// <summary>
        /// &lt;p&gt;Selecting more processor cores might speed up the meshing process. Choosing a smaller computation instance will save core hours. &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/meshing/#number-of-processors&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;Selecting more processor cores might speed up the meshing process. Choosing a smaller computation instance will save core hours. &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/meshing/#number-of-processors&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.&lt;/p&gt;</value>
        [DataMember(Name="numOfProcessors", EmitDefaultValue=false)]
        public NumOfProcessorsEnum? NumOfProcessors { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SimmetrixMeshingElectromagnetics" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SimmetrixMeshingElectromagnetics() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SimmetrixMeshingElectromagnetics" /> class.
        /// </summary>
        /// <param name="type">Schema name: SimmetrixMeshingElectromagnetics (required) (default to &quot;SIMMETRIX_MESHING_ELECTROMAGNETICS&quot;).</param>
        /// <param name="sizing">sizing.</param>
        /// <param name="refinements">refinements.</param>
        /// <param name="numOfProcessors">&lt;p&gt;Selecting more processor cores might speed up the meshing process. Choosing a smaller computation instance will save core hours. &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/meshing/#number-of-processors&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.&lt;/p&gt; (default to NumOfProcessorsEnum.NUMBER_MINUS_1).</param>
        /// <param name="maxMeshingRunTime">maxMeshingRunTime.</param>
        /// <param name="advancedSimmetrixSettings">advancedSimmetrixSettings.</param>
        public SimmetrixMeshingElectromagnetics(string type = "SIMMETRIX_MESHING_ELECTROMAGNETICS", OneOfSimmetrixMeshingElectromagneticsSizing sizing = default(OneOfSimmetrixMeshingElectromagneticsSizing), List<OneOfSimmetrixMeshingElectromagneticsRefinements> refinements = default(List<OneOfSimmetrixMeshingElectromagneticsRefinements>), NumOfProcessorsEnum? numOfProcessors = default(NumOfProcessorsEnum?), DimensionalTime maxMeshingRunTime = default(DimensionalTime), AdvancedSimmetrixEmSettings advancedSimmetrixSettings = default(AdvancedSimmetrixEmSettings))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for SimmetrixMeshingElectromagnetics and cannot be null");
            this.Sizing = sizing;
            this.Refinements = refinements;
            this.NumOfProcessors = numOfProcessors;
            this.MaxMeshingRunTime = maxMeshingRunTime;
            this.AdvancedSimmetrixSettings = advancedSimmetrixSettings;
        }
        
        /// <summary>
        /// Schema name: SimmetrixMeshingElectromagnetics
        /// </summary>
        /// <value>Schema name: SimmetrixMeshingElectromagnetics</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Sizing
        /// </summary>
        [DataMember(Name="sizing", EmitDefaultValue=false)]
        public OneOfSimmetrixMeshingElectromagneticsSizing Sizing { get; set; }

        /// <summary>
        /// Gets or Sets Refinements
        /// </summary>
        [DataMember(Name="refinements", EmitDefaultValue=false)]
        public List<OneOfSimmetrixMeshingElectromagneticsRefinements> Refinements { get; set; }

        /// <summary>
        /// Gets or Sets MaxMeshingRunTime
        /// </summary>
        [DataMember(Name="maxMeshingRunTime", EmitDefaultValue=false)]
        public DimensionalTime MaxMeshingRunTime { get; set; }

        /// <summary>
        /// Gets or Sets AdvancedSimmetrixSettings
        /// </summary>
        [DataMember(Name="advancedSimmetrixSettings", EmitDefaultValue=false)]
        public AdvancedSimmetrixEmSettings AdvancedSimmetrixSettings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SimmetrixMeshingElectromagnetics {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Sizing: ").Append(Sizing).Append("\n");
            sb.Append("  Refinements: ").Append(Refinements).Append("\n");
            sb.Append("  NumOfProcessors: ").Append(NumOfProcessors).Append("\n");
            sb.Append("  MaxMeshingRunTime: ").Append(MaxMeshingRunTime).Append("\n");
            sb.Append("  AdvancedSimmetrixSettings: ").Append(AdvancedSimmetrixSettings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SimmetrixMeshingElectromagnetics);
        }

        /// <summary>
        /// Returns true if SimmetrixMeshingElectromagnetics instances are equal
        /// </summary>
        /// <param name="input">Instance of SimmetrixMeshingElectromagnetics to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SimmetrixMeshingElectromagnetics input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Sizing == input.Sizing ||
                    (this.Sizing != null &&
                    this.Sizing.Equals(input.Sizing))
                ) && 
                (
                    this.Refinements == input.Refinements ||
                    this.Refinements != null &&
                    input.Refinements != null &&
                    this.Refinements.SequenceEqual(input.Refinements)
                ) && 
                (
                    this.NumOfProcessors == input.NumOfProcessors ||
                    this.NumOfProcessors.Equals(input.NumOfProcessors)
                ) && 
                (
                    this.MaxMeshingRunTime == input.MaxMeshingRunTime ||
                    (this.MaxMeshingRunTime != null &&
                    this.MaxMeshingRunTime.Equals(input.MaxMeshingRunTime))
                ) && 
                (
                    this.AdvancedSimmetrixSettings == input.AdvancedSimmetrixSettings ||
                    (this.AdvancedSimmetrixSettings != null &&
                    this.AdvancedSimmetrixSettings.Equals(input.AdvancedSimmetrixSettings))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Sizing != null)
                    hashCode = hashCode * 59 + this.Sizing.GetHashCode();
                if (this.Refinements != null)
                    hashCode = hashCode * 59 + this.Refinements.GetHashCode();
                hashCode = hashCode * 59 + this.NumOfProcessors.GetHashCode();
                if (this.MaxMeshingRunTime != null)
                    hashCode = hashCode * 59 + this.MaxMeshingRunTime.GetHashCode();
                if (this.AdvancedSimmetrixSettings != null)
                    hashCode = hashCode * 59 + this.AdvancedSimmetrixSettings.GetHashCode();
                return hashCode;
            }
        }

    }

}
