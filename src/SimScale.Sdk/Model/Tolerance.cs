/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// Tolerance
    /// </summary>
    [DataContract]
    public partial class Tolerance : IEquatable<Tolerance>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Tolerance" /> class.
        /// </summary>
        /// <param name="absoluteTolerance">Absolute tolerance is the measure of residual in the solution after the current iteration is solved. The solution is stopped when the absolute residual falls below this value. (default to 0.000010M).</param>
        /// <param name="relativeTolerance">Relative tolerance is the ratio of current residual to the initial residual. The solution is stopped when the relative residual falls below this value. (default to 0.01M).</param>
        public Tolerance(decimal? absoluteTolerance = default(decimal?), decimal? relativeTolerance = default(decimal?))
        {
            this.AbsoluteTolerance = absoluteTolerance;
            this.RelativeTolerance = relativeTolerance;
        }
        
        /// <summary>
        /// Absolute tolerance is the measure of residual in the solution after the current iteration is solved. The solution is stopped when the absolute residual falls below this value.
        /// </summary>
        /// <value>Absolute tolerance is the measure of residual in the solution after the current iteration is solved. The solution is stopped when the absolute residual falls below this value.</value>
        [DataMember(Name="absoluteTolerance", EmitDefaultValue=false)]
        public decimal? AbsoluteTolerance { get; set; }

        /// <summary>
        /// Relative tolerance is the ratio of current residual to the initial residual. The solution is stopped when the relative residual falls below this value.
        /// </summary>
        /// <value>Relative tolerance is the ratio of current residual to the initial residual. The solution is stopped when the relative residual falls below this value.</value>
        [DataMember(Name="relativeTolerance", EmitDefaultValue=false)]
        public decimal? RelativeTolerance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Tolerance {\n");
            sb.Append("  AbsoluteTolerance: ").Append(AbsoluteTolerance).Append("\n");
            sb.Append("  RelativeTolerance: ").Append(RelativeTolerance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Tolerance);
        }

        /// <summary>
        /// Returns true if Tolerance instances are equal
        /// </summary>
        /// <param name="input">Instance of Tolerance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Tolerance input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AbsoluteTolerance == input.AbsoluteTolerance ||
                    (this.AbsoluteTolerance != null &&
                    this.AbsoluteTolerance.Equals(input.AbsoluteTolerance))
                ) && 
                (
                    this.RelativeTolerance == input.RelativeTolerance ||
                    (this.RelativeTolerance != null &&
                    this.RelativeTolerance.Equals(input.RelativeTolerance))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AbsoluteTolerance != null)
                    hashCode = hashCode * 59 + this.AbsoluteTolerance.GetHashCode();
                if (this.RelativeTolerance != null)
                    hashCode = hashCode * 59 + this.RelativeTolerance.GetHashCode();
                return hashCode;
            }
        }

    }

}
