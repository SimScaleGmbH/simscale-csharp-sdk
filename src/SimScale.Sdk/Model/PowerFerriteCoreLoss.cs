/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// PowerFerriteCoreLoss
    /// </summary>
    [DataContract]
    public partial class PowerFerriteCoreLoss : OneOfElectromagneticMaterialCoreLossesType, IEquatable<PowerFerriteCoreLoss>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PowerFerriteCoreLoss" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PowerFerriteCoreLoss() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PowerFerriteCoreLoss" /> class.
        /// </summary>
        /// <param name="type">Schema name: PowerFerriteCoreLoss (required) (default to &quot;POWER_FERRITE&quot;).</param>
        /// <param name="steinmetzConstant">steinmetzConstant.</param>
        /// <param name="frequencyExponent">frequencyExponent.</param>
        /// <param name="fluxDensityExponent">fluxDensityExponent.</param>
        public PowerFerriteCoreLoss(string type = "POWER_FERRITE", decimal? steinmetzConstant = default(decimal?), decimal? frequencyExponent = default(decimal?), decimal? fluxDensityExponent = default(decimal?))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for PowerFerriteCoreLoss and cannot be null");
            this.SteinmetzConstant = steinmetzConstant;
            this.FrequencyExponent = frequencyExponent;
            this.FluxDensityExponent = fluxDensityExponent;
        }
        
        /// <summary>
        /// Schema name: PowerFerriteCoreLoss
        /// </summary>
        /// <value>Schema name: PowerFerriteCoreLoss</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets SteinmetzConstant
        /// </summary>
        [DataMember(Name="steinmetzConstant", EmitDefaultValue=false)]
        public decimal? SteinmetzConstant { get; set; }

        /// <summary>
        /// Gets or Sets FrequencyExponent
        /// </summary>
        [DataMember(Name="frequencyExponent", EmitDefaultValue=false)]
        public decimal? FrequencyExponent { get; set; }

        /// <summary>
        /// Gets or Sets FluxDensityExponent
        /// </summary>
        [DataMember(Name="fluxDensityExponent", EmitDefaultValue=false)]
        public decimal? FluxDensityExponent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PowerFerriteCoreLoss {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SteinmetzConstant: ").Append(SteinmetzConstant).Append("\n");
            sb.Append("  FrequencyExponent: ").Append(FrequencyExponent).Append("\n");
            sb.Append("  FluxDensityExponent: ").Append(FluxDensityExponent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PowerFerriteCoreLoss);
        }

        /// <summary>
        /// Returns true if PowerFerriteCoreLoss instances are equal
        /// </summary>
        /// <param name="input">Instance of PowerFerriteCoreLoss to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PowerFerriteCoreLoss input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.SteinmetzConstant == input.SteinmetzConstant ||
                    (this.SteinmetzConstant != null &&
                    this.SteinmetzConstant.Equals(input.SteinmetzConstant))
                ) && 
                (
                    this.FrequencyExponent == input.FrequencyExponent ||
                    (this.FrequencyExponent != null &&
                    this.FrequencyExponent.Equals(input.FrequencyExponent))
                ) && 
                (
                    this.FluxDensityExponent == input.FluxDensityExponent ||
                    (this.FluxDensityExponent != null &&
                    this.FluxDensityExponent.Equals(input.FluxDensityExponent))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.SteinmetzConstant != null)
                    hashCode = hashCode * 59 + this.SteinmetzConstant.GetHashCode();
                if (this.FrequencyExponent != null)
                    hashCode = hashCode * 59 + this.FrequencyExponent.GetHashCode();
                if (this.FluxDensityExponent != null)
                    hashCode = hashCode * 59 + this.FluxDensityExponent.GetHashCode();
                return hashCode;
            }
        }

    }

}
