/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// GaussLinearLimitedCorrectedLaplacianScheme
    /// </summary>
    [DataContract]
    public partial class GaussLinearLimitedCorrectedLaplacianScheme : OneOfLaplacianSchemesForDefault, OneOfLaplacianSchemesLaplacian1AUPressure, OneOfLaplacianSchemesLaplacianAlphaEffEnthalpy, OneOfLaplacianSchemesLaplacianAlphaEffInternalEnergy, OneOfLaplacianSchemesLaplacianAlphaEffTemperature, OneOfLaplacianSchemesLaplacianAlphaEnthalpy, OneOfLaplacianSchemesLaplacianDREffR, OneOfLaplacianSchemesLaplacianDTPassiveScalar, OneOfLaplacianSchemesLaplacianDepsilonEffEpsilonDissipationRate, OneOfLaplacianSchemesLaplacianDkEffTurbulentKineticEnergy, OneOfLaplacianSchemesLaplacianDnuTildaEffNuTilda, OneOfLaplacianSchemesLaplacianDomegaEffOmegaDissipationRate, OneOfLaplacianSchemesLaplacianDpPressure, OneOfLaplacianSchemesLaplacianMuEffVelocity, OneOfLaplacianSchemesLaplacianMutVelocity, OneOfLaplacianSchemesLaplacianNuEffVelocity, OneOfLaplacianSchemesLaplacianNuVelocity, OneOfLaplacianSchemesLaplacianRAUfPressure, OneOfLaplacianSchemesLaplacianRAUfPressureRgh, OneOfLaplacianSchemesLaplacianRho1AUPressure, OneOfLaplacianSchemesLaplacianRhorAUfPressure, OneOfLaplacianSchemesLaplacianRhorAUfPressureRgh, IEquatable<GaussLinearLimitedCorrectedLaplacianScheme>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GaussLinearLimitedCorrectedLaplacianScheme" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GaussLinearLimitedCorrectedLaplacianScheme() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GaussLinearLimitedCorrectedLaplacianScheme" /> class.
        /// </summary>
        /// <param name="type">Schema name: GaussLinearLimitedCorrectedLaplacianScheme (required) (default to &quot;GAUSS_LINEAR_LIMITED_CORRECTED&quot;).</param>
        /// <param name="limiterCoefficient">This property defines a limiter coefficient for the scheme:&lt;ul&gt;&lt;li&gt;&lt;strong&gt;0&lt;/strong&gt;: no correction, equivalent to the uncorrected scheme&lt;/li&gt;&lt;li&gt;&lt;strong&gt;1&lt;/strong&gt;: full non-orthogonal correction applied&lt;/li&gt;&lt;li&gt;&lt;strong&gt;0.5&lt;/strong&gt;: non-orthogonal contribution does not exceed the orthogonal part&lt;/li&gt;&lt;/ul&gt; (default to 0.5M).</param>
        public GaussLinearLimitedCorrectedLaplacianScheme(string type = "GAUSS_LINEAR_LIMITED_CORRECTED", decimal? limiterCoefficient = default(decimal?))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for GaussLinearLimitedCorrectedLaplacianScheme and cannot be null");
            this.LimiterCoefficient = limiterCoefficient;
        }
        
        /// <summary>
        /// Schema name: GaussLinearLimitedCorrectedLaplacianScheme
        /// </summary>
        /// <value>Schema name: GaussLinearLimitedCorrectedLaplacianScheme</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// This property defines a limiter coefficient for the scheme:&lt;ul&gt;&lt;li&gt;&lt;strong&gt;0&lt;/strong&gt;: no correction, equivalent to the uncorrected scheme&lt;/li&gt;&lt;li&gt;&lt;strong&gt;1&lt;/strong&gt;: full non-orthogonal correction applied&lt;/li&gt;&lt;li&gt;&lt;strong&gt;0.5&lt;/strong&gt;: non-orthogonal contribution does not exceed the orthogonal part&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>This property defines a limiter coefficient for the scheme:&lt;ul&gt;&lt;li&gt;&lt;strong&gt;0&lt;/strong&gt;: no correction, equivalent to the uncorrected scheme&lt;/li&gt;&lt;li&gt;&lt;strong&gt;1&lt;/strong&gt;: full non-orthogonal correction applied&lt;/li&gt;&lt;li&gt;&lt;strong&gt;0.5&lt;/strong&gt;: non-orthogonal contribution does not exceed the orthogonal part&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="limiterCoefficient", EmitDefaultValue=false)]
        public decimal? LimiterCoefficient { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GaussLinearLimitedCorrectedLaplacianScheme {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  LimiterCoefficient: ").Append(LimiterCoefficient).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GaussLinearLimitedCorrectedLaplacianScheme);
        }

        /// <summary>
        /// Returns true if GaussLinearLimitedCorrectedLaplacianScheme instances are equal
        /// </summary>
        /// <param name="input">Instance of GaussLinearLimitedCorrectedLaplacianScheme to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GaussLinearLimitedCorrectedLaplacianScheme input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.LimiterCoefficient == input.LimiterCoefficient ||
                    (this.LimiterCoefficient != null &&
                    this.LimiterCoefficient.Equals(input.LimiterCoefficient))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.LimiterCoefficient != null)
                    hashCode = hashCode * 59 + this.LimiterCoefficient.GetHashCode();
                return hashCode;
            }
        }

    }

}
