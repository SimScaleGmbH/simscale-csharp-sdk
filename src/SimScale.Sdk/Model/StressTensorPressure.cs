/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// StressTensorPressure
    /// </summary>
    [DataContract]
    public partial class StressTensorPressure : IEquatable<StressTensorPressure>
    {
        /// <summary>
        /// Defines Unit
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UnitEnum
        {
            /// <summary>
            /// Enum Pa for value: Pa
            /// </summary>
            [EnumMember(Value = "Pa")]
            Pa = 1,

            /// <summary>
            /// Enum LbfIn for value: lbf/in²
            /// </summary>
            [EnumMember(Value = "lbf/in²")]
            LbfIn = 2,

            /// <summary>
            /// Enum HPa for value: hPa
            /// </summary>
            [EnumMember(Value = "hPa")]
            HPa = 3,

            /// <summary>
            /// Enum KPa for value: kPa
            /// </summary>
            [EnumMember(Value = "kPa")]
            KPa = 4,

            /// <summary>
            /// Enum MPa for value: MPa
            /// </summary>
            [EnumMember(Value = "MPa")]
            MPa = 5,

            /// <summary>
            /// Enum Atm for value: atm
            /// </summary>
            [EnumMember(Value = "atm")]
            Atm = 6,

            /// <summary>
            /// Enum Mbar for value: mbar
            /// </summary>
            [EnumMember(Value = "mbar")]
            Mbar = 7,

            /// <summary>
            /// Enum Bar for value: bar
            /// </summary>
            [EnumMember(Value = "bar")]
            Bar = 8,

            /// <summary>
            /// Enum MH2O for value: mH2O
            /// </summary>
            [EnumMember(Value = "mH2O")]
            MH2O = 9,

            /// <summary>
            /// Enum MmH2O for value: mmH2O
            /// </summary>
            [EnumMember(Value = "mmH2O")]
            MmH2O = 10,

            /// <summary>
            /// Enum MmHg for value: mmHg
            /// </summary>
            [EnumMember(Value = "mmHg")]
            MmHg = 11,

            /// <summary>
            /// Enum DyneCm for value: dyne/cm²
            /// </summary>
            [EnumMember(Value = "dyne/cm²")]
            DyneCm = 12,

            /// <summary>
            /// Enum InH2O for value: inH2O
            /// </summary>
            [EnumMember(Value = "inH2O")]
            InH2O = 13,

            /// <summary>
            /// Enum FtH2O for value: ftH2O
            /// </summary>
            [EnumMember(Value = "ftH2O")]
            FtH2O = 14,

            /// <summary>
            /// Enum InHg for value: inHg
            /// </summary>
            [EnumMember(Value = "inHg")]
            InHg = 15,

            /// <summary>
            /// Enum Psf for value: psf
            /// </summary>
            [EnumMember(Value = "psf")]
            Psf = 16

        }

        /// <summary>
        /// Gets or Sets Unit
        /// </summary>
        [DataMember(Name="unit", EmitDefaultValue=false)]
        public UnitEnum Unit { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StressTensorPressure" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StressTensorPressure() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StressTensorPressure" /> class.
        /// </summary>
        /// <param name="sigmaXX">sigmaXX.</param>
        /// <param name="sigmaYY">sigmaYY.</param>
        /// <param name="sigmaZZ">sigmaZZ.</param>
        /// <param name="sigmaYZ">sigmaYZ.</param>
        /// <param name="sigmaXZ">sigmaXZ.</param>
        /// <param name="sigmaXY">sigmaXY.</param>
        /// <param name="unit">unit (required).</param>
        public StressTensorPressure(OneOfStressTensorPressureSigmaXX sigmaXX = default(OneOfStressTensorPressureSigmaXX), OneOfStressTensorPressureSigmaYY sigmaYY = default(OneOfStressTensorPressureSigmaYY), OneOfStressTensorPressureSigmaZZ sigmaZZ = default(OneOfStressTensorPressureSigmaZZ), OneOfStressTensorPressureSigmaYZ sigmaYZ = default(OneOfStressTensorPressureSigmaYZ), OneOfStressTensorPressureSigmaXZ sigmaXZ = default(OneOfStressTensorPressureSigmaXZ), OneOfStressTensorPressureSigmaXY sigmaXY = default(OneOfStressTensorPressureSigmaXY), UnitEnum unit = default(UnitEnum))
        {
            this.Unit = unit;
            this.SigmaXX = sigmaXX;
            this.SigmaYY = sigmaYY;
            this.SigmaZZ = sigmaZZ;
            this.SigmaYZ = sigmaYZ;
            this.SigmaXZ = sigmaXZ;
            this.SigmaXY = sigmaXY;
        }
        
        /// <summary>
        /// Gets or Sets SigmaXX
        /// </summary>
        [DataMember(Name="sigmaXX", EmitDefaultValue=false)]
        public OneOfStressTensorPressureSigmaXX SigmaXX { get; set; }

        /// <summary>
        /// Gets or Sets SigmaYY
        /// </summary>
        [DataMember(Name="sigmaYY", EmitDefaultValue=false)]
        public OneOfStressTensorPressureSigmaYY SigmaYY { get; set; }

        /// <summary>
        /// Gets or Sets SigmaZZ
        /// </summary>
        [DataMember(Name="sigmaZZ", EmitDefaultValue=false)]
        public OneOfStressTensorPressureSigmaZZ SigmaZZ { get; set; }

        /// <summary>
        /// Gets or Sets SigmaYZ
        /// </summary>
        [DataMember(Name="sigmaYZ", EmitDefaultValue=false)]
        public OneOfStressTensorPressureSigmaYZ SigmaYZ { get; set; }

        /// <summary>
        /// Gets or Sets SigmaXZ
        /// </summary>
        [DataMember(Name="sigmaXZ", EmitDefaultValue=false)]
        public OneOfStressTensorPressureSigmaXZ SigmaXZ { get; set; }

        /// <summary>
        /// Gets or Sets SigmaXY
        /// </summary>
        [DataMember(Name="sigmaXY", EmitDefaultValue=false)]
        public OneOfStressTensorPressureSigmaXY SigmaXY { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StressTensorPressure {\n");
            sb.Append("  SigmaXX: ").Append(SigmaXX).Append("\n");
            sb.Append("  SigmaYY: ").Append(SigmaYY).Append("\n");
            sb.Append("  SigmaZZ: ").Append(SigmaZZ).Append("\n");
            sb.Append("  SigmaYZ: ").Append(SigmaYZ).Append("\n");
            sb.Append("  SigmaXZ: ").Append(SigmaXZ).Append("\n");
            sb.Append("  SigmaXY: ").Append(SigmaXY).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StressTensorPressure);
        }

        /// <summary>
        /// Returns true if StressTensorPressure instances are equal
        /// </summary>
        /// <param name="input">Instance of StressTensorPressure to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StressTensorPressure input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SigmaXX == input.SigmaXX ||
                    (this.SigmaXX != null &&
                    this.SigmaXX.Equals(input.SigmaXX))
                ) && 
                (
                    this.SigmaYY == input.SigmaYY ||
                    (this.SigmaYY != null &&
                    this.SigmaYY.Equals(input.SigmaYY))
                ) && 
                (
                    this.SigmaZZ == input.SigmaZZ ||
                    (this.SigmaZZ != null &&
                    this.SigmaZZ.Equals(input.SigmaZZ))
                ) && 
                (
                    this.SigmaYZ == input.SigmaYZ ||
                    (this.SigmaYZ != null &&
                    this.SigmaYZ.Equals(input.SigmaYZ))
                ) && 
                (
                    this.SigmaXZ == input.SigmaXZ ||
                    (this.SigmaXZ != null &&
                    this.SigmaXZ.Equals(input.SigmaXZ))
                ) && 
                (
                    this.SigmaXY == input.SigmaXY ||
                    (this.SigmaXY != null &&
                    this.SigmaXY.Equals(input.SigmaXY))
                ) && 
                (
                    this.Unit == input.Unit ||
                    this.Unit.Equals(input.Unit)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SigmaXX != null)
                    hashCode = hashCode * 59 + this.SigmaXX.GetHashCode();
                if (this.SigmaYY != null)
                    hashCode = hashCode * 59 + this.SigmaYY.GetHashCode();
                if (this.SigmaZZ != null)
                    hashCode = hashCode * 59 + this.SigmaZZ.GetHashCode();
                if (this.SigmaYZ != null)
                    hashCode = hashCode * 59 + this.SigmaYZ.GetHashCode();
                if (this.SigmaXZ != null)
                    hashCode = hashCode * 59 + this.SigmaXZ.GetHashCode();
                if (this.SigmaXY != null)
                    hashCode = hashCode * 59 + this.SigmaXY.GetHashCode();
                hashCode = hashCode * 59 + this.Unit.GetHashCode();
                return hashCode;
            }
        }

    }

}
