/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// ConstantContactAnglePFBC
    /// </summary>
    [DataContract]
    public partial class ConstantContactAnglePFBC : OneOfCustomFluidBCPhaseFraction, OneOfWallBCPhaseFraction, IEquatable<ConstantContactAnglePFBC>
    {
        /// <summary>
        /// Defines Limit
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LimitEnum
        {
            /// <summary>
            /// Enum GRADIENT for value: GRADIENT
            /// </summary>
            [EnumMember(Value = "GRADIENT")]
            GRADIENT = 1,

            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 2,

            /// <summary>
            /// Enum PHASEFRACTION for value: PHASE_FRACTION
            /// </summary>
            [EnumMember(Value = "PHASE_FRACTION")]
            PHASEFRACTION = 3,

            /// <summary>
            /// Enum ZEROGRADIENT for value: ZERO_GRADIENT
            /// </summary>
            [EnumMember(Value = "ZERO_GRADIENT")]
            ZEROGRADIENT = 4

        }

        /// <summary>
        /// Gets or Sets Limit
        /// </summary>
        [DataMember(Name="limit", EmitDefaultValue=false)]
        public LimitEnum? Limit { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConstantContactAnglePFBC" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConstantContactAnglePFBC() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConstantContactAnglePFBC" /> class.
        /// </summary>
        /// <param name="type">Schema name: ConstantContactAnglePFBC (required) (default to &quot;CONSTANT_CONTACT_ANGLE&quot;).</param>
        /// <param name="equilibriumContactAngle">equilibriumContactAngle.</param>
        /// <param name="limit">limit (default to LimitEnum.NONE).</param>
        public ConstantContactAnglePFBC(string type = "CONSTANT_CONTACT_ANGLE", DimensionalAngle equilibriumContactAngle = default(DimensionalAngle), LimitEnum? limit = default(LimitEnum?))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for ConstantContactAnglePFBC and cannot be null");
            this.EquilibriumContactAngle = equilibriumContactAngle;
            this.Limit = limit;
        }
        
        /// <summary>
        /// Schema name: ConstantContactAnglePFBC
        /// </summary>
        /// <value>Schema name: ConstantContactAnglePFBC</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets EquilibriumContactAngle
        /// </summary>
        [DataMember(Name="equilibriumContactAngle", EmitDefaultValue=false)]
        public DimensionalAngle EquilibriumContactAngle { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConstantContactAnglePFBC {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  EquilibriumContactAngle: ").Append(EquilibriumContactAngle).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConstantContactAnglePFBC);
        }

        /// <summary>
        /// Returns true if ConstantContactAnglePFBC instances are equal
        /// </summary>
        /// <param name="input">Instance of ConstantContactAnglePFBC to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConstantContactAnglePFBC input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.EquilibriumContactAngle == input.EquilibriumContactAngle ||
                    (this.EquilibriumContactAngle != null &&
                    this.EquilibriumContactAngle.Equals(input.EquilibriumContactAngle))
                ) && 
                (
                    this.Limit == input.Limit ||
                    this.Limit.Equals(input.Limit)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.EquilibriumContactAngle != null)
                    hashCode = hashCode * 59 + this.EquilibriumContactAngle.GetHashCode();
                hashCode = hashCode * 59 + this.Limit.GetHashCode();
                return hashCode;
            }
        }

    }

}
