/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// ClosedCoil
    /// </summary>
    [DataContract]
    public partial class ClosedCoil : OneOfCoilTopology, IEquatable<ClosedCoil>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClosedCoil" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ClosedCoil() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ClosedCoil" /> class.
        /// </summary>
        /// <param name="type">Schema name: ClosedCoil (required) (default to &quot;CLOSED_COIL&quot;).</param>
        /// <param name="bodies">bodies.</param>
        /// <param name="internalPort">internalPort.</param>
        public ClosedCoil(string type = "CLOSED_COIL", TopologicalReference bodies = default(TopologicalReference), TopologicalReference internalPort = default(TopologicalReference))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for ClosedCoil and cannot be null");
            this.Bodies = bodies;
            this.InternalPort = internalPort;
        }
        
        /// <summary>
        /// Schema name: ClosedCoil
        /// </summary>
        /// <value>Schema name: ClosedCoil</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Bodies
        /// </summary>
        [DataMember(Name="bodies", EmitDefaultValue=false)]
        public TopologicalReference Bodies { get; set; }

        /// <summary>
        /// Gets or Sets InternalPort
        /// </summary>
        [DataMember(Name="internalPort", EmitDefaultValue=false)]
        public TopologicalReference InternalPort { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClosedCoil {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Bodies: ").Append(Bodies).Append("\n");
            sb.Append("  InternalPort: ").Append(InternalPort).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ClosedCoil);
        }

        /// <summary>
        /// Returns true if ClosedCoil instances are equal
        /// </summary>
        /// <param name="input">Instance of ClosedCoil to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClosedCoil input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Bodies == input.Bodies ||
                    (this.Bodies != null &&
                    this.Bodies.Equals(input.Bodies))
                ) && 
                (
                    this.InternalPort == input.InternalPort ||
                    (this.InternalPort != null &&
                    this.InternalPort.Equals(input.InternalPort))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Bodies != null)
                    hashCode = hashCode * 59 + this.Bodies.GetHashCode();
                if (this.InternalPort != null)
                    hashCode = hashCode * 59 + this.InternalPort.GetHashCode();
                return hashCode;
            }
        }

    }

}
