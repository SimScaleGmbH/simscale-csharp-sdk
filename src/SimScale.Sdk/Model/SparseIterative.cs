/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// SparseIterative
    /// </summary>
    [DataContract]
    public partial class SparseIterative : OneOfMarcLinearSolverSettingsLinearSolver, IEquatable<SparseIterative>
    {
        /// <summary>
        /// Defines Preconditioner
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PreconditionerEnum
        {
            /// <summary>
            /// Enum DIAGONAL for value: DIAGONAL
            /// </summary>
            [EnumMember(Value = "DIAGONAL")]
            DIAGONAL = 1,

            /// <summary>
            /// Enum SCALEDDIAGONAL for value: SCALED_DIAGONAL
            /// </summary>
            [EnumMember(Value = "SCALED_DIAGONAL")]
            SCALEDDIAGONAL = 2,

            /// <summary>
            /// Enum INCOMPLETECHOLESKY for value: INCOMPLETE_CHOLESKY
            /// </summary>
            [EnumMember(Value = "INCOMPLETE_CHOLESKY")]
            INCOMPLETECHOLESKY = 3

        }

        /// <summary>
        /// Gets or Sets Preconditioner
        /// </summary>
        [DataMember(Name="preconditioner", EmitDefaultValue=false)]
        public PreconditionerEnum? Preconditioner { get; set; }
        /// <summary>
        /// Defines NonConvergenceAction
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NonConvergenceActionEnum
        {
            /// <summary>
            /// Enum STOP for value: STOP
            /// </summary>
            [EnumMember(Value = "STOP")]
            STOP = 1,

            /// <summary>
            /// Enum SWITCHTODIRECTSOLVER for value: SWITCH_TO_DIRECT_SOLVER
            /// </summary>
            [EnumMember(Value = "SWITCH_TO_DIRECT_SOLVER")]
            SWITCHTODIRECTSOLVER = 2

        }

        /// <summary>
        /// Gets or Sets NonConvergenceAction
        /// </summary>
        [DataMember(Name="nonConvergenceAction", EmitDefaultValue=false)]
        public NonConvergenceActionEnum? NonConvergenceAction { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SparseIterative" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SparseIterative() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SparseIterative" /> class.
        /// </summary>
        /// <param name="type">Schema name: SparseIterative (required) (default to &quot;SPARSE_ITERATIVE&quot;).</param>
        /// <param name="preconditioner">preconditioner (default to PreconditionerEnum.INCOMPLETECHOLESKY).</param>
        /// <param name="nonConvergenceAction">nonConvergenceAction (default to NonConvergenceActionEnum.SWITCHTODIRECTSOLVER).</param>
        /// <param name="convergenceTolerance">convergenceTolerance (default to 0.00010M).</param>
        public SparseIterative(string type = "SPARSE_ITERATIVE", PreconditionerEnum? preconditioner = default(PreconditionerEnum?), NonConvergenceActionEnum? nonConvergenceAction = default(NonConvergenceActionEnum?), decimal? convergenceTolerance = default(decimal?))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for SparseIterative and cannot be null");
            this.Preconditioner = preconditioner;
            this.NonConvergenceAction = nonConvergenceAction;
            this.ConvergenceTolerance = convergenceTolerance;
        }
        
        /// <summary>
        /// Schema name: SparseIterative
        /// </summary>
        /// <value>Schema name: SparseIterative</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets ConvergenceTolerance
        /// </summary>
        [DataMember(Name="convergenceTolerance", EmitDefaultValue=false)]
        public decimal? ConvergenceTolerance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SparseIterative {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Preconditioner: ").Append(Preconditioner).Append("\n");
            sb.Append("  NonConvergenceAction: ").Append(NonConvergenceAction).Append("\n");
            sb.Append("  ConvergenceTolerance: ").Append(ConvergenceTolerance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SparseIterative);
        }

        /// <summary>
        /// Returns true if SparseIterative instances are equal
        /// </summary>
        /// <param name="input">Instance of SparseIterative to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SparseIterative input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Preconditioner == input.Preconditioner ||
                    this.Preconditioner.Equals(input.Preconditioner)
                ) && 
                (
                    this.NonConvergenceAction == input.NonConvergenceAction ||
                    this.NonConvergenceAction.Equals(input.NonConvergenceAction)
                ) && 
                (
                    this.ConvergenceTolerance == input.ConvergenceTolerance ||
                    (this.ConvergenceTolerance != null &&
                    this.ConvergenceTolerance.Equals(input.ConvergenceTolerance))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                hashCode = hashCode * 59 + this.Preconditioner.GetHashCode();
                hashCode = hashCode * 59 + this.NonConvergenceAction.GetHashCode();
                if (this.ConvergenceTolerance != null)
                    hashCode = hashCode * 59 + this.ConvergenceTolerance.GetHashCode();
                return hashCode;
            }
        }

    }

}
