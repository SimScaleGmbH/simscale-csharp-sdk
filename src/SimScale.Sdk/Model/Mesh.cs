/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// Mesh
    /// </summary>
    [DataContract]
    public partial class Mesh : IEquatable<Mesh>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Mesh" /> class.
        /// </summary>
        /// <param name="name">The name of the mesh..</param>
        public Mesh(string name = default(string))
        {
            this.Name = name;
        }
        
        /// <summary>
        /// The ID of the mesh.
        /// </summary>
        /// <value>The ID of the mesh.</value>
        [DataMember(Name="meshId", EmitDefaultValue=false)]
        public Guid? MeshId { get; private set; }

        /// <summary>
        /// The name of the mesh.
        /// </summary>
        /// <value>The name of the mesh.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The time when the mesh was imported.
        /// </summary>
        /// <value>The time when the mesh was imported.</value>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public DateTimeOffset? CreatedAt { get; private set; }

        /// <summary>
        /// Number of cells of the mesh.
        /// </summary>
        /// <value>Number of cells of the mesh.</value>
        [DataMember(Name="numberOfCells", EmitDefaultValue=false)]
        public int? NumberOfCells { get; private set; }

        /// <summary>
        /// Number of nodes of the mesh.
        /// </summary>
        /// <value>Number of nodes of the mesh.</value>
        [DataMember(Name="numberOfNodes", EmitDefaultValue=false)]
        public int? NumberOfNodes { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Mesh {\n");
            sb.Append("  MeshId: ").Append(MeshId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  NumberOfCells: ").Append(NumberOfCells).Append("\n");
            sb.Append("  NumberOfNodes: ").Append(NumberOfNodes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Mesh);
        }

        /// <summary>
        /// Returns true if Mesh instances are equal
        /// </summary>
        /// <param name="input">Instance of Mesh to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Mesh input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MeshId == input.MeshId ||
                    (this.MeshId != null &&
                    this.MeshId.Equals(input.MeshId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.NumberOfCells == input.NumberOfCells ||
                    (this.NumberOfCells != null &&
                    this.NumberOfCells.Equals(input.NumberOfCells))
                ) && 
                (
                    this.NumberOfNodes == input.NumberOfNodes ||
                    (this.NumberOfNodes != null &&
                    this.NumberOfNodes.Equals(input.NumberOfNodes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MeshId != null)
                    hashCode = hashCode * 59 + this.MeshId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.NumberOfCells != null)
                    hashCode = hashCode * 59 + this.NumberOfCells.GetHashCode();
                if (this.NumberOfNodes != null)
                    hashCode = hashCode * 59 + this.NumberOfNodes.GetHashCode();
                return hashCode;
            }
        }

    }

}
