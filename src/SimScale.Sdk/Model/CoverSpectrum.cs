/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// CoverSpectrum
    /// </summary>
    [DataContract]
    public partial class CoverSpectrum : OneOfHarmonicResponseControlExcitationFrequencies, IEquatable<CoverSpectrum>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoverSpectrum" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CoverSpectrum() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CoverSpectrum" /> class.
        /// </summary>
        /// <param name="type">Schema name: CoverSpectrum (required) (default to &quot;COVER_SPECTRUM&quot;).</param>
        /// <param name="startFrequency">startFrequency.</param>
        /// <param name="endFrequency">endFrequency.</param>
        /// <param name="frequenciesPerMode">Specify the number of excitation frequencies to be clustered around each eigenfrequency. The eigenfrequency will also be considered when an even number is provided (default to 10).</param>
        /// <param name="growthRatio">Ratio between the adjacent distances of frequencies. It controls the distribution of the frequencies, with larger values resulting in a wider spread towards the valleys and tighter clustering around the mode peaks. Suggested value r &gt;&#x3D; 2. (default to 2M).</param>
        public CoverSpectrum(string type = "COVER_SPECTRUM", DimensionalFrequency startFrequency = default(DimensionalFrequency), DimensionalFrequency endFrequency = default(DimensionalFrequency), int? frequenciesPerMode = default(int?), decimal? growthRatio = default(decimal?))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for CoverSpectrum and cannot be null");
            this.StartFrequency = startFrequency;
            this.EndFrequency = endFrequency;
            this.FrequenciesPerMode = frequenciesPerMode;
            this.GrowthRatio = growthRatio;
        }
        
        /// <summary>
        /// Schema name: CoverSpectrum
        /// </summary>
        /// <value>Schema name: CoverSpectrum</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets StartFrequency
        /// </summary>
        [DataMember(Name="startFrequency", EmitDefaultValue=false)]
        public DimensionalFrequency StartFrequency { get; set; }

        /// <summary>
        /// Gets or Sets EndFrequency
        /// </summary>
        [DataMember(Name="endFrequency", EmitDefaultValue=false)]
        public DimensionalFrequency EndFrequency { get; set; }

        /// <summary>
        /// Specify the number of excitation frequencies to be clustered around each eigenfrequency. The eigenfrequency will also be considered when an even number is provided
        /// </summary>
        /// <value>Specify the number of excitation frequencies to be clustered around each eigenfrequency. The eigenfrequency will also be considered when an even number is provided</value>
        [DataMember(Name="frequenciesPerMode", EmitDefaultValue=false)]
        public int? FrequenciesPerMode { get; set; }

        /// <summary>
        /// Ratio between the adjacent distances of frequencies. It controls the distribution of the frequencies, with larger values resulting in a wider spread towards the valleys and tighter clustering around the mode peaks. Suggested value r &gt;&#x3D; 2.
        /// </summary>
        /// <value>Ratio between the adjacent distances of frequencies. It controls the distribution of the frequencies, with larger values resulting in a wider spread towards the valleys and tighter clustering around the mode peaks. Suggested value r &gt;&#x3D; 2.</value>
        [DataMember(Name="growthRatio", EmitDefaultValue=false)]
        public decimal? GrowthRatio { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CoverSpectrum {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  StartFrequency: ").Append(StartFrequency).Append("\n");
            sb.Append("  EndFrequency: ").Append(EndFrequency).Append("\n");
            sb.Append("  FrequenciesPerMode: ").Append(FrequenciesPerMode).Append("\n");
            sb.Append("  GrowthRatio: ").Append(GrowthRatio).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CoverSpectrum);
        }

        /// <summary>
        /// Returns true if CoverSpectrum instances are equal
        /// </summary>
        /// <param name="input">Instance of CoverSpectrum to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CoverSpectrum input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.StartFrequency == input.StartFrequency ||
                    (this.StartFrequency != null &&
                    this.StartFrequency.Equals(input.StartFrequency))
                ) && 
                (
                    this.EndFrequency == input.EndFrequency ||
                    (this.EndFrequency != null &&
                    this.EndFrequency.Equals(input.EndFrequency))
                ) && 
                (
                    this.FrequenciesPerMode == input.FrequenciesPerMode ||
                    (this.FrequenciesPerMode != null &&
                    this.FrequenciesPerMode.Equals(input.FrequenciesPerMode))
                ) && 
                (
                    this.GrowthRatio == input.GrowthRatio ||
                    (this.GrowthRatio != null &&
                    this.GrowthRatio.Equals(input.GrowthRatio))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.StartFrequency != null)
                    hashCode = hashCode * 59 + this.StartFrequency.GetHashCode();
                if (this.EndFrequency != null)
                    hashCode = hashCode * 59 + this.EndFrequency.GetHashCode();
                if (this.FrequenciesPerMode != null)
                    hashCode = hashCode * 59 + this.FrequenciesPerMode.GetHashCode();
                if (this.GrowthRatio != null)
                    hashCode = hashCode * 59 + this.GrowthRatio.GetHashCode();
                return hashCode;
            }
        }

    }

}
