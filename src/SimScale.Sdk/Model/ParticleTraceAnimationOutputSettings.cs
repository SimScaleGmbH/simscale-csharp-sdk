/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// ParticleTraceAnimationOutputSettings
    /// </summary>
    [DataContract]
    public partial class ParticleTraceAnimationOutputSettings : OneOfAnimationOutputSettings, IEquatable<ParticleTraceAnimationOutputSettings>
    {
        /// <summary>
        /// Defines Format
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FormatEnum
        {
            /// <summary>
            /// Enum GIF for value: GIF
            /// </summary>
            [EnumMember(Value = "GIF")]
            GIF = 1,

            /// <summary>
            /// Enum MP4 for value: MP4
            /// </summary>
            [EnumMember(Value = "MP4")]
            MP4 = 2

        }

        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [DataMember(Name="format", EmitDefaultValue=false)]
        public FormatEnum Format { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ParticleTraceAnimationOutputSettings" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ParticleTraceAnimationOutputSettings() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ParticleTraceAnimationOutputSettings" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="format">format (required) (default to FormatEnum.GIF).</param>
        /// <param name="resolution">resolution (required).</param>
        /// <param name="frameRate">frameRate (required) (default to 20).</param>
        /// <param name="showLegend">showLegend (required) (default to true).</param>
        /// <param name="showCube">showCube (required) (default to true).</param>
        /// <param name="backgroundColor">backgroundColor.</param>
        /// <param name="type">type (required) (default to &quot;PARTICLE_TRACE&quot;).</param>
        /// <param name="frameIndex">Default is the last frame (time step) in the result..</param>
        /// <param name="steps">The number of steps to generate for the particle trace animation. (required) (default to 300).</param>
        public ParticleTraceAnimationOutputSettings(string name = default(string), FormatEnum format = FormatEnum.GIF, ResolutionInfo resolution = default(ResolutionInfo), int? frameRate = 20, bool? showLegend = true, bool? showCube = true, Color backgroundColor = default(Color), string type = "PARTICLE_TRACE", int? frameIndex = default(int?), int? steps = 300)
        {
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for ParticleTraceAnimationOutputSettings and cannot be null");
            this.Format = format;
            // to ensure "resolution" is required (not null)
            this.Resolution = resolution ?? throw new ArgumentNullException("resolution is a required property for ParticleTraceAnimationOutputSettings and cannot be null");
            // to ensure "frameRate" is required (not null)
            this.FrameRate = frameRate ?? throw new ArgumentNullException("frameRate is a required property for ParticleTraceAnimationOutputSettings and cannot be null");
            // to ensure "showLegend" is required (not null)
            this.ShowLegend = showLegend ?? throw new ArgumentNullException("showLegend is a required property for ParticleTraceAnimationOutputSettings and cannot be null");
            // to ensure "showCube" is required (not null)
            this.ShowCube = showCube ?? throw new ArgumentNullException("showCube is a required property for ParticleTraceAnimationOutputSettings and cannot be null");
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for ParticleTraceAnimationOutputSettings and cannot be null");
            // to ensure "steps" is required (not null)
            this.Steps = steps ?? throw new ArgumentNullException("steps is a required property for ParticleTraceAnimationOutputSettings and cannot be null");
            this.BackgroundColor = backgroundColor;
            this.FrameIndex = frameIndex;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Resolution
        /// </summary>
        [DataMember(Name="resolution", EmitDefaultValue=false)]
        public ResolutionInfo Resolution { get; set; }

        /// <summary>
        /// Gets or Sets FrameRate
        /// </summary>
        [DataMember(Name="frameRate", EmitDefaultValue=false)]
        public int? FrameRate { get; set; }

        /// <summary>
        /// Gets or Sets ShowLegend
        /// </summary>
        [DataMember(Name="showLegend", EmitDefaultValue=false)]
        public bool? ShowLegend { get; set; }

        /// <summary>
        /// Gets or Sets ShowCube
        /// </summary>
        [DataMember(Name="showCube", EmitDefaultValue=false)]
        public bool? ShowCube { get; set; }

        /// <summary>
        /// Gets or Sets BackgroundColor
        /// </summary>
        [DataMember(Name="backgroundColor", EmitDefaultValue=false)]
        public Color BackgroundColor { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Default is the last frame (time step) in the result.
        /// </summary>
        /// <value>Default is the last frame (time step) in the result.</value>
        [DataMember(Name="frameIndex", EmitDefaultValue=false)]
        public int? FrameIndex { get; set; }

        /// <summary>
        /// The number of steps to generate for the particle trace animation.
        /// </summary>
        /// <value>The number of steps to generate for the particle trace animation.</value>
        [DataMember(Name="steps", EmitDefaultValue=false)]
        public int? Steps { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ParticleTraceAnimationOutputSettings {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Resolution: ").Append(Resolution).Append("\n");
            sb.Append("  FrameRate: ").Append(FrameRate).Append("\n");
            sb.Append("  ShowLegend: ").Append(ShowLegend).Append("\n");
            sb.Append("  ShowCube: ").Append(ShowCube).Append("\n");
            sb.Append("  BackgroundColor: ").Append(BackgroundColor).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  FrameIndex: ").Append(FrameIndex).Append("\n");
            sb.Append("  Steps: ").Append(Steps).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ParticleTraceAnimationOutputSettings);
        }

        /// <summary>
        /// Returns true if ParticleTraceAnimationOutputSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of ParticleTraceAnimationOutputSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParticleTraceAnimationOutputSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Format == input.Format ||
                    this.Format.Equals(input.Format)
                ) && 
                (
                    this.Resolution == input.Resolution ||
                    (this.Resolution != null &&
                    this.Resolution.Equals(input.Resolution))
                ) && 
                (
                    this.FrameRate == input.FrameRate ||
                    (this.FrameRate != null &&
                    this.FrameRate.Equals(input.FrameRate))
                ) && 
                (
                    this.ShowLegend == input.ShowLegend ||
                    (this.ShowLegend != null &&
                    this.ShowLegend.Equals(input.ShowLegend))
                ) && 
                (
                    this.ShowCube == input.ShowCube ||
                    (this.ShowCube != null &&
                    this.ShowCube.Equals(input.ShowCube))
                ) && 
                (
                    this.BackgroundColor == input.BackgroundColor ||
                    (this.BackgroundColor != null &&
                    this.BackgroundColor.Equals(input.BackgroundColor))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.FrameIndex == input.FrameIndex ||
                    (this.FrameIndex != null &&
                    this.FrameIndex.Equals(input.FrameIndex))
                ) && 
                (
                    this.Steps == input.Steps ||
                    (this.Steps != null &&
                    this.Steps.Equals(input.Steps))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                hashCode = hashCode * 59 + this.Format.GetHashCode();
                if (this.Resolution != null)
                    hashCode = hashCode * 59 + this.Resolution.GetHashCode();
                if (this.FrameRate != null)
                    hashCode = hashCode * 59 + this.FrameRate.GetHashCode();
                if (this.ShowLegend != null)
                    hashCode = hashCode * 59 + this.ShowLegend.GetHashCode();
                if (this.ShowCube != null)
                    hashCode = hashCode * 59 + this.ShowCube.GetHashCode();
                if (this.BackgroundColor != null)
                    hashCode = hashCode * 59 + this.BackgroundColor.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.FrameIndex != null)
                    hashCode = hashCode * 59 + this.FrameIndex.GetHashCode();
                if (this.Steps != null)
                    hashCode = hashCode * 59 + this.Steps.GetHashCode();
                return hashCode;
            }
        }

    }

}
