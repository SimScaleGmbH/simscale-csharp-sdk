/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// &lt;p&gt;&lt;b&gt;Base excitation&lt;/b&gt; boundary condition applies a uniform acceleration to all fixed surfaces in the model (zero displacement), e.g. faces assigned to the &lt;i&gt;Fixed support&lt;/i&gt; boundary condition. Specify the direction vector, the acceleration magnitude and the delay in terms of a harmonic phase angle, from the load to the reference harmonic excitation.&lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/boundary-conditions/base-excitation/&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;&lt;/p&gt;
    /// </summary>
    [DataContract]
    public partial class BaseExcitationBC : OneOfHarmonicAnalysisBoundaryConditions, IEquatable<BaseExcitationBC>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BaseExcitationBC" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BaseExcitationBC() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BaseExcitationBC" /> class.
        /// </summary>
        /// <param name="type">&lt;p&gt;&lt;b&gt;Base excitation&lt;/b&gt; boundary condition applies a uniform acceleration to all fixed surfaces in the model (zero displacement), e.g. faces assigned to the &lt;i&gt;Fixed support&lt;/i&gt; boundary condition. Specify the direction vector, the acceleration magnitude and the delay in terms of a harmonic phase angle, from the load to the reference harmonic excitation.&lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/boundary-conditions/base-excitation/&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;&lt;/p&gt;  Schema name: BaseExcitationBC (required) (default to &quot;BASE_EXCITATION&quot;).</param>
        /// <param name="name">name.</param>
        /// <param name="direction">direction.</param>
        /// <param name="acceleration">acceleration.</param>
        /// <param name="phaseAngle">phaseAngle.</param>
        public BaseExcitationBC(string type = "BASE_EXCITATION", string name = default(string), DimensionalVectorDimensionless direction = default(DimensionalVectorDimensionless), DimensionalFunctionAcceleration acceleration = default(DimensionalFunctionAcceleration), DimensionalAngle phaseAngle = default(DimensionalAngle))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for BaseExcitationBC and cannot be null");
            this.Name = name;
            this.Direction = direction;
            this.Acceleration = acceleration;
            this.PhaseAngle = phaseAngle;
        }
        
        /// <summary>
        /// &lt;p&gt;&lt;b&gt;Base excitation&lt;/b&gt; boundary condition applies a uniform acceleration to all fixed surfaces in the model (zero displacement), e.g. faces assigned to the &lt;i&gt;Fixed support&lt;/i&gt; boundary condition. Specify the direction vector, the acceleration magnitude and the delay in terms of a harmonic phase angle, from the load to the reference harmonic excitation.&lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/boundary-conditions/base-excitation/&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;&lt;/p&gt;  Schema name: BaseExcitationBC
        /// </summary>
        /// <value>&lt;p&gt;&lt;b&gt;Base excitation&lt;/b&gt; boundary condition applies a uniform acceleration to all fixed surfaces in the model (zero displacement), e.g. faces assigned to the &lt;i&gt;Fixed support&lt;/i&gt; boundary condition. Specify the direction vector, the acceleration magnitude and the delay in terms of a harmonic phase angle, from the load to the reference harmonic excitation.&lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/boundary-conditions/base-excitation/&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;&lt;/p&gt;  Schema name: BaseExcitationBC</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Direction
        /// </summary>
        [DataMember(Name="direction", EmitDefaultValue=false)]
        public DimensionalVectorDimensionless Direction { get; set; }

        /// <summary>
        /// Gets or Sets Acceleration
        /// </summary>
        [DataMember(Name="acceleration", EmitDefaultValue=false)]
        public DimensionalFunctionAcceleration Acceleration { get; set; }

        /// <summary>
        /// Gets or Sets PhaseAngle
        /// </summary>
        [DataMember(Name="phaseAngle", EmitDefaultValue=false)]
        public DimensionalAngle PhaseAngle { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BaseExcitationBC {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  Acceleration: ").Append(Acceleration).Append("\n");
            sb.Append("  PhaseAngle: ").Append(PhaseAngle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BaseExcitationBC);
        }

        /// <summary>
        /// Returns true if BaseExcitationBC instances are equal
        /// </summary>
        /// <param name="input">Instance of BaseExcitationBC to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BaseExcitationBC input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Direction == input.Direction ||
                    (this.Direction != null &&
                    this.Direction.Equals(input.Direction))
                ) && 
                (
                    this.Acceleration == input.Acceleration ||
                    (this.Acceleration != null &&
                    this.Acceleration.Equals(input.Acceleration))
                ) && 
                (
                    this.PhaseAngle == input.PhaseAngle ||
                    (this.PhaseAngle != null &&
                    this.PhaseAngle.Equals(input.PhaseAngle))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Direction != null)
                    hashCode = hashCode * 59 + this.Direction.GetHashCode();
                if (this.Acceleration != null)
                    hashCode = hashCode * 59 + this.Acceleration.GetHashCode();
                if (this.PhaseAngle != null)
                    hashCode = hashCode * 59 + this.PhaseAngle.GetHashCode();
                return hashCode;
            }
        }

    }

}
