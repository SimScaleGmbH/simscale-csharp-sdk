/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// AdvancedComfortCriterionSettings
    /// </summary>
    [DataContract]
    public partial class AdvancedComfortCriterionSettings : IEquatable<AdvancedComfortCriterionSettings>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdvancedComfortCriterionSettings" /> class.
        /// </summary>
        /// <param name="gustFactor">Value of the gust factor used in the Gust Equivalent Mean (GEM) computation. &lt;a href&#x3D; https://www.simscale.com/docs/analysis-types/pedestrian-wind-comfort-analysis/pedestrian-comfort-map/gust-equivalent-mean/#gust-equivalent-mean-formulation target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;. (default to 3.5M).</param>
        /// <param name="gemCorrection">Value of the velocity correction factor used in the Gust Equivalent Mean (GEM) computation. &lt;a href&#x3D; https://www.simscale.com/docs/analysis-types/pedestrian-wind-comfort-analysis/pedestrian-comfort-map/gust-equivalent-mean/#gust-equivalent-mean-formulation target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;. (default to 1.85M).</param>
        public AdvancedComfortCriterionSettings(decimal? gustFactor = default(decimal?), decimal? gemCorrection = default(decimal?))
        {
            this.GustFactor = gustFactor;
            this.GemCorrection = gemCorrection;
        }
        
        /// <summary>
        /// Value of the gust factor used in the Gust Equivalent Mean (GEM) computation. &lt;a href&#x3D; https://www.simscale.com/docs/analysis-types/pedestrian-wind-comfort-analysis/pedestrian-comfort-map/gust-equivalent-mean/#gust-equivalent-mean-formulation target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.
        /// </summary>
        /// <value>Value of the gust factor used in the Gust Equivalent Mean (GEM) computation. &lt;a href&#x3D; https://www.simscale.com/docs/analysis-types/pedestrian-wind-comfort-analysis/pedestrian-comfort-map/gust-equivalent-mean/#gust-equivalent-mean-formulation target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.</value>
        [DataMember(Name="gustFactor", EmitDefaultValue=false)]
        public decimal? GustFactor { get; set; }

        /// <summary>
        /// Value of the velocity correction factor used in the Gust Equivalent Mean (GEM) computation. &lt;a href&#x3D; https://www.simscale.com/docs/analysis-types/pedestrian-wind-comfort-analysis/pedestrian-comfort-map/gust-equivalent-mean/#gust-equivalent-mean-formulation target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.
        /// </summary>
        /// <value>Value of the velocity correction factor used in the Gust Equivalent Mean (GEM) computation. &lt;a href&#x3D; https://www.simscale.com/docs/analysis-types/pedestrian-wind-comfort-analysis/pedestrian-comfort-map/gust-equivalent-mean/#gust-equivalent-mean-formulation target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.</value>
        [DataMember(Name="gemCorrection", EmitDefaultValue=false)]
        public decimal? GemCorrection { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdvancedComfortCriterionSettings {\n");
            sb.Append("  GustFactor: ").Append(GustFactor).Append("\n");
            sb.Append("  GemCorrection: ").Append(GemCorrection).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdvancedComfortCriterionSettings);
        }

        /// <summary>
        /// Returns true if AdvancedComfortCriterionSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of AdvancedComfortCriterionSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdvancedComfortCriterionSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.GustFactor == input.GustFactor ||
                    (this.GustFactor != null &&
                    this.GustFactor.Equals(input.GustFactor))
                ) && 
                (
                    this.GemCorrection == input.GemCorrection ||
                    (this.GemCorrection != null &&
                    this.GemCorrection.Equals(input.GemCorrection))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GustFactor != null)
                    hashCode = hashCode * 59 + this.GustFactor.GetHashCode();
                if (this.GemCorrection != null)
                    hashCode = hashCode * 59 + this.GemCorrection.GetHashCode();
                return hashCode;
            }
        }

    }

}
