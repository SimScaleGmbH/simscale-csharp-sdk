/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// Material update response schema
    /// </summary>
    [DataContract]
    public partial class MaterialUpdateResponse : IEquatable<MaterialUpdateResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MaterialUpdateResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MaterialUpdateResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MaterialUpdateResponse" /> class.
        /// </summary>
        /// <param name="spec">spec (required).</param>
        /// <param name="tables">Tables containing parametric values, created during the material update operation(s). These tables are going to be used by the solvers during the simulation runs. (required).</param>
        public MaterialUpdateResponse(SimulationSpec spec = default(SimulationSpec), List<Object> tables = default(List<Object>))
        {
            // to ensure "spec" is required (not null)
            this.Spec = spec ?? throw new ArgumentNullException("spec is a required property for MaterialUpdateResponse and cannot be null");
            // to ensure "tables" is required (not null)
            this.Tables = tables ?? throw new ArgumentNullException("tables is a required property for MaterialUpdateResponse and cannot be null");
        }
        
        /// <summary>
        /// Gets or Sets Spec
        /// </summary>
        [DataMember(Name="spec", EmitDefaultValue=false)]
        public SimulationSpec Spec { get; set; }

        /// <summary>
        /// Tables containing parametric values, created during the material update operation(s). These tables are going to be used by the solvers during the simulation runs.
        /// </summary>
        /// <value>Tables containing parametric values, created during the material update operation(s). These tables are going to be used by the solvers during the simulation runs.</value>
        [DataMember(Name="tables", EmitDefaultValue=false)]
        public List<Object> Tables { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MaterialUpdateResponse {\n");
            sb.Append("  Spec: ").Append(Spec).Append("\n");
            sb.Append("  Tables: ").Append(Tables).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MaterialUpdateResponse);
        }

        /// <summary>
        /// Returns true if MaterialUpdateResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of MaterialUpdateResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MaterialUpdateResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Spec == input.Spec ||
                    (this.Spec != null &&
                    this.Spec.Equals(input.Spec))
                ) && 
                (
                    this.Tables == input.Tables ||
                    this.Tables != null &&
                    input.Tables != null &&
                    this.Tables.SequenceEqual(input.Tables)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Spec != null)
                    hashCode = hashCode * 59 + this.Spec.GetHashCode();
                if (this.Tables != null)
                    hashCode = hashCode * 59 + this.Tables.GetHashCode();
                return hashCode;
            }
        }

    }

}
