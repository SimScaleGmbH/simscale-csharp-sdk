/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// Directional porous object where the permeability and friction form coefficient are applied only in the specified direction. For directions orthogonal to the specified direction, the permeability is set to zero, i.e. there is no flow in the orthogonal directions.
    /// </summary>
    [DataContract]
    public partial class RectifyingDarcyForchheimer : OneOfDirectionalDependencyDarcyForchheimerType, OneOfGeneralDarcyForchheimerPacefishDarcyForchheimerType, IEquatable<RectifyingDarcyForchheimer>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RectifyingDarcyForchheimer" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RectifyingDarcyForchheimer() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RectifyingDarcyForchheimer" /> class.
        /// </summary>
        /// <param name="type">type (required) (default to &quot;RECTIFYING&quot;).</param>
        /// <param name="direction">direction.</param>
        public RectifyingDarcyForchheimer(string type = "RECTIFYING", DimensionalVectorLength direction = default(DimensionalVectorLength))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for RectifyingDarcyForchheimer and cannot be null");
            this.Direction = direction;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Direction
        /// </summary>
        [DataMember(Name="direction", EmitDefaultValue=false)]
        public DimensionalVectorLength Direction { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RectifyingDarcyForchheimer {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RectifyingDarcyForchheimer);
        }

        /// <summary>
        /// Returns true if RectifyingDarcyForchheimer instances are equal
        /// </summary>
        /// <param name="input">Instance of RectifyingDarcyForchheimer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RectifyingDarcyForchheimer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Direction == input.Direction ||
                    (this.Direction != null &&
                    this.Direction.Equals(input.Direction))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Direction != null)
                    hashCode = hashCode * 59 + this.Direction.GetHashCode();
                return hashCode;
            }
        }

    }

}
