/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// Reference identifiers of the provided material and its material group
    /// </summary>
    [DataContract]
    public partial class MaterialUpdateOperationReference : IEquatable<MaterialUpdateOperationReference>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MaterialUpdateOperationReference" /> class.
        /// </summary>
        /// <param name="materialGroupId">Identifier of the material group.</param>
        /// <param name="materialId">Identifier of the material.</param>
        public MaterialUpdateOperationReference(string materialGroupId = default(string), string materialId = default(string))
        {
            this.MaterialGroupId = materialGroupId;
            this.MaterialId = materialId;
        }
        
        /// <summary>
        /// Identifier of the material group
        /// </summary>
        /// <value>Identifier of the material group</value>
        [DataMember(Name="materialGroupId", EmitDefaultValue=false)]
        public string MaterialGroupId { get; set; }

        /// <summary>
        /// Identifier of the material
        /// </summary>
        /// <value>Identifier of the material</value>
        [DataMember(Name="materialId", EmitDefaultValue=false)]
        public string MaterialId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MaterialUpdateOperationReference {\n");
            sb.Append("  MaterialGroupId: ").Append(MaterialGroupId).Append("\n");
            sb.Append("  MaterialId: ").Append(MaterialId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MaterialUpdateOperationReference);
        }

        /// <summary>
        /// Returns true if MaterialUpdateOperationReference instances are equal
        /// </summary>
        /// <param name="input">Instance of MaterialUpdateOperationReference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MaterialUpdateOperationReference input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MaterialGroupId == input.MaterialGroupId ||
                    (this.MaterialGroupId != null &&
                    this.MaterialGroupId.Equals(input.MaterialGroupId))
                ) && 
                (
                    this.MaterialId == input.MaterialId ||
                    (this.MaterialId != null &&
                    this.MaterialId.Equals(input.MaterialId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MaterialGroupId != null)
                    hashCode = hashCode * 59 + this.MaterialGroupId.GetHashCode();
                if (this.MaterialId != null)
                    hashCode = hashCode * 59 + this.MaterialId.GetHashCode();
                return hashCode;
            }
        }

    }

}
