/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// SolidCompressibleMaterial
    /// </summary>
    [DataContract]
    public partial class SolidCompressibleMaterial : IEquatable<SolidCompressibleMaterial>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SolidCompressibleMaterial" /> class.
        /// </summary>
        /// <param name="type">type (default to &quot;COMPRESSIBLE&quot;).</param>
        /// <param name="name">name.</param>
        /// <param name="specie">specie.</param>
        /// <param name="transport">transport.</param>
        /// <param name="emissivity">emissivity (default to 0.9M).</param>
        /// <param name="topologicalReference">topologicalReference.</param>
        /// <param name="builtInMaterial">builtInMaterial.</param>
        public SolidCompressibleMaterial(string type = default(string), string name = default(string), SpecieDefault specie = default(SpecieDefault), OneOfSolidCompressibleMaterialTransport transport = default(OneOfSolidCompressibleMaterialTransport), decimal? emissivity = default(decimal?), TopologicalReference topologicalReference = default(TopologicalReference), string builtInMaterial = default(string))
        {
            this.Type = type;
            this.Name = name;
            this.Specie = specie;
            this.Transport = transport;
            this.Emissivity = emissivity;
            this.TopologicalReference = topologicalReference;
            this.BuiltInMaterial = builtInMaterial;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Specie
        /// </summary>
        [DataMember(Name="specie", EmitDefaultValue=false)]
        public SpecieDefault Specie { get; set; }

        /// <summary>
        /// Gets or Sets Transport
        /// </summary>
        [DataMember(Name="transport", EmitDefaultValue=false)]
        public OneOfSolidCompressibleMaterialTransport Transport { get; set; }

        /// <summary>
        /// Gets or Sets Emissivity
        /// </summary>
        [DataMember(Name="emissivity", EmitDefaultValue=false)]
        public decimal? Emissivity { get; set; }

        /// <summary>
        /// Gets or Sets TopologicalReference
        /// </summary>
        [DataMember(Name="topologicalReference", EmitDefaultValue=false)]
        public TopologicalReference TopologicalReference { get; set; }

        /// <summary>
        /// Gets or Sets BuiltInMaterial
        /// </summary>
        [DataMember(Name="builtInMaterial", EmitDefaultValue=false)]
        public string BuiltInMaterial { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SolidCompressibleMaterial {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Specie: ").Append(Specie).Append("\n");
            sb.Append("  Transport: ").Append(Transport).Append("\n");
            sb.Append("  Emissivity: ").Append(Emissivity).Append("\n");
            sb.Append("  TopologicalReference: ").Append(TopologicalReference).Append("\n");
            sb.Append("  BuiltInMaterial: ").Append(BuiltInMaterial).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SolidCompressibleMaterial);
        }

        /// <summary>
        /// Returns true if SolidCompressibleMaterial instances are equal
        /// </summary>
        /// <param name="input">Instance of SolidCompressibleMaterial to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SolidCompressibleMaterial input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Specie == input.Specie ||
                    (this.Specie != null &&
                    this.Specie.Equals(input.Specie))
                ) && 
                (
                    this.Transport == input.Transport ||
                    (this.Transport != null &&
                    this.Transport.Equals(input.Transport))
                ) && 
                (
                    this.Emissivity == input.Emissivity ||
                    (this.Emissivity != null &&
                    this.Emissivity.Equals(input.Emissivity))
                ) && 
                (
                    this.TopologicalReference == input.TopologicalReference ||
                    (this.TopologicalReference != null &&
                    this.TopologicalReference.Equals(input.TopologicalReference))
                ) && 
                (
                    this.BuiltInMaterial == input.BuiltInMaterial ||
                    (this.BuiltInMaterial != null &&
                    this.BuiltInMaterial.Equals(input.BuiltInMaterial))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Specie != null)
                    hashCode = hashCode * 59 + this.Specie.GetHashCode();
                if (this.Transport != null)
                    hashCode = hashCode * 59 + this.Transport.GetHashCode();
                if (this.Emissivity != null)
                    hashCode = hashCode * 59 + this.Emissivity.GetHashCode();
                if (this.TopologicalReference != null)
                    hashCode = hashCode * 59 + this.TopologicalReference.GetHashCode();
                if (this.BuiltInMaterial != null)
                    hashCode = hashCode * 59 + this.BuiltInMaterial.GetHashCode();
                return hashCode;
            }
        }

    }

}
