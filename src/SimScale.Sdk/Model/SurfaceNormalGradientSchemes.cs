/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// SurfaceNormalGradientSchemes
    /// </summary>
    [DataContract]
    public partial class SurfaceNormalGradientSchemes : IEquatable<SurfaceNormalGradientSchemes>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SurfaceNormalGradientSchemes" /> class.
        /// </summary>
        /// <param name="forDefault">forDefault.</param>
        /// <param name="surfaceNormalGradientRho">surfaceNormalGradientRho.</param>
        /// <param name="surfaceNormalGradientPressureRgh">surfaceNormalGradientPressureRgh.</param>
        /// <param name="surfaceNormalGradientRhok">surfaceNormalGradientRhok.</param>
        public SurfaceNormalGradientSchemes(OneOfSurfaceNormalGradientSchemesForDefault forDefault = default(OneOfSurfaceNormalGradientSchemesForDefault), OneOfSurfaceNormalGradientSchemesSurfaceNormalGradientRho surfaceNormalGradientRho = default(OneOfSurfaceNormalGradientSchemesSurfaceNormalGradientRho), OneOfSurfaceNormalGradientSchemesSurfaceNormalGradientPressureRgh surfaceNormalGradientPressureRgh = default(OneOfSurfaceNormalGradientSchemesSurfaceNormalGradientPressureRgh), OneOfSurfaceNormalGradientSchemesSurfaceNormalGradientRhok surfaceNormalGradientRhok = default(OneOfSurfaceNormalGradientSchemesSurfaceNormalGradientRhok))
        {
            this.ForDefault = forDefault;
            this.SurfaceNormalGradientRho = surfaceNormalGradientRho;
            this.SurfaceNormalGradientPressureRgh = surfaceNormalGradientPressureRgh;
            this.SurfaceNormalGradientRhok = surfaceNormalGradientRhok;
        }
        
        /// <summary>
        /// Gets or Sets ForDefault
        /// </summary>
        [DataMember(Name="forDefault", EmitDefaultValue=false)]
        public OneOfSurfaceNormalGradientSchemesForDefault ForDefault { get; set; }

        /// <summary>
        /// Gets or Sets SurfaceNormalGradientRho
        /// </summary>
        [DataMember(Name="surfaceNormalGradient_rho", EmitDefaultValue=false)]
        public OneOfSurfaceNormalGradientSchemesSurfaceNormalGradientRho SurfaceNormalGradientRho { get; set; }

        /// <summary>
        /// Gets or Sets SurfaceNormalGradientPressureRgh
        /// </summary>
        [DataMember(Name="surfaceNormalGradient_pressureRgh", EmitDefaultValue=false)]
        public OneOfSurfaceNormalGradientSchemesSurfaceNormalGradientPressureRgh SurfaceNormalGradientPressureRgh { get; set; }

        /// <summary>
        /// Gets or Sets SurfaceNormalGradientRhok
        /// </summary>
        [DataMember(Name="surfaceNormalGradient_rhok", EmitDefaultValue=false)]
        public OneOfSurfaceNormalGradientSchemesSurfaceNormalGradientRhok SurfaceNormalGradientRhok { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SurfaceNormalGradientSchemes {\n");
            sb.Append("  ForDefault: ").Append(ForDefault).Append("\n");
            sb.Append("  SurfaceNormalGradientRho: ").Append(SurfaceNormalGradientRho).Append("\n");
            sb.Append("  SurfaceNormalGradientPressureRgh: ").Append(SurfaceNormalGradientPressureRgh).Append("\n");
            sb.Append("  SurfaceNormalGradientRhok: ").Append(SurfaceNormalGradientRhok).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SurfaceNormalGradientSchemes);
        }

        /// <summary>
        /// Returns true if SurfaceNormalGradientSchemes instances are equal
        /// </summary>
        /// <param name="input">Instance of SurfaceNormalGradientSchemes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SurfaceNormalGradientSchemes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ForDefault == input.ForDefault ||
                    (this.ForDefault != null &&
                    this.ForDefault.Equals(input.ForDefault))
                ) && 
                (
                    this.SurfaceNormalGradientRho == input.SurfaceNormalGradientRho ||
                    (this.SurfaceNormalGradientRho != null &&
                    this.SurfaceNormalGradientRho.Equals(input.SurfaceNormalGradientRho))
                ) && 
                (
                    this.SurfaceNormalGradientPressureRgh == input.SurfaceNormalGradientPressureRgh ||
                    (this.SurfaceNormalGradientPressureRgh != null &&
                    this.SurfaceNormalGradientPressureRgh.Equals(input.SurfaceNormalGradientPressureRgh))
                ) && 
                (
                    this.SurfaceNormalGradientRhok == input.SurfaceNormalGradientRhok ||
                    (this.SurfaceNormalGradientRhok != null &&
                    this.SurfaceNormalGradientRhok.Equals(input.SurfaceNormalGradientRhok))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ForDefault != null)
                    hashCode = hashCode * 59 + this.ForDefault.GetHashCode();
                if (this.SurfaceNormalGradientRho != null)
                    hashCode = hashCode * 59 + this.SurfaceNormalGradientRho.GetHashCode();
                if (this.SurfaceNormalGradientPressureRgh != null)
                    hashCode = hashCode * 59 + this.SurfaceNormalGradientPressureRgh.GetHashCode();
                if (this.SurfaceNormalGradientRhok != null)
                    hashCode = hashCode * 59 + this.SurfaceNormalGradientRhok.GetHashCode();
                return hashCode;
            }
        }

    }

}
