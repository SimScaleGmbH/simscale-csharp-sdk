/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// FieldCalculationsAdjointSensitivitiesResultControl
    /// </summary>
    [DataContract]
    public partial class FieldCalculationsAdjointSensitivitiesResultControl : OneOfFluidResultControlsFieldCalculations, IEquatable<FieldCalculationsAdjointSensitivitiesResultControl>
    {
        /// <summary>
        /// Defines ComputeSensitivitiesTo
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ComputeSensitivitiesToEnum
        {
            /// <summary>
            /// Enum MAXIMIZEFORCE for value: MAXIMIZE_FORCE
            /// </summary>
            [EnumMember(Value = "MAXIMIZE_FORCE")]
            MAXIMIZEFORCE = 1,

            /// <summary>
            /// Enum MINIMIZEFORCE for value: MINIMIZE_FORCE
            /// </summary>
            [EnumMember(Value = "MINIMIZE_FORCE")]
            MINIMIZEFORCE = 2

        }

        /// <summary>
        /// Gets or Sets ComputeSensitivitiesTo
        /// </summary>
        [DataMember(Name="computeSensitivitiesTo", EmitDefaultValue=false)]
        public ComputeSensitivitiesToEnum? ComputeSensitivitiesTo { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FieldCalculationsAdjointSensitivitiesResultControl" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FieldCalculationsAdjointSensitivitiesResultControl() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FieldCalculationsAdjointSensitivitiesResultControl" /> class.
        /// </summary>
        /// <param name="type">Schema name: FieldCalculationsAdjointSensitivitiesResultControl (required) (default to &quot;ADJOINT_SENSITIVITIES&quot;).</param>
        /// <param name="name">name.</param>
        /// <param name="computeSensitivitiesTo">computeSensitivitiesTo (default to ComputeSensitivitiesToEnum.MINIMIZEFORCE).</param>
        /// <param name="optimizationForceDirection">optimizationForceDirection.</param>
        /// <param name="topologicalReference">topologicalReference.</param>
        public FieldCalculationsAdjointSensitivitiesResultControl(string type = "ADJOINT_SENSITIVITIES", string name = default(string), ComputeSensitivitiesToEnum? computeSensitivitiesTo = default(ComputeSensitivitiesToEnum?), DecimalVector optimizationForceDirection = default(DecimalVector), TopologicalReference topologicalReference = default(TopologicalReference))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for FieldCalculationsAdjointSensitivitiesResultControl and cannot be null");
            this.Name = name;
            this.ComputeSensitivitiesTo = computeSensitivitiesTo;
            this.OptimizationForceDirection = optimizationForceDirection;
            this.TopologicalReference = topologicalReference;
        }
        
        /// <summary>
        /// Schema name: FieldCalculationsAdjointSensitivitiesResultControl
        /// </summary>
        /// <value>Schema name: FieldCalculationsAdjointSensitivitiesResultControl</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets OptimizationForceDirection
        /// </summary>
        [DataMember(Name="optimizationForceDirection", EmitDefaultValue=false)]
        public DecimalVector OptimizationForceDirection { get; set; }

        /// <summary>
        /// Gets or Sets TopologicalReference
        /// </summary>
        [DataMember(Name="topologicalReference", EmitDefaultValue=false)]
        public TopologicalReference TopologicalReference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FieldCalculationsAdjointSensitivitiesResultControl {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ComputeSensitivitiesTo: ").Append(ComputeSensitivitiesTo).Append("\n");
            sb.Append("  OptimizationForceDirection: ").Append(OptimizationForceDirection).Append("\n");
            sb.Append("  TopologicalReference: ").Append(TopologicalReference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FieldCalculationsAdjointSensitivitiesResultControl);
        }

        /// <summary>
        /// Returns true if FieldCalculationsAdjointSensitivitiesResultControl instances are equal
        /// </summary>
        /// <param name="input">Instance of FieldCalculationsAdjointSensitivitiesResultControl to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FieldCalculationsAdjointSensitivitiesResultControl input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ComputeSensitivitiesTo == input.ComputeSensitivitiesTo ||
                    this.ComputeSensitivitiesTo.Equals(input.ComputeSensitivitiesTo)
                ) && 
                (
                    this.OptimizationForceDirection == input.OptimizationForceDirection ||
                    (this.OptimizationForceDirection != null &&
                    this.OptimizationForceDirection.Equals(input.OptimizationForceDirection))
                ) && 
                (
                    this.TopologicalReference == input.TopologicalReference ||
                    (this.TopologicalReference != null &&
                    this.TopologicalReference.Equals(input.TopologicalReference))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                hashCode = hashCode * 59 + this.ComputeSensitivitiesTo.GetHashCode();
                if (this.OptimizationForceDirection != null)
                    hashCode = hashCode * 59 + this.OptimizationForceDirection.GetHashCode();
                if (this.TopologicalReference != null)
                    hashCode = hashCode * 59 + this.TopologicalReference.GetHashCode();
                return hashCode;
            }
        }

    }

}
