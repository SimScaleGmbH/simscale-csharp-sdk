/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// CreateExportRequest
    /// </summary>
    [DataContract]
    public partial class CreateExportRequest : IEquatable<CreateExportRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateExportRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateExportRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateExportRequest" /> class.
        /// </summary>
        /// <param name="resultId">The result to be exported (required).</param>
        /// <param name="format">The format to export to (required).</param>
        public CreateExportRequest(Guid? resultId = default(Guid?), string format = default(string))
        {
            // to ensure "resultId" is required (not null)
            this.ResultId = resultId ?? throw new ArgumentNullException("resultId is a required property for CreateExportRequest and cannot be null");
            // to ensure "format" is required (not null)
            this.Format = format ?? throw new ArgumentNullException("format is a required property for CreateExportRequest and cannot be null");
        }
        
        /// <summary>
        /// The result to be exported
        /// </summary>
        /// <value>The result to be exported</value>
        [DataMember(Name="resultId", EmitDefaultValue=false)]
        public Guid? ResultId { get; set; }

        /// <summary>
        /// The format to export to
        /// </summary>
        /// <value>The format to export to</value>
        [DataMember(Name="format", EmitDefaultValue=false)]
        public string Format { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateExportRequest {\n");
            sb.Append("  ResultId: ").Append(ResultId).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateExportRequest);
        }

        /// <summary>
        /// Returns true if CreateExportRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateExportRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateExportRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ResultId == input.ResultId ||
                    (this.ResultId != null &&
                    this.ResultId.Equals(input.ResultId))
                ) && 
                (
                    this.Format == input.Format ||
                    (this.Format != null &&
                    this.Format.Equals(input.Format))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ResultId != null)
                    hashCode = hashCode * 59 + this.ResultId.GetHashCode();
                if (this.Format != null)
                    hashCode = hashCode * 59 + this.Format.GetHashCode();
                return hashCode;
            }
        }

    }

}
