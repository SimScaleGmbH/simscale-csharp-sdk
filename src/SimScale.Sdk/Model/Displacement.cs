/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// Displacement
    /// </summary>
    [DataContract]
    public partial class Displacement : IEquatable<Displacement>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Displacement" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Displacement() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Displacement" /> class.
        /// </summary>
        /// <param name="field">field (required).</param>
        /// <param name="scaleFactor">scaleFactor (required) (default to 1.0F).</param>
        public Displacement(VectorField field = default(VectorField), float? scaleFactor = 1.0F)
        {
            // to ensure "field" is required (not null)
            this.Field = field ?? throw new ArgumentNullException("field is a required property for Displacement and cannot be null");
            // to ensure "scaleFactor" is required (not null)
            this.ScaleFactor = scaleFactor ?? throw new ArgumentNullException("scaleFactor is a required property for Displacement and cannot be null");
        }
        
        /// <summary>
        /// Gets or Sets Field
        /// </summary>
        [DataMember(Name="field", EmitDefaultValue=false)]
        public VectorField Field { get; set; }

        /// <summary>
        /// Gets or Sets ScaleFactor
        /// </summary>
        [DataMember(Name="scaleFactor", EmitDefaultValue=false)]
        public float? ScaleFactor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Displacement {\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  ScaleFactor: ").Append(ScaleFactor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Displacement);
        }

        /// <summary>
        /// Returns true if Displacement instances are equal
        /// </summary>
        /// <param name="input">Instance of Displacement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Displacement input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Field == input.Field ||
                    (this.Field != null &&
                    this.Field.Equals(input.Field))
                ) && 
                (
                    this.ScaleFactor == input.ScaleFactor ||
                    (this.ScaleFactor != null &&
                    this.ScaleFactor.Equals(input.ScaleFactor))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Field != null)
                    hashCode = hashCode * 59 + this.Field.GetHashCode();
                if (this.ScaleFactor != null)
                    hashCode = hashCode * 59 + this.ScaleFactor.GetHashCode();
                return hashCode;
            }
        }

    }

}
