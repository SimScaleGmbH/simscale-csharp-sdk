/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// MoveContentRequest
    /// </summary>
    [DataContract]
    public partial class MoveContentRequest : IEquatable<MoveContentRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MoveContentRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MoveContentRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MoveContentRequest" /> class.
        /// </summary>
        /// <param name="entries">entries (required).</param>
        /// <param name="to">to (required).</param>
        public MoveContentRequest(List<ResourceToMove> entries = default(List<ResourceToMove>), ResourceLocation to = default(ResourceLocation))
        {
            // to ensure "entries" is required (not null)
            this.Entries = entries ?? throw new ArgumentNullException("entries is a required property for MoveContentRequest and cannot be null");
            // to ensure "to" is required (not null)
            this.To = to ?? throw new ArgumentNullException("to is a required property for MoveContentRequest and cannot be null");
        }
        
        /// <summary>
        /// Gets or Sets Entries
        /// </summary>
        [DataMember(Name="entries", EmitDefaultValue=false)]
        public List<ResourceToMove> Entries { get; set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name="to", EmitDefaultValue=false)]
        public ResourceLocation To { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MoveContentRequest {\n");
            sb.Append("  Entries: ").Append(Entries).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MoveContentRequest);
        }

        /// <summary>
        /// Returns true if MoveContentRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of MoveContentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MoveContentRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Entries == input.Entries ||
                    this.Entries != null &&
                    input.Entries != null &&
                    this.Entries.SequenceEqual(input.Entries)
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Entries != null)
                    hashCode = hashCode * 59 + this.Entries.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                return hashCode;
            }
        }

    }

}
