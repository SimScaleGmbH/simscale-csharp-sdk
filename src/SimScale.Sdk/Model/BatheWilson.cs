/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// BatheWilson
    /// </summary>
    [DataContract]
    public partial class BatheWilson : OneOfSolidNumericsEigenSolver, IEquatable<BatheWilson>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BatheWilson" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BatheWilson() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BatheWilson" /> class.
        /// </summary>
        /// <param name="type">Schema name: BatheWilson (required) (default to &quot;JACOBI&quot;).</param>
        /// <param name="precBathe">precBathe (default to 1.0E-10M).</param>
        /// <param name="nmaxIterBathe">nmaxIterBathe (default to 40).</param>
        /// <param name="precJacobi">precJacobi (default to 0.01M).</param>
        /// <param name="maxIterJacobi">maxIterJacobi (default to 12).</param>
        public BatheWilson(string type = "JACOBI", decimal? precBathe = default(decimal?), int? nmaxIterBathe = default(int?), decimal? precJacobi = default(decimal?), int? maxIterJacobi = default(int?))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for BatheWilson and cannot be null");
            this.PrecBathe = precBathe;
            this.NmaxIterBathe = nmaxIterBathe;
            this.PrecJacobi = precJacobi;
            this.MaxIterJacobi = maxIterJacobi;
        }
        
        /// <summary>
        /// Schema name: BatheWilson
        /// </summary>
        /// <value>Schema name: BatheWilson</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets PrecBathe
        /// </summary>
        [DataMember(Name="precBathe", EmitDefaultValue=false)]
        public decimal? PrecBathe { get; set; }

        /// <summary>
        /// Gets or Sets NmaxIterBathe
        /// </summary>
        [DataMember(Name="nmaxIterBathe", EmitDefaultValue=false)]
        public int? NmaxIterBathe { get; set; }

        /// <summary>
        /// Gets or Sets PrecJacobi
        /// </summary>
        [DataMember(Name="precJacobi", EmitDefaultValue=false)]
        public decimal? PrecJacobi { get; set; }

        /// <summary>
        /// Gets or Sets MaxIterJacobi
        /// </summary>
        [DataMember(Name="maxIterJacobi", EmitDefaultValue=false)]
        public int? MaxIterJacobi { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BatheWilson {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  PrecBathe: ").Append(PrecBathe).Append("\n");
            sb.Append("  NmaxIterBathe: ").Append(NmaxIterBathe).Append("\n");
            sb.Append("  PrecJacobi: ").Append(PrecJacobi).Append("\n");
            sb.Append("  MaxIterJacobi: ").Append(MaxIterJacobi).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BatheWilson);
        }

        /// <summary>
        /// Returns true if BatheWilson instances are equal
        /// </summary>
        /// <param name="input">Instance of BatheWilson to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BatheWilson input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.PrecBathe == input.PrecBathe ||
                    (this.PrecBathe != null &&
                    this.PrecBathe.Equals(input.PrecBathe))
                ) && 
                (
                    this.NmaxIterBathe == input.NmaxIterBathe ||
                    (this.NmaxIterBathe != null &&
                    this.NmaxIterBathe.Equals(input.NmaxIterBathe))
                ) && 
                (
                    this.PrecJacobi == input.PrecJacobi ||
                    (this.PrecJacobi != null &&
                    this.PrecJacobi.Equals(input.PrecJacobi))
                ) && 
                (
                    this.MaxIterJacobi == input.MaxIterJacobi ||
                    (this.MaxIterJacobi != null &&
                    this.MaxIterJacobi.Equals(input.MaxIterJacobi))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.PrecBathe != null)
                    hashCode = hashCode * 59 + this.PrecBathe.GetHashCode();
                if (this.NmaxIterBathe != null)
                    hashCode = hashCode * 59 + this.NmaxIterBathe.GetHashCode();
                if (this.PrecJacobi != null)
                    hashCode = hashCode * 59 + this.PrecJacobi.GetHashCode();
                if (this.MaxIterJacobi != null)
                    hashCode = hashCode * 59 + this.MaxIterJacobi.GetHashCode();
                return hashCode;
            }
        }

    }

}
