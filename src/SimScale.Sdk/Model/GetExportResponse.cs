/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// GetExportResponse
    /// </summary>
    [DataContract]
    public partial class GetExportResponse : IEquatable<GetExportResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetExportResponse" /> class.
        /// </summary>
        /// <param name="exportId">exportId.</param>
        /// <param name="status">RUNNING - Export is still in progress DONE - Export is done and ready for download FAILED - Export failed, please retry or contact support EXPIRED - Export is expired, please trigger a new export for the result .</param>
        /// <param name="url">The temporary url for downloading the exported result, only set when status is DONE..</param>
        /// <param name="urlExpiresAt">Timestamp that the url will be expired, only set when status is DONE. Note that this timestamp is not a guarantee, if the url expired prematurely, please retry this request to get a new one. .</param>
        /// <param name="errorCode">errorCode.</param>
        public GetExportResponse(Guid? exportId = default(Guid?), string status = default(string), string url = default(string), string urlExpiresAt = default(string), string errorCode = default(string))
        {
            this.ExportId = exportId;
            this.Status = status;
            this.Url = url;
            this.UrlExpiresAt = urlExpiresAt;
            this.ErrorCode = errorCode;
        }
        
        /// <summary>
        /// Gets or Sets ExportId
        /// </summary>
        [DataMember(Name="exportId", EmitDefaultValue=false)]
        public Guid? ExportId { get; set; }

        /// <summary>
        /// RUNNING - Export is still in progress DONE - Export is done and ready for download FAILED - Export failed, please retry or contact support EXPIRED - Export is expired, please trigger a new export for the result 
        /// </summary>
        /// <value>RUNNING - Export is still in progress DONE - Export is done and ready for download FAILED - Export failed, please retry or contact support EXPIRED - Export is expired, please trigger a new export for the result </value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// The temporary url for downloading the exported result, only set when status is DONE.
        /// </summary>
        /// <value>The temporary url for downloading the exported result, only set when status is DONE.</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Timestamp that the url will be expired, only set when status is DONE. Note that this timestamp is not a guarantee, if the url expired prematurely, please retry this request to get a new one. 
        /// </summary>
        /// <value>Timestamp that the url will be expired, only set when status is DONE. Note that this timestamp is not a guarantee, if the url expired prematurely, please retry this request to get a new one. </value>
        [DataMember(Name="urlExpiresAt", EmitDefaultValue=false)]
        public string UrlExpiresAt { get; set; }

        /// <summary>
        /// Gets or Sets ErrorCode
        /// </summary>
        [DataMember(Name="errorCode", EmitDefaultValue=false)]
        public string ErrorCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetExportResponse {\n");
            sb.Append("  ExportId: ").Append(ExportId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  UrlExpiresAt: ").Append(UrlExpiresAt).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetExportResponse);
        }

        /// <summary>
        /// Returns true if GetExportResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetExportResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetExportResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ExportId == input.ExportId ||
                    (this.ExportId != null &&
                    this.ExportId.Equals(input.ExportId))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.UrlExpiresAt == input.UrlExpiresAt ||
                    (this.UrlExpiresAt != null &&
                    this.UrlExpiresAt.Equals(input.UrlExpiresAt))
                ) && 
                (
                    this.ErrorCode == input.ErrorCode ||
                    (this.ErrorCode != null &&
                    this.ErrorCode.Equals(input.ErrorCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExportId != null)
                    hashCode = hashCode * 59 + this.ExportId.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.UrlExpiresAt != null)
                    hashCode = hashCode * 59 + this.UrlExpiresAt.GetHashCode();
                if (this.ErrorCode != null)
                    hashCode = hashCode * 59 + this.ErrorCode.GetHashCode();
                return hashCode;
            }
        }

    }

}
