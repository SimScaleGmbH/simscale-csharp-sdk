/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// ElectromagneticNumerics
    /// </summary>
    [DataContract]
    public partial class ElectromagneticNumerics : IEquatable<ElectromagneticNumerics>
    {
        /// <summary>
        /// Uses second order element shape functions for a higher accuracy. Especially recommended when calculating torques or forces. However this increases memory consumption and computational time.
        /// </summary>
        /// <value>Uses second order element shape functions for a higher accuracy. Especially recommended when calculating torques or forces. However this increases memory consumption and computational time.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ElementAccuracyEnum
        {
            /// <summary>
            /// Enum FIRSTORDER for value: FIRST_ORDER
            /// </summary>
            [EnumMember(Value = "FIRST_ORDER")]
            FIRSTORDER = 1,

            /// <summary>
            /// Enum SECONDORDER for value: SECOND_ORDER
            /// </summary>
            [EnumMember(Value = "SECOND_ORDER")]
            SECONDORDER = 2

        }

        /// <summary>
        /// Uses second order element shape functions for a higher accuracy. Especially recommended when calculating torques or forces. However this increases memory consumption and computational time.
        /// </summary>
        /// <value>Uses second order element shape functions for a higher accuracy. Especially recommended when calculating torques or forces. However this increases memory consumption and computational time.</value>
        [DataMember(Name="elementAccuracy", EmitDefaultValue=false)]
        public ElementAccuracyEnum? ElementAccuracy { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ElectromagneticNumerics" /> class.
        /// </summary>
        /// <param name="nonlinearResidual">The nonlinear residual error is computed as the difference between the calculated and expected flux density value when a BH curve is specified. (default to 0.0000010M).</param>
        /// <param name="elementAccuracy">Uses second order element shape functions for a higher accuracy. Especially recommended when calculating torques or forces. However this increases memory consumption and computational time. (default to ElementAccuracyEnum.FIRSTORDER).</param>
        public ElectromagneticNumerics(decimal? nonlinearResidual = default(decimal?), ElementAccuracyEnum? elementAccuracy = default(ElementAccuracyEnum?))
        {
            this.NonlinearResidual = nonlinearResidual;
            this.ElementAccuracy = elementAccuracy;
        }
        
        /// <summary>
        /// The nonlinear residual error is computed as the difference between the calculated and expected flux density value when a BH curve is specified.
        /// </summary>
        /// <value>The nonlinear residual error is computed as the difference between the calculated and expected flux density value when a BH curve is specified.</value>
        [DataMember(Name="nonlinearResidual", EmitDefaultValue=false)]
        public decimal? NonlinearResidual { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ElectromagneticNumerics {\n");
            sb.Append("  NonlinearResidual: ").Append(NonlinearResidual).Append("\n");
            sb.Append("  ElementAccuracy: ").Append(ElementAccuracy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ElectromagneticNumerics);
        }

        /// <summary>
        /// Returns true if ElectromagneticNumerics instances are equal
        /// </summary>
        /// <param name="input">Instance of ElectromagneticNumerics to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ElectromagneticNumerics input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NonlinearResidual == input.NonlinearResidual ||
                    (this.NonlinearResidual != null &&
                    this.NonlinearResidual.Equals(input.NonlinearResidual))
                ) && 
                (
                    this.ElementAccuracy == input.ElementAccuracy ||
                    this.ElementAccuracy.Equals(input.ElementAccuracy)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NonlinearResidual != null)
                    hashCode = hashCode * 59 + this.NonlinearResidual.GetHashCode();
                hashCode = hashCode * 59 + this.ElementAccuracy.GetHashCode();
                return hashCode;
            }
        }

    }

}
