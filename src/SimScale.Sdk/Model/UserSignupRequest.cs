/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// UserSignupRequest
    /// </summary>
    [DataContract]
    public partial class UserSignupRequest : IEquatable<UserSignupRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserSignupRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserSignupRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserSignupRequest" /> class.
        /// </summary>
        /// <param name="email">email (required).</param>
        /// <param name="firstname">firstname (required).</param>
        /// <param name="lastname">lastname (required).</param>
        /// <param name="consentTermsConditionsPrivacy">I agree to the End User License Terms and the Privacy Policy (required).</param>
        /// <param name="consentToBeContacted">SimScale may occasionally contact you via e-mail to present you with similar goods and services of SimScale unless you have objected to such use of your e-mail address. (required).</param>
        public UserSignupRequest(string email = default(string), string firstname = default(string), string lastname = default(string), bool? consentTermsConditionsPrivacy = default(bool?), bool? consentToBeContacted = default(bool?))
        {
            // to ensure "email" is required (not null)
            this.Email = email ?? throw new ArgumentNullException("email is a required property for UserSignupRequest and cannot be null");
            // to ensure "firstname" is required (not null)
            this.Firstname = firstname ?? throw new ArgumentNullException("firstname is a required property for UserSignupRequest and cannot be null");
            // to ensure "lastname" is required (not null)
            this.Lastname = lastname ?? throw new ArgumentNullException("lastname is a required property for UserSignupRequest and cannot be null");
            // to ensure "consentTermsConditionsPrivacy" is required (not null)
            this.ConsentTermsConditionsPrivacy = consentTermsConditionsPrivacy ?? throw new ArgumentNullException("consentTermsConditionsPrivacy is a required property for UserSignupRequest and cannot be null");
            // to ensure "consentToBeContacted" is required (not null)
            this.ConsentToBeContacted = consentToBeContacted ?? throw new ArgumentNullException("consentToBeContacted is a required property for UserSignupRequest and cannot be null");
        }
        
        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Firstname
        /// </summary>
        [DataMember(Name="firstname", EmitDefaultValue=false)]
        public string Firstname { get; set; }

        /// <summary>
        /// Gets or Sets Lastname
        /// </summary>
        [DataMember(Name="lastname", EmitDefaultValue=false)]
        public string Lastname { get; set; }

        /// <summary>
        /// I agree to the End User License Terms and the Privacy Policy
        /// </summary>
        /// <value>I agree to the End User License Terms and the Privacy Policy</value>
        [DataMember(Name="consentTermsConditionsPrivacy", EmitDefaultValue=false)]
        public bool? ConsentTermsConditionsPrivacy { get; set; }

        /// <summary>
        /// SimScale may occasionally contact you via e-mail to present you with similar goods and services of SimScale unless you have objected to such use of your e-mail address.
        /// </summary>
        /// <value>SimScale may occasionally contact you via e-mail to present you with similar goods and services of SimScale unless you have objected to such use of your e-mail address.</value>
        [DataMember(Name="consentToBeContacted", EmitDefaultValue=false)]
        public bool? ConsentToBeContacted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserSignupRequest {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Firstname: ").Append(Firstname).Append("\n");
            sb.Append("  Lastname: ").Append(Lastname).Append("\n");
            sb.Append("  ConsentTermsConditionsPrivacy: ").Append(ConsentTermsConditionsPrivacy).Append("\n");
            sb.Append("  ConsentToBeContacted: ").Append(ConsentToBeContacted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserSignupRequest);
        }

        /// <summary>
        /// Returns true if UserSignupRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UserSignupRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserSignupRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Firstname == input.Firstname ||
                    (this.Firstname != null &&
                    this.Firstname.Equals(input.Firstname))
                ) && 
                (
                    this.Lastname == input.Lastname ||
                    (this.Lastname != null &&
                    this.Lastname.Equals(input.Lastname))
                ) && 
                (
                    this.ConsentTermsConditionsPrivacy == input.ConsentTermsConditionsPrivacy ||
                    (this.ConsentTermsConditionsPrivacy != null &&
                    this.ConsentTermsConditionsPrivacy.Equals(input.ConsentTermsConditionsPrivacy))
                ) && 
                (
                    this.ConsentToBeContacted == input.ConsentToBeContacted ||
                    (this.ConsentToBeContacted != null &&
                    this.ConsentToBeContacted.Equals(input.ConsentToBeContacted))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Firstname != null)
                    hashCode = hashCode * 59 + this.Firstname.GetHashCode();
                if (this.Lastname != null)
                    hashCode = hashCode * 59 + this.Lastname.GetHashCode();
                if (this.ConsentTermsConditionsPrivacy != null)
                    hashCode = hashCode * 59 + this.ConsentTermsConditionsPrivacy.GetHashCode();
                if (this.ConsentToBeContacted != null)
                    hashCode = hashCode * 59 + this.ConsentToBeContacted.GetHashCode();
                return hashCode;
            }
        }

    }

}
