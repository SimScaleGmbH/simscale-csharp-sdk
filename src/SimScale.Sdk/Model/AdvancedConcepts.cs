/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// AdvancedConcepts
    /// </summary>
    [DataContract]
    public partial class AdvancedConcepts : IEquatable<AdvancedConcepts>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdvancedConcepts" /> class.
        /// </summary>
        /// <param name="rotatingZones">rotatingZones.</param>
        /// <param name="porousMediums">porousMediums.</param>
        /// <param name="solidBodyMotions">solidBodyMotions.</param>
        /// <param name="powerSources">powerSources.</param>
        /// <param name="momentumSources">momentumSources.</param>
        /// <param name="passiveScalarSources">passiveScalarSources.</param>
        /// <param name="thermalResistanceNetworks">thermalResistanceNetworks.</param>
        public AdvancedConcepts(List<OneOfAdvancedConceptsRotatingZones> rotatingZones = default(List<OneOfAdvancedConceptsRotatingZones>), List<OneOfAdvancedConceptsPorousMediums> porousMediums = default(List<OneOfAdvancedConceptsPorousMediums>), List<OneOfAdvancedConceptsSolidBodyMotions> solidBodyMotions = default(List<OneOfAdvancedConceptsSolidBodyMotions>), List<OneOfAdvancedConceptsPowerSources> powerSources = default(List<OneOfAdvancedConceptsPowerSources>), List<OneOfAdvancedConceptsMomentumSources> momentumSources = default(List<OneOfAdvancedConceptsMomentumSources>), List<OneOfAdvancedConceptsPassiveScalarSources> passiveScalarSources = default(List<OneOfAdvancedConceptsPassiveScalarSources>), List<OneOfAdvancedConceptsThermalResistanceNetworks> thermalResistanceNetworks = default(List<OneOfAdvancedConceptsThermalResistanceNetworks>))
        {
            this.RotatingZones = rotatingZones;
            this.PorousMediums = porousMediums;
            this.SolidBodyMotions = solidBodyMotions;
            this.PowerSources = powerSources;
            this.MomentumSources = momentumSources;
            this.PassiveScalarSources = passiveScalarSources;
            this.ThermalResistanceNetworks = thermalResistanceNetworks;
        }
        
        /// <summary>
        /// Gets or Sets RotatingZones
        /// </summary>
        [DataMember(Name="rotatingZones", EmitDefaultValue=false)]
        public List<OneOfAdvancedConceptsRotatingZones> RotatingZones { get; set; }

        /// <summary>
        /// Gets or Sets PorousMediums
        /// </summary>
        [DataMember(Name="porousMediums", EmitDefaultValue=false)]
        public List<OneOfAdvancedConceptsPorousMediums> PorousMediums { get; set; }

        /// <summary>
        /// Gets or Sets SolidBodyMotions
        /// </summary>
        [DataMember(Name="solidBodyMotions", EmitDefaultValue=false)]
        public List<OneOfAdvancedConceptsSolidBodyMotions> SolidBodyMotions { get; set; }

        /// <summary>
        /// Gets or Sets PowerSources
        /// </summary>
        [DataMember(Name="powerSources", EmitDefaultValue=false)]
        public List<OneOfAdvancedConceptsPowerSources> PowerSources { get; set; }

        /// <summary>
        /// Gets or Sets MomentumSources
        /// </summary>
        [DataMember(Name="momentumSources", EmitDefaultValue=false)]
        public List<OneOfAdvancedConceptsMomentumSources> MomentumSources { get; set; }

        /// <summary>
        /// Gets or Sets PassiveScalarSources
        /// </summary>
        [DataMember(Name="passiveScalarSources", EmitDefaultValue=false)]
        public List<OneOfAdvancedConceptsPassiveScalarSources> PassiveScalarSources { get; set; }

        /// <summary>
        /// Gets or Sets ThermalResistanceNetworks
        /// </summary>
        [DataMember(Name="thermalResistanceNetworks", EmitDefaultValue=false)]
        public List<OneOfAdvancedConceptsThermalResistanceNetworks> ThermalResistanceNetworks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdvancedConcepts {\n");
            sb.Append("  RotatingZones: ").Append(RotatingZones).Append("\n");
            sb.Append("  PorousMediums: ").Append(PorousMediums).Append("\n");
            sb.Append("  SolidBodyMotions: ").Append(SolidBodyMotions).Append("\n");
            sb.Append("  PowerSources: ").Append(PowerSources).Append("\n");
            sb.Append("  MomentumSources: ").Append(MomentumSources).Append("\n");
            sb.Append("  PassiveScalarSources: ").Append(PassiveScalarSources).Append("\n");
            sb.Append("  ThermalResistanceNetworks: ").Append(ThermalResistanceNetworks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdvancedConcepts);
        }

        /// <summary>
        /// Returns true if AdvancedConcepts instances are equal
        /// </summary>
        /// <param name="input">Instance of AdvancedConcepts to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdvancedConcepts input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RotatingZones == input.RotatingZones ||
                    this.RotatingZones != null &&
                    input.RotatingZones != null &&
                    this.RotatingZones.SequenceEqual(input.RotatingZones)
                ) && 
                (
                    this.PorousMediums == input.PorousMediums ||
                    this.PorousMediums != null &&
                    input.PorousMediums != null &&
                    this.PorousMediums.SequenceEqual(input.PorousMediums)
                ) && 
                (
                    this.SolidBodyMotions == input.SolidBodyMotions ||
                    this.SolidBodyMotions != null &&
                    input.SolidBodyMotions != null &&
                    this.SolidBodyMotions.SequenceEqual(input.SolidBodyMotions)
                ) && 
                (
                    this.PowerSources == input.PowerSources ||
                    this.PowerSources != null &&
                    input.PowerSources != null &&
                    this.PowerSources.SequenceEqual(input.PowerSources)
                ) && 
                (
                    this.MomentumSources == input.MomentumSources ||
                    this.MomentumSources != null &&
                    input.MomentumSources != null &&
                    this.MomentumSources.SequenceEqual(input.MomentumSources)
                ) && 
                (
                    this.PassiveScalarSources == input.PassiveScalarSources ||
                    this.PassiveScalarSources != null &&
                    input.PassiveScalarSources != null &&
                    this.PassiveScalarSources.SequenceEqual(input.PassiveScalarSources)
                ) && 
                (
                    this.ThermalResistanceNetworks == input.ThermalResistanceNetworks ||
                    this.ThermalResistanceNetworks != null &&
                    input.ThermalResistanceNetworks != null &&
                    this.ThermalResistanceNetworks.SequenceEqual(input.ThermalResistanceNetworks)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RotatingZones != null)
                    hashCode = hashCode * 59 + this.RotatingZones.GetHashCode();
                if (this.PorousMediums != null)
                    hashCode = hashCode * 59 + this.PorousMediums.GetHashCode();
                if (this.SolidBodyMotions != null)
                    hashCode = hashCode * 59 + this.SolidBodyMotions.GetHashCode();
                if (this.PowerSources != null)
                    hashCode = hashCode * 59 + this.PowerSources.GetHashCode();
                if (this.MomentumSources != null)
                    hashCode = hashCode * 59 + this.MomentumSources.GetHashCode();
                if (this.PassiveScalarSources != null)
                    hashCode = hashCode * 59 + this.PassiveScalarSources.GetHashCode();
                if (this.ThermalResistanceNetworks != null)
                    hashCode = hashCode * 59 + this.ThermalResistanceNetworks.GetHashCode();
                return hashCode;
            }
        }

    }

}
