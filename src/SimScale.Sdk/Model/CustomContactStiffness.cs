/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// CustomContactStiffness
    /// </summary>
    [DataContract]
    public partial class CustomContactStiffness : OneOfPenaltyMethodContactStiffness, IEquatable<CustomContactStiffness>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomContactStiffness" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomContactStiffness() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomContactStiffness" /> class.
        /// </summary>
        /// <param name="type">Schema name: CustomContactStiffness (required) (default to &quot;CUSTOM_CONTACT_STIFFNESS&quot;).</param>
        /// <param name="penaltyCoefficient">&lt;p&gt;Define the penalty coefficient for the contact pair. As a good starting point this value should be about 5-50 times as high as the softest of the materials in this contact definition and below 1e16. A higher value reduces interpenetration but may also lead to numerical instabilities and divergence. The independence of the results from this parameter should be checked.&lt;/p&gt; (default to 100000000000M).</param>
        public CustomContactStiffness(string type = "CUSTOM_CONTACT_STIFFNESS", decimal? penaltyCoefficient = default(decimal?))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for CustomContactStiffness and cannot be null");
            this.PenaltyCoefficient = penaltyCoefficient;
        }
        
        /// <summary>
        /// Schema name: CustomContactStiffness
        /// </summary>
        /// <value>Schema name: CustomContactStiffness</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// &lt;p&gt;Define the penalty coefficient for the contact pair. As a good starting point this value should be about 5-50 times as high as the softest of the materials in this contact definition and below 1e16. A higher value reduces interpenetration but may also lead to numerical instabilities and divergence. The independence of the results from this parameter should be checked.&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;Define the penalty coefficient for the contact pair. As a good starting point this value should be about 5-50 times as high as the softest of the materials in this contact definition and below 1e16. A higher value reduces interpenetration but may also lead to numerical instabilities and divergence. The independence of the results from this parameter should be checked.&lt;/p&gt;</value>
        [DataMember(Name="penaltyCoefficient", EmitDefaultValue=false)]
        public decimal? PenaltyCoefficient { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomContactStiffness {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  PenaltyCoefficient: ").Append(PenaltyCoefficient).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomContactStiffness);
        }

        /// <summary>
        /// Returns true if CustomContactStiffness instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomContactStiffness to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomContactStiffness input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.PenaltyCoefficient == input.PenaltyCoefficient ||
                    (this.PenaltyCoefficient != null &&
                    this.PenaltyCoefficient.Equals(input.PenaltyCoefficient))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.PenaltyCoefficient != null)
                    hashCode = hashCode * 59 + this.PenaltyCoefficient.GetHashCode();
                return hashCode;
            }
        }

    }

}
