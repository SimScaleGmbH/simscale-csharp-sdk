/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// Computes the &lt;b&gt;Operative Temperature&lt;/b&gt;. It is defined as the uniform surface temperature of an imaginary black enclosure in which an every point of the domain would exchange the same amount of convective and radiative heat as in the actual nonuniform space
    /// </summary>
    [DataContract]
    public partial class FieldCalculationsOperativeTemperatureResultControl : OneOfFluidResultControlsFieldCalculations, IEquatable<FieldCalculationsOperativeTemperatureResultControl>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FieldCalculationsOperativeTemperatureResultControl" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FieldCalculationsOperativeTemperatureResultControl() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FieldCalculationsOperativeTemperatureResultControl" /> class.
        /// </summary>
        /// <param name="type">Computes the &lt;b&gt;Operative Temperature&lt;/b&gt;. It is defined as the uniform surface temperature of an imaginary black enclosure in which an every point of the domain would exchange the same amount of convective and radiative heat as in the actual nonuniform space  Schema name: FieldCalculationsOperativeTemperatureResultControl (required) (default to &quot;OPERATIVE_TEMPERATURE&quot;).</param>
        /// <param name="name">name.</param>
        /// <param name="resultType">resultType.</param>
        /// <param name="mrtSolarParameters">mrtSolarParameters.</param>
        public FieldCalculationsOperativeTemperatureResultControl(string type = "OPERATIVE_TEMPERATURE", string name = default(string), OperativeTemperatureResultType resultType = default(OperativeTemperatureResultType), MrtSolarParameters mrtSolarParameters = default(MrtSolarParameters))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for FieldCalculationsOperativeTemperatureResultControl and cannot be null");
            this.Name = name;
            this.ResultType = resultType;
            this.MrtSolarParameters = mrtSolarParameters;
        }
        
        /// <summary>
        /// Computes the &lt;b&gt;Operative Temperature&lt;/b&gt;. It is defined as the uniform surface temperature of an imaginary black enclosure in which an every point of the domain would exchange the same amount of convective and radiative heat as in the actual nonuniform space  Schema name: FieldCalculationsOperativeTemperatureResultControl
        /// </summary>
        /// <value>Computes the &lt;b&gt;Operative Temperature&lt;/b&gt;. It is defined as the uniform surface temperature of an imaginary black enclosure in which an every point of the domain would exchange the same amount of convective and radiative heat as in the actual nonuniform space  Schema name: FieldCalculationsOperativeTemperatureResultControl</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ResultType
        /// </summary>
        [DataMember(Name="resultType", EmitDefaultValue=false)]
        public OperativeTemperatureResultType ResultType { get; set; }

        /// <summary>
        /// Gets or Sets MrtSolarParameters
        /// </summary>
        [DataMember(Name="mrtSolarParameters", EmitDefaultValue=false)]
        public MrtSolarParameters MrtSolarParameters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FieldCalculationsOperativeTemperatureResultControl {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ResultType: ").Append(ResultType).Append("\n");
            sb.Append("  MrtSolarParameters: ").Append(MrtSolarParameters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FieldCalculationsOperativeTemperatureResultControl);
        }

        /// <summary>
        /// Returns true if FieldCalculationsOperativeTemperatureResultControl instances are equal
        /// </summary>
        /// <param name="input">Instance of FieldCalculationsOperativeTemperatureResultControl to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FieldCalculationsOperativeTemperatureResultControl input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ResultType == input.ResultType ||
                    (this.ResultType != null &&
                    this.ResultType.Equals(input.ResultType))
                ) && 
                (
                    this.MrtSolarParameters == input.MrtSolarParameters ||
                    (this.MrtSolarParameters != null &&
                    this.MrtSolarParameters.Equals(input.MrtSolarParameters))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ResultType != null)
                    hashCode = hashCode * 59 + this.ResultType.GetHashCode();
                if (this.MrtSolarParameters != null)
                    hashCode = hashCode * 59 + this.MrtSolarParameters.GetHashCode();
                return hashCode;
            }
        }

    }

}
