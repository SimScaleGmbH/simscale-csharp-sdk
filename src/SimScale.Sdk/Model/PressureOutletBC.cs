/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// This boundary condition allows to specify a &lt;b&gt;pressure&lt;/b&gt; value at an outlet boundary.
    /// </summary>
    [DataContract]
    public partial class PressureOutletBC : OneOfCompressibleBoundaryConditions, OneOfConjugateHeatTransferBoundaryConditions, OneOfConvectiveHeatTransferBoundaryConditions, OneOfCoupledConjugateHeatTransferBoundaryConditions, OneOfEmbeddedBoundaryBoundaryConditions, OneOfFlowDomainBoundariesXMAX, OneOfFlowDomainBoundariesXMIN, OneOfFlowDomainBoundariesYMAX, OneOfFlowDomainBoundariesYMIN, OneOfFlowDomainBoundariesZMAX, OneOfFlowDomainBoundariesZMIN, OneOfIncompressibleBoundaryConditions, OneOfMultiphaseBoundaryConditions, OneOfSimericsAnalysisBoundaryConditions, IEquatable<PressureOutletBC>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PressureOutletBC" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PressureOutletBC() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PressureOutletBC" /> class.
        /// </summary>
        /// <param name="type">This boundary condition allows to specify a &lt;b&gt;pressure&lt;/b&gt; value at an outlet boundary.  Schema name: PressureOutletBC (required) (default to &quot;PRESSURE_OUTLET_V30&quot;).</param>
        /// <param name="name">name.</param>
        /// <param name="pressure">pressure.</param>
        /// <param name="pressureRgh">pressureRgh.</param>
        /// <param name="gaugePressure">gaugePressure.</param>
        /// <param name="gaugePressureRgh">gaugePressureRgh.</param>
        /// <param name="netRadiativeHeatFlux">netRadiativeHeatFlux.</param>
        /// <param name="radiativeIntensityRay">radiativeIntensityRay.</param>
        /// <param name="relativeHumidity">relativeHumidity.</param>
        /// <param name="topologicalReference">topologicalReference.</param>
        public PressureOutletBC(string type = "PRESSURE_OUTLET_V30", string name = default(string), OneOfPressureOutletBCPressure pressure = default(OneOfPressureOutletBCPressure), OneOfPressureOutletBCPressureRgh pressureRgh = default(OneOfPressureOutletBCPressureRgh), OneOfPressureOutletBCGaugePressure gaugePressure = default(OneOfPressureOutletBCGaugePressure), OneOfPressureOutletBCGaugePressureRgh gaugePressureRgh = default(OneOfPressureOutletBCGaugePressureRgh), OneOfPressureOutletBCNetRadiativeHeatFlux netRadiativeHeatFlux = default(OneOfPressureOutletBCNetRadiativeHeatFlux), OneOfPressureOutletBCRadiativeIntensityRay radiativeIntensityRay = default(OneOfPressureOutletBCRadiativeIntensityRay), InletOutletRHBC relativeHumidity = default(InletOutletRHBC), TopologicalReference topologicalReference = default(TopologicalReference))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for PressureOutletBC and cannot be null");
            this.Name = name;
            this.Pressure = pressure;
            this.PressureRgh = pressureRgh;
            this.GaugePressure = gaugePressure;
            this.GaugePressureRgh = gaugePressureRgh;
            this.NetRadiativeHeatFlux = netRadiativeHeatFlux;
            this.RadiativeIntensityRay = radiativeIntensityRay;
            this.RelativeHumidity = relativeHumidity;
            this.TopologicalReference = topologicalReference;
        }
        
        /// <summary>
        /// This boundary condition allows to specify a &lt;b&gt;pressure&lt;/b&gt; value at an outlet boundary.  Schema name: PressureOutletBC
        /// </summary>
        /// <value>This boundary condition allows to specify a &lt;b&gt;pressure&lt;/b&gt; value at an outlet boundary.  Schema name: PressureOutletBC</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Pressure
        /// </summary>
        [DataMember(Name="pressure", EmitDefaultValue=false)]
        public OneOfPressureOutletBCPressure Pressure { get; set; }

        /// <summary>
        /// Gets or Sets PressureRgh
        /// </summary>
        [DataMember(Name="pressureRgh", EmitDefaultValue=false)]
        public OneOfPressureOutletBCPressureRgh PressureRgh { get; set; }

        /// <summary>
        /// Gets or Sets GaugePressure
        /// </summary>
        [DataMember(Name="gaugePressure", EmitDefaultValue=false)]
        public OneOfPressureOutletBCGaugePressure GaugePressure { get; set; }

        /// <summary>
        /// Gets or Sets GaugePressureRgh
        /// </summary>
        [DataMember(Name="gaugePressureRgh", EmitDefaultValue=false)]
        public OneOfPressureOutletBCGaugePressureRgh GaugePressureRgh { get; set; }

        /// <summary>
        /// Gets or Sets NetRadiativeHeatFlux
        /// </summary>
        [DataMember(Name="netRadiativeHeatFlux", EmitDefaultValue=false)]
        public OneOfPressureOutletBCNetRadiativeHeatFlux NetRadiativeHeatFlux { get; set; }

        /// <summary>
        /// Gets or Sets RadiativeIntensityRay
        /// </summary>
        [DataMember(Name="radiativeIntensityRay", EmitDefaultValue=false)]
        public OneOfPressureOutletBCRadiativeIntensityRay RadiativeIntensityRay { get; set; }

        /// <summary>
        /// Gets or Sets RelativeHumidity
        /// </summary>
        [DataMember(Name="relativeHumidity", EmitDefaultValue=false)]
        public InletOutletRHBC RelativeHumidity { get; set; }

        /// <summary>
        /// Gets or Sets TopologicalReference
        /// </summary>
        [DataMember(Name="topologicalReference", EmitDefaultValue=false)]
        public TopologicalReference TopologicalReference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PressureOutletBC {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Pressure: ").Append(Pressure).Append("\n");
            sb.Append("  PressureRgh: ").Append(PressureRgh).Append("\n");
            sb.Append("  GaugePressure: ").Append(GaugePressure).Append("\n");
            sb.Append("  GaugePressureRgh: ").Append(GaugePressureRgh).Append("\n");
            sb.Append("  NetRadiativeHeatFlux: ").Append(NetRadiativeHeatFlux).Append("\n");
            sb.Append("  RadiativeIntensityRay: ").Append(RadiativeIntensityRay).Append("\n");
            sb.Append("  RelativeHumidity: ").Append(RelativeHumidity).Append("\n");
            sb.Append("  TopologicalReference: ").Append(TopologicalReference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PressureOutletBC);
        }

        /// <summary>
        /// Returns true if PressureOutletBC instances are equal
        /// </summary>
        /// <param name="input">Instance of PressureOutletBC to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PressureOutletBC input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Pressure == input.Pressure ||
                    (this.Pressure != null &&
                    this.Pressure.Equals(input.Pressure))
                ) && 
                (
                    this.PressureRgh == input.PressureRgh ||
                    (this.PressureRgh != null &&
                    this.PressureRgh.Equals(input.PressureRgh))
                ) && 
                (
                    this.GaugePressure == input.GaugePressure ||
                    (this.GaugePressure != null &&
                    this.GaugePressure.Equals(input.GaugePressure))
                ) && 
                (
                    this.GaugePressureRgh == input.GaugePressureRgh ||
                    (this.GaugePressureRgh != null &&
                    this.GaugePressureRgh.Equals(input.GaugePressureRgh))
                ) && 
                (
                    this.NetRadiativeHeatFlux == input.NetRadiativeHeatFlux ||
                    (this.NetRadiativeHeatFlux != null &&
                    this.NetRadiativeHeatFlux.Equals(input.NetRadiativeHeatFlux))
                ) && 
                (
                    this.RadiativeIntensityRay == input.RadiativeIntensityRay ||
                    (this.RadiativeIntensityRay != null &&
                    this.RadiativeIntensityRay.Equals(input.RadiativeIntensityRay))
                ) && 
                (
                    this.RelativeHumidity == input.RelativeHumidity ||
                    (this.RelativeHumidity != null &&
                    this.RelativeHumidity.Equals(input.RelativeHumidity))
                ) && 
                (
                    this.TopologicalReference == input.TopologicalReference ||
                    (this.TopologicalReference != null &&
                    this.TopologicalReference.Equals(input.TopologicalReference))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Pressure != null)
                    hashCode = hashCode * 59 + this.Pressure.GetHashCode();
                if (this.PressureRgh != null)
                    hashCode = hashCode * 59 + this.PressureRgh.GetHashCode();
                if (this.GaugePressure != null)
                    hashCode = hashCode * 59 + this.GaugePressure.GetHashCode();
                if (this.GaugePressureRgh != null)
                    hashCode = hashCode * 59 + this.GaugePressureRgh.GetHashCode();
                if (this.NetRadiativeHeatFlux != null)
                    hashCode = hashCode * 59 + this.NetRadiativeHeatFlux.GetHashCode();
                if (this.RadiativeIntensityRay != null)
                    hashCode = hashCode * 59 + this.RadiativeIntensityRay.GetHashCode();
                if (this.RelativeHumidity != null)
                    hashCode = hashCode * 59 + this.RelativeHumidity.GetHashCode();
                if (this.TopologicalReference != null)
                    hashCode = hashCode * 59 + this.TopologicalReference.GetHashCode();
                return hashCode;
            }
        }

    }

}
