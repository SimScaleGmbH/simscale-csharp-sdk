/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// &lt;p&gt;&lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/meshing/tet-dominant/#layer-inflation&#39; target&#x3D;&#39;_blank&#39;&gt;&lt;b&gt;Layer inflation&lt;/b&gt;&lt;/a&gt; allows the creation of prismatic boundary layers for certain mesh regions.&lt;/p&gt;&lt;p&gt;Prismatic layers are mostly used in CFD simulations on no-slip walls in order to efficiently capture the boundary layer velocity profile, but they may be also used in certain structural simulations like stamping or deep-drawing processes.&lt;/p&gt;&lt;p&gt;&lt;img src&#x3D;\&quot;/spec/resources/help/imgs/boundary-layer.png\&quot; class&#x3D;\&quot;helpPopupImage\&quot;/&gt; The figure shows a sample mesh with boundary layers added.&lt;/p&gt;
    /// </summary>
    [DataContract]
    public partial class LayerRefinement : IEquatable<LayerRefinement>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LayerRefinement" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LayerRefinement() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LayerRefinement" /> class.
        /// </summary>
        /// <param name="type">type (required) (default to &quot;LAYER_INFLATION&quot;).</param>
        /// <param name="name">name (default to &quot;Layer inflation&quot;).</param>
        /// <param name="totalThickness">This parameter controls the &lt;b&gt;overall thickness&lt;/b&gt; of all the generated boundary layers together. This value must be smaller than the minimal geometry thickness at the specified locations, otherwise the meshing will fail. (default to 0.01M).</param>
        /// <param name="layers">The number of &lt;b&gt;layers&lt;/b&gt; defines how many prismatic boundary layers should be created. (default to 5).</param>
        /// <param name="stretchFactor">&lt;p&gt;The &lt;b&gt;stretch factor&lt;/b&gt; determines how the boundary layers grow in thickness from the wall to the internal mesh. The larger the ratio, the larger each element layer will be in comparison to the neighbouring layer closer to the wall.&lt;/p&gt;&lt;p&gt;&lt;img src&#x3D;\&quot;/spec/resources/help/imgs/shm_bl_expansion-ratio.png\&quot; class&#x3D;\&quot;helpPopupImage\&quot;/&gt; The figure shows a ratio of 1.3.&lt;/p&gt; (default to 1.3M).</param>
        /// <param name="allowQuadrangles">&lt;p&gt;This parameter determines if &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/meshing/tet-dominant/#quadrangles&#39; target&#x3D;&#39;_blank&#39;&gt;&lt;b&gt;quadrangular surface elements&lt;/b&gt;&lt;/a&gt; shall be allowed. When disabled, only triangles will be used. Meshing with triangles only is usually more robust while quadrangular elements may lead to better results.&lt;/p&gt;&lt;p&gt;&lt;img src&#x3D;\&quot;/spec/resources/help/imgs/allow_quads_comparison.png\&quot; class&#x3D;\&quot;helpPopupImage\&quot;/&gt; The figure shows sample meshes with quadrangular surface elements disallowed (left) and allowed (right).&lt;/p&gt; (default to false).</param>
        /// <param name="topologicalReference">topologicalReference.</param>
        public LayerRefinement(string type = "LAYER_INFLATION", string name = default(string), decimal? totalThickness = default(decimal?), int? layers = default(int?), decimal? stretchFactor = default(decimal?), bool? allowQuadrangles = default(bool?), TopologicalReference topologicalReference = default(TopologicalReference))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for LayerRefinement and cannot be null");
            this.Name = name;
            this.TotalThickness = totalThickness;
            this.Layers = layers;
            this.StretchFactor = stretchFactor;
            this.AllowQuadrangles = allowQuadrangles;
            this.TopologicalReference = topologicalReference;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// This parameter controls the &lt;b&gt;overall thickness&lt;/b&gt; of all the generated boundary layers together. This value must be smaller than the minimal geometry thickness at the specified locations, otherwise the meshing will fail.
        /// </summary>
        /// <value>This parameter controls the &lt;b&gt;overall thickness&lt;/b&gt; of all the generated boundary layers together. This value must be smaller than the minimal geometry thickness at the specified locations, otherwise the meshing will fail.</value>
        [DataMember(Name="totalThickness", EmitDefaultValue=false)]
        public decimal? TotalThickness { get; set; }

        /// <summary>
        /// The number of &lt;b&gt;layers&lt;/b&gt; defines how many prismatic boundary layers should be created.
        /// </summary>
        /// <value>The number of &lt;b&gt;layers&lt;/b&gt; defines how many prismatic boundary layers should be created.</value>
        [DataMember(Name="layers", EmitDefaultValue=false)]
        public int? Layers { get; set; }

        /// <summary>
        /// &lt;p&gt;The &lt;b&gt;stretch factor&lt;/b&gt; determines how the boundary layers grow in thickness from the wall to the internal mesh. The larger the ratio, the larger each element layer will be in comparison to the neighbouring layer closer to the wall.&lt;/p&gt;&lt;p&gt;&lt;img src&#x3D;\&quot;/spec/resources/help/imgs/shm_bl_expansion-ratio.png\&quot; class&#x3D;\&quot;helpPopupImage\&quot;/&gt; The figure shows a ratio of 1.3.&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;The &lt;b&gt;stretch factor&lt;/b&gt; determines how the boundary layers grow in thickness from the wall to the internal mesh. The larger the ratio, the larger each element layer will be in comparison to the neighbouring layer closer to the wall.&lt;/p&gt;&lt;p&gt;&lt;img src&#x3D;\&quot;/spec/resources/help/imgs/shm_bl_expansion-ratio.png\&quot; class&#x3D;\&quot;helpPopupImage\&quot;/&gt; The figure shows a ratio of 1.3.&lt;/p&gt;</value>
        [DataMember(Name="stretchFactor", EmitDefaultValue=false)]
        public decimal? StretchFactor { get; set; }

        /// <summary>
        /// &lt;p&gt;This parameter determines if &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/meshing/tet-dominant/#quadrangles&#39; target&#x3D;&#39;_blank&#39;&gt;&lt;b&gt;quadrangular surface elements&lt;/b&gt;&lt;/a&gt; shall be allowed. When disabled, only triangles will be used. Meshing with triangles only is usually more robust while quadrangular elements may lead to better results.&lt;/p&gt;&lt;p&gt;&lt;img src&#x3D;\&quot;/spec/resources/help/imgs/allow_quads_comparison.png\&quot; class&#x3D;\&quot;helpPopupImage\&quot;/&gt; The figure shows sample meshes with quadrangular surface elements disallowed (left) and allowed (right).&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;This parameter determines if &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/meshing/tet-dominant/#quadrangles&#39; target&#x3D;&#39;_blank&#39;&gt;&lt;b&gt;quadrangular surface elements&lt;/b&gt;&lt;/a&gt; shall be allowed. When disabled, only triangles will be used. Meshing with triangles only is usually more robust while quadrangular elements may lead to better results.&lt;/p&gt;&lt;p&gt;&lt;img src&#x3D;\&quot;/spec/resources/help/imgs/allow_quads_comparison.png\&quot; class&#x3D;\&quot;helpPopupImage\&quot;/&gt; The figure shows sample meshes with quadrangular surface elements disallowed (left) and allowed (right).&lt;/p&gt;</value>
        [DataMember(Name="allowQuadrangles", EmitDefaultValue=false)]
        public bool? AllowQuadrangles { get; set; }

        /// <summary>
        /// Gets or Sets TopologicalReference
        /// </summary>
        [DataMember(Name="topologicalReference", EmitDefaultValue=false)]
        public TopologicalReference TopologicalReference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LayerRefinement {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  TotalThickness: ").Append(TotalThickness).Append("\n");
            sb.Append("  Layers: ").Append(Layers).Append("\n");
            sb.Append("  StretchFactor: ").Append(StretchFactor).Append("\n");
            sb.Append("  AllowQuadrangles: ").Append(AllowQuadrangles).Append("\n");
            sb.Append("  TopologicalReference: ").Append(TopologicalReference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LayerRefinement);
        }

        /// <summary>
        /// Returns true if LayerRefinement instances are equal
        /// </summary>
        /// <param name="input">Instance of LayerRefinement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LayerRefinement input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.TotalThickness == input.TotalThickness ||
                    (this.TotalThickness != null &&
                    this.TotalThickness.Equals(input.TotalThickness))
                ) && 
                (
                    this.Layers == input.Layers ||
                    (this.Layers != null &&
                    this.Layers.Equals(input.Layers))
                ) && 
                (
                    this.StretchFactor == input.StretchFactor ||
                    (this.StretchFactor != null &&
                    this.StretchFactor.Equals(input.StretchFactor))
                ) && 
                (
                    this.AllowQuadrangles == input.AllowQuadrangles ||
                    (this.AllowQuadrangles != null &&
                    this.AllowQuadrangles.Equals(input.AllowQuadrangles))
                ) && 
                (
                    this.TopologicalReference == input.TopologicalReference ||
                    (this.TopologicalReference != null &&
                    this.TopologicalReference.Equals(input.TopologicalReference))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.TotalThickness != null)
                    hashCode = hashCode * 59 + this.TotalThickness.GetHashCode();
                if (this.Layers != null)
                    hashCode = hashCode * 59 + this.Layers.GetHashCode();
                if (this.StretchFactor != null)
                    hashCode = hashCode * 59 + this.StretchFactor.GetHashCode();
                if (this.AllowQuadrangles != null)
                    hashCode = hashCode * 59 + this.AllowQuadrangles.GetHashCode();
                if (this.TopologicalReference != null)
                    hashCode = hashCode * 59 + this.TopologicalReference.GetHashCode();
                return hashCode;
            }
        }

    }

}
