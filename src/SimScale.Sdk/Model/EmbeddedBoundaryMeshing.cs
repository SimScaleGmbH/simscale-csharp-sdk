/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// EmbeddedBoundaryMeshing
    /// </summary>
    [DataContract]
    public partial class EmbeddedBoundaryMeshing : IEquatable<EmbeddedBoundaryMeshing>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmbeddedBoundaryMeshing" /> class.
        /// </summary>
        /// <param name="sizing">sizing.</param>
        /// <param name="numberOfBufferCells">numberOfBufferCells (default to 4M).</param>
        /// <param name="refinements">refinements.</param>
        public EmbeddedBoundaryMeshing(OneOfEmbeddedBoundaryMeshingSizing sizing = default(OneOfEmbeddedBoundaryMeshingSizing), decimal? numberOfBufferCells = default(decimal?), List<OneOfEmbeddedBoundaryMeshingRefinements> refinements = default(List<OneOfEmbeddedBoundaryMeshingRefinements>))
        {
            this.Sizing = sizing;
            this.NumberOfBufferCells = numberOfBufferCells;
            this.Refinements = refinements;
        }
        
        /// <summary>
        /// Gets or Sets Sizing
        /// </summary>
        [DataMember(Name="sizing", EmitDefaultValue=false)]
        public OneOfEmbeddedBoundaryMeshingSizing Sizing { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfBufferCells
        /// </summary>
        [DataMember(Name="numberOfBufferCells", EmitDefaultValue=false)]
        public decimal? NumberOfBufferCells { get; set; }

        /// <summary>
        /// Gets or Sets Refinements
        /// </summary>
        [DataMember(Name="refinements", EmitDefaultValue=false)]
        public List<OneOfEmbeddedBoundaryMeshingRefinements> Refinements { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmbeddedBoundaryMeshing {\n");
            sb.Append("  Sizing: ").Append(Sizing).Append("\n");
            sb.Append("  NumberOfBufferCells: ").Append(NumberOfBufferCells).Append("\n");
            sb.Append("  Refinements: ").Append(Refinements).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmbeddedBoundaryMeshing);
        }

        /// <summary>
        /// Returns true if EmbeddedBoundaryMeshing instances are equal
        /// </summary>
        /// <param name="input">Instance of EmbeddedBoundaryMeshing to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmbeddedBoundaryMeshing input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Sizing == input.Sizing ||
                    (this.Sizing != null &&
                    this.Sizing.Equals(input.Sizing))
                ) && 
                (
                    this.NumberOfBufferCells == input.NumberOfBufferCells ||
                    (this.NumberOfBufferCells != null &&
                    this.NumberOfBufferCells.Equals(input.NumberOfBufferCells))
                ) && 
                (
                    this.Refinements == input.Refinements ||
                    this.Refinements != null &&
                    input.Refinements != null &&
                    this.Refinements.SequenceEqual(input.Refinements)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Sizing != null)
                    hashCode = hashCode * 59 + this.Sizing.GetHashCode();
                if (this.NumberOfBufferCells != null)
                    hashCode = hashCode * 59 + this.NumberOfBufferCells.GetHashCode();
                if (this.Refinements != null)
                    hashCode = hashCode * 59 + this.Refinements.GetHashCode();
                return hashCode;
            }
        }

    }

}
