/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// DerivedHeatFlux
    /// </summary>
    [DataContract]
    public partial class DerivedHeatFlux : OneOfExternalWallHeatFluxTBCHeatFlux, IEquatable<DerivedHeatFlux>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DerivedHeatFlux" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DerivedHeatFlux() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DerivedHeatFlux" /> class.
        /// </summary>
        /// <param name="type">Schema name: DerivedHeatFlux (required) (default to &quot;DERIVED&quot;).</param>
        /// <param name="heatTransferCoefficient">heatTransferCoefficient.</param>
        /// <param name="ambientTemperature">ambientTemperature.</param>
        /// <param name="additionalHeatFlux">additionalHeatFlux.</param>
        /// <param name="wallThermal">wallThermal.</param>
        /// <param name="outerSurfaceEmissivity">Emissivity/Absorptivity of the outer side of the surface or the last wall thermal layer. (default to 0.9M).</param>
        public DerivedHeatFlux(string type = "DERIVED", DimensionalThermalTransmittance heatTransferCoefficient = default(DimensionalThermalTransmittance), DimensionalTemperature ambientTemperature = default(DimensionalTemperature), DimensionalHeatFlux additionalHeatFlux = default(DimensionalHeatFlux), OneOfDerivedHeatFluxWallThermal wallThermal = default(OneOfDerivedHeatFluxWallThermal), decimal? outerSurfaceEmissivity = default(decimal?))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for DerivedHeatFlux and cannot be null");
            this.HeatTransferCoefficient = heatTransferCoefficient;
            this.AmbientTemperature = ambientTemperature;
            this.AdditionalHeatFlux = additionalHeatFlux;
            this.WallThermal = wallThermal;
            this.OuterSurfaceEmissivity = outerSurfaceEmissivity;
        }
        
        /// <summary>
        /// Schema name: DerivedHeatFlux
        /// </summary>
        /// <value>Schema name: DerivedHeatFlux</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets HeatTransferCoefficient
        /// </summary>
        [DataMember(Name="heatTransferCoefficient", EmitDefaultValue=false)]
        public DimensionalThermalTransmittance HeatTransferCoefficient { get; set; }

        /// <summary>
        /// Gets or Sets AmbientTemperature
        /// </summary>
        [DataMember(Name="ambientTemperature", EmitDefaultValue=false)]
        public DimensionalTemperature AmbientTemperature { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalHeatFlux
        /// </summary>
        [DataMember(Name="additionalHeatFlux", EmitDefaultValue=false)]
        public DimensionalHeatFlux AdditionalHeatFlux { get; set; }

        /// <summary>
        /// Gets or Sets WallThermal
        /// </summary>
        [DataMember(Name="wallThermal", EmitDefaultValue=false)]
        public OneOfDerivedHeatFluxWallThermal WallThermal { get; set; }

        /// <summary>
        /// Emissivity/Absorptivity of the outer side of the surface or the last wall thermal layer.
        /// </summary>
        /// <value>Emissivity/Absorptivity of the outer side of the surface or the last wall thermal layer.</value>
        [DataMember(Name="outerSurfaceEmissivity", EmitDefaultValue=false)]
        public decimal? OuterSurfaceEmissivity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DerivedHeatFlux {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  HeatTransferCoefficient: ").Append(HeatTransferCoefficient).Append("\n");
            sb.Append("  AmbientTemperature: ").Append(AmbientTemperature).Append("\n");
            sb.Append("  AdditionalHeatFlux: ").Append(AdditionalHeatFlux).Append("\n");
            sb.Append("  WallThermal: ").Append(WallThermal).Append("\n");
            sb.Append("  OuterSurfaceEmissivity: ").Append(OuterSurfaceEmissivity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DerivedHeatFlux);
        }

        /// <summary>
        /// Returns true if DerivedHeatFlux instances are equal
        /// </summary>
        /// <param name="input">Instance of DerivedHeatFlux to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DerivedHeatFlux input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.HeatTransferCoefficient == input.HeatTransferCoefficient ||
                    (this.HeatTransferCoefficient != null &&
                    this.HeatTransferCoefficient.Equals(input.HeatTransferCoefficient))
                ) && 
                (
                    this.AmbientTemperature == input.AmbientTemperature ||
                    (this.AmbientTemperature != null &&
                    this.AmbientTemperature.Equals(input.AmbientTemperature))
                ) && 
                (
                    this.AdditionalHeatFlux == input.AdditionalHeatFlux ||
                    (this.AdditionalHeatFlux != null &&
                    this.AdditionalHeatFlux.Equals(input.AdditionalHeatFlux))
                ) && 
                (
                    this.WallThermal == input.WallThermal ||
                    (this.WallThermal != null &&
                    this.WallThermal.Equals(input.WallThermal))
                ) && 
                (
                    this.OuterSurfaceEmissivity == input.OuterSurfaceEmissivity ||
                    (this.OuterSurfaceEmissivity != null &&
                    this.OuterSurfaceEmissivity.Equals(input.OuterSurfaceEmissivity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.HeatTransferCoefficient != null)
                    hashCode = hashCode * 59 + this.HeatTransferCoefficient.GetHashCode();
                if (this.AmbientTemperature != null)
                    hashCode = hashCode * 59 + this.AmbientTemperature.GetHashCode();
                if (this.AdditionalHeatFlux != null)
                    hashCode = hashCode * 59 + this.AdditionalHeatFlux.GetHashCode();
                if (this.WallThermal != null)
                    hashCode = hashCode * 59 + this.WallThermal.GetHashCode();
                if (this.OuterSurfaceEmissivity != null)
                    hashCode = hashCode * 59 + this.OuterSurfaceEmissivity.GetHashCode();
                return hashCode;
            }
        }

    }

}
