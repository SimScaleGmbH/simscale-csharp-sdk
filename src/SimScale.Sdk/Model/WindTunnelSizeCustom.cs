/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// WindTunnelSizeCustom
    /// </summary>
    [DataContract]
    public partial class WindTunnelSizeCustom : OneOfAdvancedROISettingsWindTunnelSize, IEquatable<WindTunnelSizeCustom>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WindTunnelSizeCustom" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WindTunnelSizeCustom() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WindTunnelSizeCustom" /> class.
        /// </summary>
        /// <param name="type">type (required) (default to &quot;WIND_TUNNEL_SIZE_CUSTOM&quot;).</param>
        /// <param name="heightExtension">heightExtension.</param>
        /// <param name="sideExtension">sideExtension.</param>
        /// <param name="inflowExtension">inflowExtension.</param>
        /// <param name="outflowExtension">outflowExtension.</param>
        public WindTunnelSizeCustom(string type = "WIND_TUNNEL_SIZE_CUSTOM", DimensionalLength heightExtension = default(DimensionalLength), DimensionalLength sideExtension = default(DimensionalLength), DimensionalLength inflowExtension = default(DimensionalLength), DimensionalLength outflowExtension = default(DimensionalLength))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for WindTunnelSizeCustom and cannot be null");
            this.HeightExtension = heightExtension;
            this.SideExtension = sideExtension;
            this.InflowExtension = inflowExtension;
            this.OutflowExtension = outflowExtension;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets HeightExtension
        /// </summary>
        [DataMember(Name="heightExtension", EmitDefaultValue=false)]
        public DimensionalLength HeightExtension { get; set; }

        /// <summary>
        /// Gets or Sets SideExtension
        /// </summary>
        [DataMember(Name="sideExtension", EmitDefaultValue=false)]
        public DimensionalLength SideExtension { get; set; }

        /// <summary>
        /// Gets or Sets InflowExtension
        /// </summary>
        [DataMember(Name="inflowExtension", EmitDefaultValue=false)]
        public DimensionalLength InflowExtension { get; set; }

        /// <summary>
        /// Gets or Sets OutflowExtension
        /// </summary>
        [DataMember(Name="outflowExtension", EmitDefaultValue=false)]
        public DimensionalLength OutflowExtension { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WindTunnelSizeCustom {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  HeightExtension: ").Append(HeightExtension).Append("\n");
            sb.Append("  SideExtension: ").Append(SideExtension).Append("\n");
            sb.Append("  InflowExtension: ").Append(InflowExtension).Append("\n");
            sb.Append("  OutflowExtension: ").Append(OutflowExtension).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WindTunnelSizeCustom);
        }

        /// <summary>
        /// Returns true if WindTunnelSizeCustom instances are equal
        /// </summary>
        /// <param name="input">Instance of WindTunnelSizeCustom to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WindTunnelSizeCustom input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.HeightExtension == input.HeightExtension ||
                    (this.HeightExtension != null &&
                    this.HeightExtension.Equals(input.HeightExtension))
                ) && 
                (
                    this.SideExtension == input.SideExtension ||
                    (this.SideExtension != null &&
                    this.SideExtension.Equals(input.SideExtension))
                ) && 
                (
                    this.InflowExtension == input.InflowExtension ||
                    (this.InflowExtension != null &&
                    this.InflowExtension.Equals(input.InflowExtension))
                ) && 
                (
                    this.OutflowExtension == input.OutflowExtension ||
                    (this.OutflowExtension != null &&
                    this.OutflowExtension.Equals(input.OutflowExtension))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.HeightExtension != null)
                    hashCode = hashCode * 59 + this.HeightExtension.GetHashCode();
                if (this.SideExtension != null)
                    hashCode = hashCode * 59 + this.SideExtension.GetHashCode();
                if (this.InflowExtension != null)
                    hashCode = hashCode * 59 + this.InflowExtension.GetHashCode();
                if (this.OutflowExtension != null)
                    hashCode = hashCode * 59 + this.OutflowExtension.GetHashCode();
                return hashCode;
            }
        }

    }

}
