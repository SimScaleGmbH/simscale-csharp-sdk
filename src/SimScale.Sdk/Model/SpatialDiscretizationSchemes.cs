/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// SpatialDiscretizationSchemes
    /// </summary>
    [DataContract]
    public partial class SpatialDiscretizationSchemes : IEquatable<SpatialDiscretizationSchemes>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SpatialDiscretizationSchemes" /> class.
        /// </summary>
        /// <param name="velocity">velocity.</param>
        /// <param name="density">density.</param>
        /// <param name="turbulentKineticEnergy">turbulentKineticEnergy.</param>
        /// <param name="turbulentEnergyDissipationRate">turbulentEnergyDissipationRate.</param>
        /// <param name="volumeOfFluid">volumeOfFluid.</param>
        /// <param name="internalEnergy">internalEnergy.</param>
        /// <param name="gasMixtureTransport">gasMixtureTransport.</param>
        public SpatialDiscretizationSchemes(OneOfSpatialDiscretizationSchemesVelocity velocity = default(OneOfSpatialDiscretizationSchemesVelocity), OneOfSpatialDiscretizationSchemesDensity density = default(OneOfSpatialDiscretizationSchemesDensity), OneOfSpatialDiscretizationSchemesTurbulentKineticEnergy turbulentKineticEnergy = default(OneOfSpatialDiscretizationSchemesTurbulentKineticEnergy), OneOfSpatialDiscretizationSchemesTurbulentEnergyDissipationRate turbulentEnergyDissipationRate = default(OneOfSpatialDiscretizationSchemesTurbulentEnergyDissipationRate), OneOfSpatialDiscretizationSchemesVolumeOfFluid volumeOfFluid = default(OneOfSpatialDiscretizationSchemesVolumeOfFluid), OneOfSpatialDiscretizationSchemesInternalEnergy internalEnergy = default(OneOfSpatialDiscretizationSchemesInternalEnergy), OneOfSpatialDiscretizationSchemesGasMixtureTransport gasMixtureTransport = default(OneOfSpatialDiscretizationSchemesGasMixtureTransport))
        {
            this.Velocity = velocity;
            this.Density = density;
            this.TurbulentKineticEnergy = turbulentKineticEnergy;
            this.TurbulentEnergyDissipationRate = turbulentEnergyDissipationRate;
            this.VolumeOfFluid = volumeOfFluid;
            this.InternalEnergy = internalEnergy;
            this.GasMixtureTransport = gasMixtureTransport;
        }
        
        /// <summary>
        /// Gets or Sets Velocity
        /// </summary>
        [DataMember(Name="velocity", EmitDefaultValue=false)]
        public OneOfSpatialDiscretizationSchemesVelocity Velocity { get; set; }

        /// <summary>
        /// Gets or Sets Density
        /// </summary>
        [DataMember(Name="density", EmitDefaultValue=false)]
        public OneOfSpatialDiscretizationSchemesDensity Density { get; set; }

        /// <summary>
        /// Gets or Sets TurbulentKineticEnergy
        /// </summary>
        [DataMember(Name="turbulentKineticEnergy", EmitDefaultValue=false)]
        public OneOfSpatialDiscretizationSchemesTurbulentKineticEnergy TurbulentKineticEnergy { get; set; }

        /// <summary>
        /// Gets or Sets TurbulentEnergyDissipationRate
        /// </summary>
        [DataMember(Name="turbulentEnergyDissipationRate", EmitDefaultValue=false)]
        public OneOfSpatialDiscretizationSchemesTurbulentEnergyDissipationRate TurbulentEnergyDissipationRate { get; set; }

        /// <summary>
        /// Gets or Sets VolumeOfFluid
        /// </summary>
        [DataMember(Name="volumeOfFluid", EmitDefaultValue=false)]
        public OneOfSpatialDiscretizationSchemesVolumeOfFluid VolumeOfFluid { get; set; }

        /// <summary>
        /// Gets or Sets InternalEnergy
        /// </summary>
        [DataMember(Name="internalEnergy", EmitDefaultValue=false)]
        public OneOfSpatialDiscretizationSchemesInternalEnergy InternalEnergy { get; set; }

        /// <summary>
        /// Gets or Sets GasMixtureTransport
        /// </summary>
        [DataMember(Name="gasMixtureTransport", EmitDefaultValue=false)]
        public OneOfSpatialDiscretizationSchemesGasMixtureTransport GasMixtureTransport { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SpatialDiscretizationSchemes {\n");
            sb.Append("  Velocity: ").Append(Velocity).Append("\n");
            sb.Append("  Density: ").Append(Density).Append("\n");
            sb.Append("  TurbulentKineticEnergy: ").Append(TurbulentKineticEnergy).Append("\n");
            sb.Append("  TurbulentEnergyDissipationRate: ").Append(TurbulentEnergyDissipationRate).Append("\n");
            sb.Append("  VolumeOfFluid: ").Append(VolumeOfFluid).Append("\n");
            sb.Append("  InternalEnergy: ").Append(InternalEnergy).Append("\n");
            sb.Append("  GasMixtureTransport: ").Append(GasMixtureTransport).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SpatialDiscretizationSchemes);
        }

        /// <summary>
        /// Returns true if SpatialDiscretizationSchemes instances are equal
        /// </summary>
        /// <param name="input">Instance of SpatialDiscretizationSchemes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SpatialDiscretizationSchemes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Velocity == input.Velocity ||
                    (this.Velocity != null &&
                    this.Velocity.Equals(input.Velocity))
                ) && 
                (
                    this.Density == input.Density ||
                    (this.Density != null &&
                    this.Density.Equals(input.Density))
                ) && 
                (
                    this.TurbulentKineticEnergy == input.TurbulentKineticEnergy ||
                    (this.TurbulentKineticEnergy != null &&
                    this.TurbulentKineticEnergy.Equals(input.TurbulentKineticEnergy))
                ) && 
                (
                    this.TurbulentEnergyDissipationRate == input.TurbulentEnergyDissipationRate ||
                    (this.TurbulentEnergyDissipationRate != null &&
                    this.TurbulentEnergyDissipationRate.Equals(input.TurbulentEnergyDissipationRate))
                ) && 
                (
                    this.VolumeOfFluid == input.VolumeOfFluid ||
                    (this.VolumeOfFluid != null &&
                    this.VolumeOfFluid.Equals(input.VolumeOfFluid))
                ) && 
                (
                    this.InternalEnergy == input.InternalEnergy ||
                    (this.InternalEnergy != null &&
                    this.InternalEnergy.Equals(input.InternalEnergy))
                ) && 
                (
                    this.GasMixtureTransport == input.GasMixtureTransport ||
                    (this.GasMixtureTransport != null &&
                    this.GasMixtureTransport.Equals(input.GasMixtureTransport))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Velocity != null)
                    hashCode = hashCode * 59 + this.Velocity.GetHashCode();
                if (this.Density != null)
                    hashCode = hashCode * 59 + this.Density.GetHashCode();
                if (this.TurbulentKineticEnergy != null)
                    hashCode = hashCode * 59 + this.TurbulentKineticEnergy.GetHashCode();
                if (this.TurbulentEnergyDissipationRate != null)
                    hashCode = hashCode * 59 + this.TurbulentEnergyDissipationRate.GetHashCode();
                if (this.VolumeOfFluid != null)
                    hashCode = hashCode * 59 + this.VolumeOfFluid.GetHashCode();
                if (this.InternalEnergy != null)
                    hashCode = hashCode * 59 + this.InternalEnergy.GetHashCode();
                if (this.GasMixtureTransport != null)
                    hashCode = hashCode * 59 + this.GasMixtureTransport.GetHashCode();
                return hashCode;
            }
        }

    }

}
