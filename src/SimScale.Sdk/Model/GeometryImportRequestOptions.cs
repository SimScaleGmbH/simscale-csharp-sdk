/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// CAD import options. Please refer to https://www.simscale.com/docs/cad-preparation/#cad-upload-options for a detailed description of the options.
    /// </summary>
    [DataContract]
    public partial class GeometryImportRequestOptions : IEquatable<GeometryImportRequestOptions>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GeometryImportRequestOptions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GeometryImportRequestOptions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GeometryImportRequestOptions" /> class.
        /// </summary>
        /// <param name="facetSplit">facetSplit (required) (default to true).</param>
        /// <param name="sewing">sewing (required) (default to true).</param>
        /// <param name="improve">improve (required) (default to true).</param>
        /// <param name="optimizeForLBMSolver">optimizeForLBMSolver (required) (default to true).</param>
        public GeometryImportRequestOptions(bool? facetSplit = true, bool? sewing = true, bool? improve = true, bool? optimizeForLBMSolver = true)
        {
            // to ensure "facetSplit" is required (not null)
            this.FacetSplit = facetSplit ?? throw new ArgumentNullException("facetSplit is a required property for GeometryImportRequestOptions and cannot be null");
            // to ensure "sewing" is required (not null)
            this.Sewing = sewing ?? throw new ArgumentNullException("sewing is a required property for GeometryImportRequestOptions and cannot be null");
            // to ensure "improve" is required (not null)
            this.Improve = improve ?? throw new ArgumentNullException("improve is a required property for GeometryImportRequestOptions and cannot be null");
            // to ensure "optimizeForLBMSolver" is required (not null)
            this.OptimizeForLBMSolver = optimizeForLBMSolver ?? throw new ArgumentNullException("optimizeForLBMSolver is a required property for GeometryImportRequestOptions and cannot be null");
        }
        
        /// <summary>
        /// Gets or Sets FacetSplit
        /// </summary>
        [DataMember(Name="facetSplit", EmitDefaultValue=false)]
        public bool? FacetSplit { get; set; }

        /// <summary>
        /// Gets or Sets Sewing
        /// </summary>
        [DataMember(Name="sewing", EmitDefaultValue=false)]
        public bool? Sewing { get; set; }

        /// <summary>
        /// Gets or Sets Improve
        /// </summary>
        [DataMember(Name="improve", EmitDefaultValue=false)]
        public bool? Improve { get; set; }

        /// <summary>
        /// Gets or Sets OptimizeForLBMSolver
        /// </summary>
        [DataMember(Name="optimizeForLBMSolver", EmitDefaultValue=false)]
        public bool? OptimizeForLBMSolver { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GeometryImportRequestOptions {\n");
            sb.Append("  FacetSplit: ").Append(FacetSplit).Append("\n");
            sb.Append("  Sewing: ").Append(Sewing).Append("\n");
            sb.Append("  Improve: ").Append(Improve).Append("\n");
            sb.Append("  OptimizeForLBMSolver: ").Append(OptimizeForLBMSolver).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GeometryImportRequestOptions);
        }

        /// <summary>
        /// Returns true if GeometryImportRequestOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of GeometryImportRequestOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GeometryImportRequestOptions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FacetSplit == input.FacetSplit ||
                    (this.FacetSplit != null &&
                    this.FacetSplit.Equals(input.FacetSplit))
                ) && 
                (
                    this.Sewing == input.Sewing ||
                    (this.Sewing != null &&
                    this.Sewing.Equals(input.Sewing))
                ) && 
                (
                    this.Improve == input.Improve ||
                    (this.Improve != null &&
                    this.Improve.Equals(input.Improve))
                ) && 
                (
                    this.OptimizeForLBMSolver == input.OptimizeForLBMSolver ||
                    (this.OptimizeForLBMSolver != null &&
                    this.OptimizeForLBMSolver.Equals(input.OptimizeForLBMSolver))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FacetSplit != null)
                    hashCode = hashCode * 59 + this.FacetSplit.GetHashCode();
                if (this.Sewing != null)
                    hashCode = hashCode * 59 + this.Sewing.GetHashCode();
                if (this.Improve != null)
                    hashCode = hashCode * 59 + this.Improve.GetHashCode();
                if (this.OptimizeForLBMSolver != null)
                    hashCode = hashCode * 59 + this.OptimizeForLBMSolver.GetHashCode();
                return hashCode;
            }
        }

    }

}
