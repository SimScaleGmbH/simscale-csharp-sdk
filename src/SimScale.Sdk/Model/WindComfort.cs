/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// WindComfort
    /// </summary>
    [DataContract]
    public partial class WindComfort : Analysis, IEquatable<WindComfort>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WindComfort" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WindComfort() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WindComfort" /> class.
        /// </summary>
        /// <param name="type">Schema name: WindComfort (required) (default to &quot;WIND_COMFORT&quot;).</param>
        /// <param name="regionOfInterest">regionOfInterest.</param>
        /// <param name="windConditions">windConditions.</param>
        /// <param name="pedestrianComfortMap">pedestrianComfortMap.</param>
        /// <param name="simulationControl">simulationControl.</param>
        /// <param name="advancedModelling">advancedModelling.</param>
        /// <param name="additionalResultExport">additionalResultExport.</param>
        /// <param name="meshSettings">meshSettings.</param>
        public WindComfort(string type = "WIND_COMFORT", RegionOfInterest regionOfInterest = default(RegionOfInterest), WindConditions windConditions = default(WindConditions), List<PedestrianComfortSurface> pedestrianComfortMap = default(List<PedestrianComfortSurface>), WindComfortSimulationControl simulationControl = default(WindComfortSimulationControl), AdvancedModelling advancedModelling = default(AdvancedModelling), FluidResultControls additionalResultExport = default(FluidResultControls), WindComfortMesh meshSettings = default(WindComfortMesh))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for WindComfort and cannot be null");
            this.RegionOfInterest = regionOfInterest;
            this.WindConditions = windConditions;
            this.PedestrianComfortMap = pedestrianComfortMap;
            this.SimulationControl = simulationControl;
            this.AdvancedModelling = advancedModelling;
            this.AdditionalResultExport = additionalResultExport;
            this.MeshSettings = meshSettings;
        }
        
        /// <summary>
        /// Schema name: WindComfort
        /// </summary>
        /// <value>Schema name: WindComfort</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets RegionOfInterest
        /// </summary>
        [DataMember(Name="regionOfInterest", EmitDefaultValue=false)]
        public RegionOfInterest RegionOfInterest { get; set; }

        /// <summary>
        /// Gets or Sets WindConditions
        /// </summary>
        [DataMember(Name="windConditions", EmitDefaultValue=false)]
        public WindConditions WindConditions { get; set; }

        /// <summary>
        /// Gets or Sets PedestrianComfortMap
        /// </summary>
        [DataMember(Name="pedestrianComfortMap", EmitDefaultValue=false)]
        public List<PedestrianComfortSurface> PedestrianComfortMap { get; set; }

        /// <summary>
        /// Gets or Sets SimulationControl
        /// </summary>
        [DataMember(Name="simulationControl", EmitDefaultValue=false)]
        public WindComfortSimulationControl SimulationControl { get; set; }

        /// <summary>
        /// Gets or Sets AdvancedModelling
        /// </summary>
        [DataMember(Name="advancedModelling", EmitDefaultValue=false)]
        public AdvancedModelling AdvancedModelling { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalResultExport
        /// </summary>
        [DataMember(Name="additionalResultExport", EmitDefaultValue=false)]
        public FluidResultControls AdditionalResultExport { get; set; }

        /// <summary>
        /// Gets or Sets MeshSettings
        /// </summary>
        [DataMember(Name="meshSettings", EmitDefaultValue=false)]
        public WindComfortMesh MeshSettings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WindComfort {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  RegionOfInterest: ").Append(RegionOfInterest).Append("\n");
            sb.Append("  WindConditions: ").Append(WindConditions).Append("\n");
            sb.Append("  PedestrianComfortMap: ").Append(PedestrianComfortMap).Append("\n");
            sb.Append("  SimulationControl: ").Append(SimulationControl).Append("\n");
            sb.Append("  AdvancedModelling: ").Append(AdvancedModelling).Append("\n");
            sb.Append("  AdditionalResultExport: ").Append(AdditionalResultExport).Append("\n");
            sb.Append("  MeshSettings: ").Append(MeshSettings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WindComfort);
        }

        /// <summary>
        /// Returns true if WindComfort instances are equal
        /// </summary>
        /// <param name="input">Instance of WindComfort to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WindComfort input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.RegionOfInterest == input.RegionOfInterest ||
                    (this.RegionOfInterest != null &&
                    this.RegionOfInterest.Equals(input.RegionOfInterest))
                ) && 
                (
                    this.WindConditions == input.WindConditions ||
                    (this.WindConditions != null &&
                    this.WindConditions.Equals(input.WindConditions))
                ) && 
                (
                    this.PedestrianComfortMap == input.PedestrianComfortMap ||
                    this.PedestrianComfortMap != null &&
                    input.PedestrianComfortMap != null &&
                    this.PedestrianComfortMap.SequenceEqual(input.PedestrianComfortMap)
                ) && 
                (
                    this.SimulationControl == input.SimulationControl ||
                    (this.SimulationControl != null &&
                    this.SimulationControl.Equals(input.SimulationControl))
                ) && 
                (
                    this.AdvancedModelling == input.AdvancedModelling ||
                    (this.AdvancedModelling != null &&
                    this.AdvancedModelling.Equals(input.AdvancedModelling))
                ) && 
                (
                    this.AdditionalResultExport == input.AdditionalResultExport ||
                    (this.AdditionalResultExport != null &&
                    this.AdditionalResultExport.Equals(input.AdditionalResultExport))
                ) && 
                (
                    this.MeshSettings == input.MeshSettings ||
                    (this.MeshSettings != null &&
                    this.MeshSettings.Equals(input.MeshSettings))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.RegionOfInterest != null)
                    hashCode = hashCode * 59 + this.RegionOfInterest.GetHashCode();
                if (this.WindConditions != null)
                    hashCode = hashCode * 59 + this.WindConditions.GetHashCode();
                if (this.PedestrianComfortMap != null)
                    hashCode = hashCode * 59 + this.PedestrianComfortMap.GetHashCode();
                if (this.SimulationControl != null)
                    hashCode = hashCode * 59 + this.SimulationControl.GetHashCode();
                if (this.AdvancedModelling != null)
                    hashCode = hashCode * 59 + this.AdvancedModelling.GetHashCode();
                if (this.AdditionalResultExport != null)
                    hashCode = hashCode * 59 + this.AdditionalResultExport.GetHashCode();
                if (this.MeshSettings != null)
                    hashCode = hashCode * 59 + this.MeshSettings.GetHashCode();
                return hashCode;
            }
        }

    }

}
