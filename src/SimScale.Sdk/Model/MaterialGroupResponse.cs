/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// MaterialGroupResponse
    /// </summary>
    [DataContract]
    public partial class MaterialGroupResponse : IEquatable<MaterialGroupResponse>
    {
        /// <summary>
        /// Gets or Sets GroupType
        /// </summary>
        [DataMember(Name="groupType", EmitDefaultValue=false)]
        public MaterialGroupType? GroupType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MaterialGroupResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MaterialGroupResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MaterialGroupResponse" /> class.
        /// </summary>
        /// <param name="name">The name of the material group. (required).</param>
        /// <param name="groupType">groupType.</param>
        public MaterialGroupResponse(string name = default(string), MaterialGroupType? groupType = default(MaterialGroupType?))
        {
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for MaterialGroupResponse and cannot be null");
            this.GroupType = groupType;
        }
        
        /// <summary>
        /// The ID of the material group.
        /// </summary>
        /// <value>The ID of the material group.</value>
        [DataMember(Name="materialGroupId", EmitDefaultValue=false)]
        public string MaterialGroupId { get; private set; }

        /// <summary>
        /// The ID of parent of the material group.
        /// </summary>
        /// <value>The ID of parent of the material group.</value>
        [DataMember(Name="parentId", EmitDefaultValue=false)]
        public string ParentId { get; private set; }

        /// <summary>
        /// The name of the material group.
        /// </summary>
        /// <value>The name of the material group.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The time the material group was created.
        /// </summary>
        /// <value>The time the material group was created.</value>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public DateTimeOffset? CreatedAt { get; private set; }

        /// <summary>
        /// The time the material group was modified.
        /// </summary>
        /// <value>The time the material group was modified.</value>
        [DataMember(Name="modifiedAt", EmitDefaultValue=false)]
        public DateTimeOffset? ModifiedAt { get; private set; }

        /// <summary>
        /// Material group metadata.
        /// </summary>
        /// <value>Material group metadata.</value>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Object Metadata { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MaterialGroupResponse {\n");
            sb.Append("  MaterialGroupId: ").Append(MaterialGroupId).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  GroupType: ").Append(GroupType).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ModifiedAt: ").Append(ModifiedAt).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MaterialGroupResponse);
        }

        /// <summary>
        /// Returns true if MaterialGroupResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of MaterialGroupResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MaterialGroupResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MaterialGroupId == input.MaterialGroupId ||
                    (this.MaterialGroupId != null &&
                    this.MaterialGroupId.Equals(input.MaterialGroupId))
                ) && 
                (
                    this.ParentId == input.ParentId ||
                    (this.ParentId != null &&
                    this.ParentId.Equals(input.ParentId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.GroupType == input.GroupType ||
                    this.GroupType.Equals(input.GroupType)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.ModifiedAt == input.ModifiedAt ||
                    (this.ModifiedAt != null &&
                    this.ModifiedAt.Equals(input.ModifiedAt))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MaterialGroupId != null)
                    hashCode = hashCode * 59 + this.MaterialGroupId.GetHashCode();
                if (this.ParentId != null)
                    hashCode = hashCode * 59 + this.ParentId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                hashCode = hashCode * 59 + this.GroupType.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.ModifiedAt != null)
                    hashCode = hashCode * 59 + this.ModifiedAt.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                return hashCode;
            }
        }

    }

}
