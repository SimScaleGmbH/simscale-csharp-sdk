/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// FluidNumerics
    /// </summary>
    [DataContract]
    public partial class FluidNumerics : IEquatable<FluidNumerics>
    {
        /// <summary>
        /// Defines RadiationResolution
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RadiationResolutionEnum
        {
            /// <summary>
            /// Enum COARSE for value: COARSE
            /// </summary>
            [EnumMember(Value = "COARSE")]
            COARSE = 1,

            /// <summary>
            /// Enum MODERATE for value: MODERATE
            /// </summary>
            [EnumMember(Value = "MODERATE")]
            MODERATE = 2,

            /// <summary>
            /// Enum FINE for value: FINE
            /// </summary>
            [EnumMember(Value = "FINE")]
            FINE = 3

        }

        /// <summary>
        /// Gets or Sets RadiationResolution
        /// </summary>
        [DataMember(Name="radiationResolution", EmitDefaultValue=false)]
        public RadiationResolutionEnum? RadiationResolution { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FluidNumerics" /> class.
        /// </summary>
        /// <param name="relaxationType">relaxationType (default to &quot;MANUAL&quot;).</param>
        /// <param name="relaxationFactor">relaxationFactor.</param>
        /// <param name="radiationResolution">radiationResolution (default to RadiationResolutionEnum.MODERATE).</param>
        /// <param name="momentumPredictor">momentumPredictor.</param>
        /// <param name="transonic">transonic (default to false).</param>
        /// <param name="numOuterCorrectors">numOuterCorrectors (default to 3).</param>
        /// <param name="numCorrectors">numCorrectors (default to 4).</param>
        /// <param name="numNonOrthogonalCorrectors">&lt;p&gt;The pressure equation is repeatedly solved based on the value of non-orthogonal correctors in the PISO/SIMPLE/PIMPLE algorithm. This may reduce the effect of bad mesh.&lt;/p&gt; (default to 1).</param>
        /// <param name="smoothingParameter">smoothingParameter (default to 0.05M).</param>
        /// <param name="dampingCoefficient">dampingCoefficient (default to 0.5M).</param>
        /// <param name="numAlphaSpreadIterations">numAlphaSpreadIterations (default to 0).</param>
        /// <param name="numAlphaSweepIterations">numAlphaSweepIterations (default to 0).</param>
        /// <param name="minDensity">minDensity.</param>
        /// <param name="maxDensity">maxDensity.</param>
        /// <param name="evaluateTurbulenceOnlyOnFinalIteration">evaluateTurbulenceOnlyOnFinalIteration (default to false).</param>
        /// <param name="pressureReferenceCell">&lt;p&gt;Enter the cell where you want to define reference pressure in the PISO/SIMPLE/PIMPLE algorithm.&lt;/p&gt; (default to 0).</param>
        /// <param name="pressureReferenceValue">pressureReferenceValue.</param>
        /// <param name="velocityLimit">velocityLimit.</param>
        /// <param name="residualControls">residualControls.</param>
        /// <param name="solvers">solvers.</param>
        /// <param name="schemes">schemes.</param>
        public FluidNumerics(string relaxationType = default(string), RelaxationFactor relaxationFactor = default(RelaxationFactor), RadiationResolutionEnum? radiationResolution = default(RadiationResolutionEnum?), bool? momentumPredictor = default(bool?), bool? transonic = default(bool?), int? numOuterCorrectors = default(int?), int? numCorrectors = default(int?), int? numNonOrthogonalCorrectors = default(int?), decimal? smoothingParameter = default(decimal?), decimal? dampingCoefficient = default(decimal?), int? numAlphaSpreadIterations = default(int?), int? numAlphaSweepIterations = default(int?), DimensionalDensity minDensity = default(DimensionalDensity), DimensionalDensity maxDensity = default(DimensionalDensity), bool? evaluateTurbulenceOnlyOnFinalIteration = default(bool?), int? pressureReferenceCell = default(int?), DimensionalPressure pressureReferenceValue = default(DimensionalPressure), DimensionalSpeed velocityLimit = default(DimensionalSpeed), ResidualControls residualControls = default(ResidualControls), FluidSolvers solvers = default(FluidSolvers), Schemes schemes = default(Schemes))
        {
            this.RelaxationType = relaxationType;
            this.RelaxationFactor = relaxationFactor;
            this.RadiationResolution = radiationResolution;
            this.MomentumPredictor = momentumPredictor;
            this.Transonic = transonic;
            this.NumOuterCorrectors = numOuterCorrectors;
            this.NumCorrectors = numCorrectors;
            this.NumNonOrthogonalCorrectors = numNonOrthogonalCorrectors;
            this.SmoothingParameter = smoothingParameter;
            this.DampingCoefficient = dampingCoefficient;
            this.NumAlphaSpreadIterations = numAlphaSpreadIterations;
            this.NumAlphaSweepIterations = numAlphaSweepIterations;
            this.MinDensity = minDensity;
            this.MaxDensity = maxDensity;
            this.EvaluateTurbulenceOnlyOnFinalIteration = evaluateTurbulenceOnlyOnFinalIteration;
            this.PressureReferenceCell = pressureReferenceCell;
            this.PressureReferenceValue = pressureReferenceValue;
            this.VelocityLimit = velocityLimit;
            this.ResidualControls = residualControls;
            this.Solvers = solvers;
            this.Schemes = schemes;
        }
        
        /// <summary>
        /// Gets or Sets RelaxationType
        /// </summary>
        [DataMember(Name="relaxationType", EmitDefaultValue=false)]
        public string RelaxationType { get; set; }

        /// <summary>
        /// Gets or Sets RelaxationFactor
        /// </summary>
        [DataMember(Name="relaxationFactor", EmitDefaultValue=false)]
        public RelaxationFactor RelaxationFactor { get; set; }

        /// <summary>
        /// Gets or Sets MomentumPredictor
        /// </summary>
        [DataMember(Name="momentumPredictor", EmitDefaultValue=false)]
        public bool? MomentumPredictor { get; set; }

        /// <summary>
        /// Gets or Sets Transonic
        /// </summary>
        [DataMember(Name="transonic", EmitDefaultValue=false)]
        public bool? Transonic { get; set; }

        /// <summary>
        /// Gets or Sets NumOuterCorrectors
        /// </summary>
        [DataMember(Name="numOuterCorrectors", EmitDefaultValue=false)]
        public int? NumOuterCorrectors { get; set; }

        /// <summary>
        /// Gets or Sets NumCorrectors
        /// </summary>
        [DataMember(Name="numCorrectors", EmitDefaultValue=false)]
        public int? NumCorrectors { get; set; }

        /// <summary>
        /// &lt;p&gt;The pressure equation is repeatedly solved based on the value of non-orthogonal correctors in the PISO/SIMPLE/PIMPLE algorithm. This may reduce the effect of bad mesh.&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;The pressure equation is repeatedly solved based on the value of non-orthogonal correctors in the PISO/SIMPLE/PIMPLE algorithm. This may reduce the effect of bad mesh.&lt;/p&gt;</value>
        [DataMember(Name="numNonOrthogonalCorrectors", EmitDefaultValue=false)]
        public int? NumNonOrthogonalCorrectors { get; set; }

        /// <summary>
        /// Gets or Sets SmoothingParameter
        /// </summary>
        [DataMember(Name="smoothingParameter", EmitDefaultValue=false)]
        public decimal? SmoothingParameter { get; set; }

        /// <summary>
        /// Gets or Sets DampingCoefficient
        /// </summary>
        [DataMember(Name="dampingCoefficient", EmitDefaultValue=false)]
        public decimal? DampingCoefficient { get; set; }

        /// <summary>
        /// Gets or Sets NumAlphaSpreadIterations
        /// </summary>
        [DataMember(Name="numAlphaSpreadIterations", EmitDefaultValue=false)]
        public int? NumAlphaSpreadIterations { get; set; }

        /// <summary>
        /// Gets or Sets NumAlphaSweepIterations
        /// </summary>
        [DataMember(Name="numAlphaSweepIterations", EmitDefaultValue=false)]
        public int? NumAlphaSweepIterations { get; set; }

        /// <summary>
        /// Gets or Sets MinDensity
        /// </summary>
        [DataMember(Name="minDensity", EmitDefaultValue=false)]
        public DimensionalDensity MinDensity { get; set; }

        /// <summary>
        /// Gets or Sets MaxDensity
        /// </summary>
        [DataMember(Name="maxDensity", EmitDefaultValue=false)]
        public DimensionalDensity MaxDensity { get; set; }

        /// <summary>
        /// Gets or Sets EvaluateTurbulenceOnlyOnFinalIteration
        /// </summary>
        [DataMember(Name="evaluateTurbulenceOnlyOnFinalIteration", EmitDefaultValue=false)]
        public bool? EvaluateTurbulenceOnlyOnFinalIteration { get; set; }

        /// <summary>
        /// &lt;p&gt;Enter the cell where you want to define reference pressure in the PISO/SIMPLE/PIMPLE algorithm.&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;Enter the cell where you want to define reference pressure in the PISO/SIMPLE/PIMPLE algorithm.&lt;/p&gt;</value>
        [DataMember(Name="pressureReferenceCell", EmitDefaultValue=false)]
        public int? PressureReferenceCell { get; set; }

        /// <summary>
        /// Gets or Sets PressureReferenceValue
        /// </summary>
        [DataMember(Name="pressureReferenceValue", EmitDefaultValue=false)]
        public DimensionalPressure PressureReferenceValue { get; set; }

        /// <summary>
        /// Gets or Sets VelocityLimit
        /// </summary>
        [DataMember(Name="velocityLimit", EmitDefaultValue=false)]
        public DimensionalSpeed VelocityLimit { get; set; }

        /// <summary>
        /// Gets or Sets ResidualControls
        /// </summary>
        [DataMember(Name="residualControls", EmitDefaultValue=false)]
        public ResidualControls ResidualControls { get; set; }

        /// <summary>
        /// Gets or Sets Solvers
        /// </summary>
        [DataMember(Name="solvers", EmitDefaultValue=false)]
        public FluidSolvers Solvers { get; set; }

        /// <summary>
        /// Gets or Sets Schemes
        /// </summary>
        [DataMember(Name="schemes", EmitDefaultValue=false)]
        public Schemes Schemes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FluidNumerics {\n");
            sb.Append("  RelaxationType: ").Append(RelaxationType).Append("\n");
            sb.Append("  RelaxationFactor: ").Append(RelaxationFactor).Append("\n");
            sb.Append("  RadiationResolution: ").Append(RadiationResolution).Append("\n");
            sb.Append("  MomentumPredictor: ").Append(MomentumPredictor).Append("\n");
            sb.Append("  Transonic: ").Append(Transonic).Append("\n");
            sb.Append("  NumOuterCorrectors: ").Append(NumOuterCorrectors).Append("\n");
            sb.Append("  NumCorrectors: ").Append(NumCorrectors).Append("\n");
            sb.Append("  NumNonOrthogonalCorrectors: ").Append(NumNonOrthogonalCorrectors).Append("\n");
            sb.Append("  SmoothingParameter: ").Append(SmoothingParameter).Append("\n");
            sb.Append("  DampingCoefficient: ").Append(DampingCoefficient).Append("\n");
            sb.Append("  NumAlphaSpreadIterations: ").Append(NumAlphaSpreadIterations).Append("\n");
            sb.Append("  NumAlphaSweepIterations: ").Append(NumAlphaSweepIterations).Append("\n");
            sb.Append("  MinDensity: ").Append(MinDensity).Append("\n");
            sb.Append("  MaxDensity: ").Append(MaxDensity).Append("\n");
            sb.Append("  EvaluateTurbulenceOnlyOnFinalIteration: ").Append(EvaluateTurbulenceOnlyOnFinalIteration).Append("\n");
            sb.Append("  PressureReferenceCell: ").Append(PressureReferenceCell).Append("\n");
            sb.Append("  PressureReferenceValue: ").Append(PressureReferenceValue).Append("\n");
            sb.Append("  VelocityLimit: ").Append(VelocityLimit).Append("\n");
            sb.Append("  ResidualControls: ").Append(ResidualControls).Append("\n");
            sb.Append("  Solvers: ").Append(Solvers).Append("\n");
            sb.Append("  Schemes: ").Append(Schemes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FluidNumerics);
        }

        /// <summary>
        /// Returns true if FluidNumerics instances are equal
        /// </summary>
        /// <param name="input">Instance of FluidNumerics to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FluidNumerics input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RelaxationType == input.RelaxationType ||
                    (this.RelaxationType != null &&
                    this.RelaxationType.Equals(input.RelaxationType))
                ) && 
                (
                    this.RelaxationFactor == input.RelaxationFactor ||
                    (this.RelaxationFactor != null &&
                    this.RelaxationFactor.Equals(input.RelaxationFactor))
                ) && 
                (
                    this.RadiationResolution == input.RadiationResolution ||
                    this.RadiationResolution.Equals(input.RadiationResolution)
                ) && 
                (
                    this.MomentumPredictor == input.MomentumPredictor ||
                    (this.MomentumPredictor != null &&
                    this.MomentumPredictor.Equals(input.MomentumPredictor))
                ) && 
                (
                    this.Transonic == input.Transonic ||
                    (this.Transonic != null &&
                    this.Transonic.Equals(input.Transonic))
                ) && 
                (
                    this.NumOuterCorrectors == input.NumOuterCorrectors ||
                    (this.NumOuterCorrectors != null &&
                    this.NumOuterCorrectors.Equals(input.NumOuterCorrectors))
                ) && 
                (
                    this.NumCorrectors == input.NumCorrectors ||
                    (this.NumCorrectors != null &&
                    this.NumCorrectors.Equals(input.NumCorrectors))
                ) && 
                (
                    this.NumNonOrthogonalCorrectors == input.NumNonOrthogonalCorrectors ||
                    (this.NumNonOrthogonalCorrectors != null &&
                    this.NumNonOrthogonalCorrectors.Equals(input.NumNonOrthogonalCorrectors))
                ) && 
                (
                    this.SmoothingParameter == input.SmoothingParameter ||
                    (this.SmoothingParameter != null &&
                    this.SmoothingParameter.Equals(input.SmoothingParameter))
                ) && 
                (
                    this.DampingCoefficient == input.DampingCoefficient ||
                    (this.DampingCoefficient != null &&
                    this.DampingCoefficient.Equals(input.DampingCoefficient))
                ) && 
                (
                    this.NumAlphaSpreadIterations == input.NumAlphaSpreadIterations ||
                    (this.NumAlphaSpreadIterations != null &&
                    this.NumAlphaSpreadIterations.Equals(input.NumAlphaSpreadIterations))
                ) && 
                (
                    this.NumAlphaSweepIterations == input.NumAlphaSweepIterations ||
                    (this.NumAlphaSweepIterations != null &&
                    this.NumAlphaSweepIterations.Equals(input.NumAlphaSweepIterations))
                ) && 
                (
                    this.MinDensity == input.MinDensity ||
                    (this.MinDensity != null &&
                    this.MinDensity.Equals(input.MinDensity))
                ) && 
                (
                    this.MaxDensity == input.MaxDensity ||
                    (this.MaxDensity != null &&
                    this.MaxDensity.Equals(input.MaxDensity))
                ) && 
                (
                    this.EvaluateTurbulenceOnlyOnFinalIteration == input.EvaluateTurbulenceOnlyOnFinalIteration ||
                    (this.EvaluateTurbulenceOnlyOnFinalIteration != null &&
                    this.EvaluateTurbulenceOnlyOnFinalIteration.Equals(input.EvaluateTurbulenceOnlyOnFinalIteration))
                ) && 
                (
                    this.PressureReferenceCell == input.PressureReferenceCell ||
                    (this.PressureReferenceCell != null &&
                    this.PressureReferenceCell.Equals(input.PressureReferenceCell))
                ) && 
                (
                    this.PressureReferenceValue == input.PressureReferenceValue ||
                    (this.PressureReferenceValue != null &&
                    this.PressureReferenceValue.Equals(input.PressureReferenceValue))
                ) && 
                (
                    this.VelocityLimit == input.VelocityLimit ||
                    (this.VelocityLimit != null &&
                    this.VelocityLimit.Equals(input.VelocityLimit))
                ) && 
                (
                    this.ResidualControls == input.ResidualControls ||
                    (this.ResidualControls != null &&
                    this.ResidualControls.Equals(input.ResidualControls))
                ) && 
                (
                    this.Solvers == input.Solvers ||
                    (this.Solvers != null &&
                    this.Solvers.Equals(input.Solvers))
                ) && 
                (
                    this.Schemes == input.Schemes ||
                    (this.Schemes != null &&
                    this.Schemes.Equals(input.Schemes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RelaxationType != null)
                    hashCode = hashCode * 59 + this.RelaxationType.GetHashCode();
                if (this.RelaxationFactor != null)
                    hashCode = hashCode * 59 + this.RelaxationFactor.GetHashCode();
                hashCode = hashCode * 59 + this.RadiationResolution.GetHashCode();
                if (this.MomentumPredictor != null)
                    hashCode = hashCode * 59 + this.MomentumPredictor.GetHashCode();
                if (this.Transonic != null)
                    hashCode = hashCode * 59 + this.Transonic.GetHashCode();
                if (this.NumOuterCorrectors != null)
                    hashCode = hashCode * 59 + this.NumOuterCorrectors.GetHashCode();
                if (this.NumCorrectors != null)
                    hashCode = hashCode * 59 + this.NumCorrectors.GetHashCode();
                if (this.NumNonOrthogonalCorrectors != null)
                    hashCode = hashCode * 59 + this.NumNonOrthogonalCorrectors.GetHashCode();
                if (this.SmoothingParameter != null)
                    hashCode = hashCode * 59 + this.SmoothingParameter.GetHashCode();
                if (this.DampingCoefficient != null)
                    hashCode = hashCode * 59 + this.DampingCoefficient.GetHashCode();
                if (this.NumAlphaSpreadIterations != null)
                    hashCode = hashCode * 59 + this.NumAlphaSpreadIterations.GetHashCode();
                if (this.NumAlphaSweepIterations != null)
                    hashCode = hashCode * 59 + this.NumAlphaSweepIterations.GetHashCode();
                if (this.MinDensity != null)
                    hashCode = hashCode * 59 + this.MinDensity.GetHashCode();
                if (this.MaxDensity != null)
                    hashCode = hashCode * 59 + this.MaxDensity.GetHashCode();
                if (this.EvaluateTurbulenceOnlyOnFinalIteration != null)
                    hashCode = hashCode * 59 + this.EvaluateTurbulenceOnlyOnFinalIteration.GetHashCode();
                if (this.PressureReferenceCell != null)
                    hashCode = hashCode * 59 + this.PressureReferenceCell.GetHashCode();
                if (this.PressureReferenceValue != null)
                    hashCode = hashCode * 59 + this.PressureReferenceValue.GetHashCode();
                if (this.VelocityLimit != null)
                    hashCode = hashCode * 59 + this.VelocityLimit.GetHashCode();
                if (this.ResidualControls != null)
                    hashCode = hashCode * 59 + this.ResidualControls.GetHashCode();
                if (this.Solvers != null)
                    hashCode = hashCode * 59 + this.Solvers.GetHashCode();
                if (this.Schemes != null)
                    hashCode = hashCode * 59 + this.Schemes.GetHashCode();
                return hashCode;
            }
        }

    }

}
