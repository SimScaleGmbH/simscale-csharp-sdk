/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// MarcNonlinearSolverSettings
    /// </summary>
    [DataContract]
    public partial class MarcNonlinearSolverSettings : IEquatable<MarcNonlinearSolverSettings>
    {
        /// <summary>
        /// Defines IterativeProcedure
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IterativeProcedureEnum
        {
            /// <summary>
            /// Enum FULLNEWTONRAPHSON for value: FULL_NEWTON_RAPHSON
            /// </summary>
            [EnumMember(Value = "FULL_NEWTON_RAPHSON")]
            FULLNEWTONRAPHSON = 1,

            /// <summary>
            /// Enum MODIFIEDNEWTONRAPHSON for value: MODIFIED_NEWTON_RAPHSON
            /// </summary>
            [EnumMember(Value = "MODIFIED_NEWTON_RAPHSON")]
            MODIFIEDNEWTONRAPHSON = 2,

            /// <summary>
            /// Enum NEWTONRAPHSONSTRAINCORRECTION for value: NEWTON_RAPHSON_STRAIN_CORRECTION
            /// </summary>
            [EnumMember(Value = "NEWTON_RAPHSON_STRAIN_CORRECTION")]
            NEWTONRAPHSONSTRAINCORRECTION = 3

        }

        /// <summary>
        /// Gets or Sets IterativeProcedure
        /// </summary>
        [DataMember(Name="iterativeProcedure", EmitDefaultValue=false)]
        public IterativeProcedureEnum? IterativeProcedure { get; set; }
        /// <summary>
        /// Defines InitialStressStiffnessContribution
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InitialStressStiffnessContributionEnum
        {
            /// <summary>
            /// Enum FULLCONTRIBUTION for value: FULL_CONTRIBUTION
            /// </summary>
            [EnumMember(Value = "FULL_CONTRIBUTION")]
            FULLCONTRIBUTION = 1,

            /// <summary>
            /// Enum NOCONTRIBUTION for value: NO_CONTRIBUTION
            /// </summary>
            [EnumMember(Value = "NO_CONTRIBUTION")]
            NOCONTRIBUTION = 2,

            /// <summary>
            /// Enum TENSILESTRESS for value: TENSILE_STRESS
            /// </summary>
            [EnumMember(Value = "TENSILE_STRESS")]
            TENSILESTRESS = 3,

            /// <summary>
            /// Enum DEVIATORICSTRESS for value: DEVIATORIC_STRESS
            /// </summary>
            [EnumMember(Value = "DEVIATORIC_STRESS")]
            DEVIATORICSTRESS = 4,

            /// <summary>
            /// Enum BEGININCREMENTSTRESS for value: BEGIN_INCREMENT_STRESS
            /// </summary>
            [EnumMember(Value = "BEGIN_INCREMENT_STRESS")]
            BEGININCREMENTSTRESS = 5,

            /// <summary>
            /// Enum PRINCIPALTENSILESTRESS for value: PRINCIPAL_TENSILE_STRESS
            /// </summary>
            [EnumMember(Value = "PRINCIPAL_TENSILE_STRESS")]
            PRINCIPALTENSILESTRESS = 6

        }

        /// <summary>
        /// Gets or Sets InitialStressStiffnessContribution
        /// </summary>
        [DataMember(Name="initialStressStiffnessContribution", EmitDefaultValue=false)]
        public InitialStressStiffnessContributionEnum? InitialStressStiffnessContribution { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MarcNonlinearSolverSettings" /> class.
        /// </summary>
        /// <param name="iterativeProcedure">iterativeProcedure (default to IterativeProcedureEnum.FULLNEWTONRAPHSON).</param>
        /// <param name="initialStressStiffnessContribution">initialStressStiffnessContribution (default to InitialStressStiffnessContributionEnum.FULLCONTRIBUTION).</param>
        /// <param name="maxNumberOfRecycles">maxNumberOfRecycles (default to 20).</param>
        /// <param name="minNumberOfRecycles">minNumberOfRecycles (default to 0).</param>
        /// <param name="convergenceMethod">convergenceMethod.</param>
        public MarcNonlinearSolverSettings(IterativeProcedureEnum? iterativeProcedure = default(IterativeProcedureEnum?), InitialStressStiffnessContributionEnum? initialStressStiffnessContribution = default(InitialStressStiffnessContributionEnum?), int? maxNumberOfRecycles = default(int?), int? minNumberOfRecycles = default(int?), OneOfMarcNonlinearSolverSettingsConvergenceMethod convergenceMethod = default(OneOfMarcNonlinearSolverSettingsConvergenceMethod))
        {
            this.IterativeProcedure = iterativeProcedure;
            this.InitialStressStiffnessContribution = initialStressStiffnessContribution;
            this.MaxNumberOfRecycles = maxNumberOfRecycles;
            this.MinNumberOfRecycles = minNumberOfRecycles;
            this.ConvergenceMethod = convergenceMethod;
        }
        
        /// <summary>
        /// Gets or Sets MaxNumberOfRecycles
        /// </summary>
        [DataMember(Name="maxNumberOfRecycles", EmitDefaultValue=false)]
        public int? MaxNumberOfRecycles { get; set; }

        /// <summary>
        /// Gets or Sets MinNumberOfRecycles
        /// </summary>
        [DataMember(Name="minNumberOfRecycles", EmitDefaultValue=false)]
        public int? MinNumberOfRecycles { get; set; }

        /// <summary>
        /// Gets or Sets ConvergenceMethod
        /// </summary>
        [DataMember(Name="convergenceMethod", EmitDefaultValue=false)]
        public OneOfMarcNonlinearSolverSettingsConvergenceMethod ConvergenceMethod { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MarcNonlinearSolverSettings {\n");
            sb.Append("  IterativeProcedure: ").Append(IterativeProcedure).Append("\n");
            sb.Append("  InitialStressStiffnessContribution: ").Append(InitialStressStiffnessContribution).Append("\n");
            sb.Append("  MaxNumberOfRecycles: ").Append(MaxNumberOfRecycles).Append("\n");
            sb.Append("  MinNumberOfRecycles: ").Append(MinNumberOfRecycles).Append("\n");
            sb.Append("  ConvergenceMethod: ").Append(ConvergenceMethod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MarcNonlinearSolverSettings);
        }

        /// <summary>
        /// Returns true if MarcNonlinearSolverSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of MarcNonlinearSolverSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MarcNonlinearSolverSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IterativeProcedure == input.IterativeProcedure ||
                    this.IterativeProcedure.Equals(input.IterativeProcedure)
                ) && 
                (
                    this.InitialStressStiffnessContribution == input.InitialStressStiffnessContribution ||
                    this.InitialStressStiffnessContribution.Equals(input.InitialStressStiffnessContribution)
                ) && 
                (
                    this.MaxNumberOfRecycles == input.MaxNumberOfRecycles ||
                    (this.MaxNumberOfRecycles != null &&
                    this.MaxNumberOfRecycles.Equals(input.MaxNumberOfRecycles))
                ) && 
                (
                    this.MinNumberOfRecycles == input.MinNumberOfRecycles ||
                    (this.MinNumberOfRecycles != null &&
                    this.MinNumberOfRecycles.Equals(input.MinNumberOfRecycles))
                ) && 
                (
                    this.ConvergenceMethod == input.ConvergenceMethod ||
                    (this.ConvergenceMethod != null &&
                    this.ConvergenceMethod.Equals(input.ConvergenceMethod))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.IterativeProcedure.GetHashCode();
                hashCode = hashCode * 59 + this.InitialStressStiffnessContribution.GetHashCode();
                if (this.MaxNumberOfRecycles != null)
                    hashCode = hashCode * 59 + this.MaxNumberOfRecycles.GetHashCode();
                if (this.MinNumberOfRecycles != null)
                    hashCode = hashCode * 59 + this.MinNumberOfRecycles.GetHashCode();
                if (this.ConvergenceMethod != null)
                    hashCode = hashCode * 59 + this.ConvergenceMethod.GetHashCode();
                return hashCode;
            }
        }

    }

}
