/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// A &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/meshing/hex-dominant/#feature-refinement&#39; target&#x3D;&#39;_blank&#39;&gt;&lt;b&gt;feature refinement&lt;/b&gt;&lt;/a&gt; can be used to refine the geometry’s feature edges. All edges whose adjacent surface normals form an angle of less than 150° will be refined.
    /// </summary>
    [DataContract]
    public partial class FeatureRefinement : IEquatable<FeatureRefinement>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FeatureRefinement" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FeatureRefinement() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FeatureRefinement" /> class.
        /// </summary>
        /// <param name="type">A &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/meshing/hex-dominant/#feature-refinement&#39; target&#x3D;&#39;_blank&#39;&gt;&lt;b&gt;feature refinement&lt;/b&gt;&lt;/a&gt; can be used to refine the geometry’s feature edges. All edges whose adjacent surface normals form an angle of less than 150° will be refined.  Schema name: FeatureRefinement (required) (default to &quot;FEATURE&quot;).</param>
        /// <param name="name">name (default to &quot;Feature refinement&quot;).</param>
        /// <param name="includedAngle">includedAngle.</param>
        /// <param name="distanceRefinementLevels">&lt;p&gt;This dynamic table allows you to add refinements to the mesh associated with the features (e.g. edges) in a specific distance to the features. Therefore specify the distance in the left box and the associated refinement level on the right (the higher, the finer). The pair (0,0) would mean that a refinement with level 0 would be introduced directly at the features of the mesh.&lt;/p&gt;.</param>
        public FeatureRefinement(string type = "FEATURE", string name = default(string), DimensionalAngle includedAngle = default(DimensionalAngle), List<RefinementLevel> distanceRefinementLevels = default(List<RefinementLevel>))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for FeatureRefinement and cannot be null");
            this.Name = name;
            this.IncludedAngle = includedAngle;
            this.DistanceRefinementLevels = distanceRefinementLevels;
        }
        
        /// <summary>
        /// A &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/meshing/hex-dominant/#feature-refinement&#39; target&#x3D;&#39;_blank&#39;&gt;&lt;b&gt;feature refinement&lt;/b&gt;&lt;/a&gt; can be used to refine the geometry’s feature edges. All edges whose adjacent surface normals form an angle of less than 150° will be refined.  Schema name: FeatureRefinement
        /// </summary>
        /// <value>A &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/meshing/hex-dominant/#feature-refinement&#39; target&#x3D;&#39;_blank&#39;&gt;&lt;b&gt;feature refinement&lt;/b&gt;&lt;/a&gt; can be used to refine the geometry’s feature edges. All edges whose adjacent surface normals form an angle of less than 150° will be refined.  Schema name: FeatureRefinement</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets IncludedAngle
        /// </summary>
        [DataMember(Name="includedAngle", EmitDefaultValue=false)]
        public DimensionalAngle IncludedAngle { get; set; }

        /// <summary>
        /// &lt;p&gt;This dynamic table allows you to add refinements to the mesh associated with the features (e.g. edges) in a specific distance to the features. Therefore specify the distance in the left box and the associated refinement level on the right (the higher, the finer). The pair (0,0) would mean that a refinement with level 0 would be introduced directly at the features of the mesh.&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;This dynamic table allows you to add refinements to the mesh associated with the features (e.g. edges) in a specific distance to the features. Therefore specify the distance in the left box and the associated refinement level on the right (the higher, the finer). The pair (0,0) would mean that a refinement with level 0 would be introduced directly at the features of the mesh.&lt;/p&gt;</value>
        [DataMember(Name="distanceRefinementLevels", EmitDefaultValue=false)]
        public List<RefinementLevel> DistanceRefinementLevels { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FeatureRefinement {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IncludedAngle: ").Append(IncludedAngle).Append("\n");
            sb.Append("  DistanceRefinementLevels: ").Append(DistanceRefinementLevels).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FeatureRefinement);
        }

        /// <summary>
        /// Returns true if FeatureRefinement instances are equal
        /// </summary>
        /// <param name="input">Instance of FeatureRefinement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeatureRefinement input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.IncludedAngle == input.IncludedAngle ||
                    (this.IncludedAngle != null &&
                    this.IncludedAngle.Equals(input.IncludedAngle))
                ) && 
                (
                    this.DistanceRefinementLevels == input.DistanceRefinementLevels ||
                    this.DistanceRefinementLevels != null &&
                    input.DistanceRefinementLevels != null &&
                    this.DistanceRefinementLevels.SequenceEqual(input.DistanceRefinementLevels)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.IncludedAngle != null)
                    hashCode = hashCode * 59 + this.IncludedAngle.GetHashCode();
                if (this.DistanceRefinementLevels != null)
                    hashCode = hashCode * 59 + this.DistanceRefinementLevels.GetHashCode();
                return hashCode;
            }
        }

    }

}
