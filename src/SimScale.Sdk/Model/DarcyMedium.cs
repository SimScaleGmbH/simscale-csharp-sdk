/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// DarcyMedium
    /// </summary>
    [DataContract]
    public partial class DarcyMedium : OneOfAdvancedConceptsPorousMediums, IEquatable<DarcyMedium>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DarcyMedium" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DarcyMedium() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DarcyMedium" /> class.
        /// </summary>
        /// <param name="type">Schema name: DarcyMedium (required) (default to &quot;DARCY&quot;).</param>
        /// <param name="name">name.</param>
        /// <param name="porosity">Porosity is the fraction of a volume of material is that is void. It ranges from φ &#x3D; 0 (completely empty) to φ &#x3D; 1 (completely solid). (default to 1M).</param>
        /// <param name="permeability">permeability.</param>
        /// <param name="dragCoefficient">The Darcy law may be extended to include the Forchheimer drag term for more inertial flows (Re &gt; 10). This term is quadratic in flow velocity. Its coefficient includes the fluid drag coefficient Cd. (default to 0M).</param>
        /// <param name="topologicalReference">topologicalReference.</param>
        public DarcyMedium(string type = "DARCY", string name = default(string), decimal? porosity = default(decimal?), DimensionalArea permeability = default(DimensionalArea), decimal? dragCoefficient = default(decimal?), TopologicalReference topologicalReference = default(TopologicalReference))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for DarcyMedium and cannot be null");
            this.Name = name;
            this.Porosity = porosity;
            this.Permeability = permeability;
            this.DragCoefficient = dragCoefficient;
            this.TopologicalReference = topologicalReference;
        }
        
        /// <summary>
        /// Schema name: DarcyMedium
        /// </summary>
        /// <value>Schema name: DarcyMedium</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Porosity is the fraction of a volume of material is that is void. It ranges from φ &#x3D; 0 (completely empty) to φ &#x3D; 1 (completely solid).
        /// </summary>
        /// <value>Porosity is the fraction of a volume of material is that is void. It ranges from φ &#x3D; 0 (completely empty) to φ &#x3D; 1 (completely solid).</value>
        [DataMember(Name="porosity", EmitDefaultValue=false)]
        public decimal? Porosity { get; set; }

        /// <summary>
        /// Gets or Sets Permeability
        /// </summary>
        [DataMember(Name="permeability", EmitDefaultValue=false)]
        public DimensionalArea Permeability { get; set; }

        /// <summary>
        /// The Darcy law may be extended to include the Forchheimer drag term for more inertial flows (Re &gt; 10). This term is quadratic in flow velocity. Its coefficient includes the fluid drag coefficient Cd.
        /// </summary>
        /// <value>The Darcy law may be extended to include the Forchheimer drag term for more inertial flows (Re &gt; 10). This term is quadratic in flow velocity. Its coefficient includes the fluid drag coefficient Cd.</value>
        [DataMember(Name="dragCoefficient", EmitDefaultValue=false)]
        public decimal? DragCoefficient { get; set; }

        /// <summary>
        /// Gets or Sets TopologicalReference
        /// </summary>
        [DataMember(Name="topologicalReference", EmitDefaultValue=false)]
        public TopologicalReference TopologicalReference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DarcyMedium {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Porosity: ").Append(Porosity).Append("\n");
            sb.Append("  Permeability: ").Append(Permeability).Append("\n");
            sb.Append("  DragCoefficient: ").Append(DragCoefficient).Append("\n");
            sb.Append("  TopologicalReference: ").Append(TopologicalReference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DarcyMedium);
        }

        /// <summary>
        /// Returns true if DarcyMedium instances are equal
        /// </summary>
        /// <param name="input">Instance of DarcyMedium to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DarcyMedium input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Porosity == input.Porosity ||
                    (this.Porosity != null &&
                    this.Porosity.Equals(input.Porosity))
                ) && 
                (
                    this.Permeability == input.Permeability ||
                    (this.Permeability != null &&
                    this.Permeability.Equals(input.Permeability))
                ) && 
                (
                    this.DragCoefficient == input.DragCoefficient ||
                    (this.DragCoefficient != null &&
                    this.DragCoefficient.Equals(input.DragCoefficient))
                ) && 
                (
                    this.TopologicalReference == input.TopologicalReference ||
                    (this.TopologicalReference != null &&
                    this.TopologicalReference.Equals(input.TopologicalReference))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Porosity != null)
                    hashCode = hashCode * 59 + this.Porosity.GetHashCode();
                if (this.Permeability != null)
                    hashCode = hashCode * 59 + this.Permeability.GetHashCode();
                if (this.DragCoefficient != null)
                    hashCode = hashCode * 59 + this.DragCoefficient.GetHashCode();
                if (this.TopologicalReference != null)
                    hashCode = hashCode * 59 + this.TopologicalReference.GetHashCode();
                return hashCode;
            }
        }

    }

}
