/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// NewmarkTimeIntegrationScheme
    /// </summary>
    [DataContract]
    public partial class NewmarkTimeIntegrationScheme : OneOfImplicitTimeIntegrationTypeScheme, IEquatable<NewmarkTimeIntegrationScheme>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NewmarkTimeIntegrationScheme" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NewmarkTimeIntegrationScheme() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NewmarkTimeIntegrationScheme" /> class.
        /// </summary>
        /// <param name="type">Schema name: NewmarkTimeIntegrationScheme (required) (default to &quot;NEWMARK&quot;).</param>
        /// <param name="beta">&lt;p&gt;The choice of the values for the parameters &lt;b&gt;&amp;alpha;&lt;/b&gt; and &lt;b&gt;&amp;beta;&lt;/b&gt; influences the stability, accuracy and numerical damping of the &lt;i&gt;Newmark Sheme&lt;/i&gt;.&lt;/v&gt; (default to 0.25M).</param>
        /// <param name="gamma">&lt;p&gt;The choice of the values for the parameters &lt;b&gt;&amp;alpha;&lt;/b&gt; and &lt;b&gt;&amp;beta;&lt;/b&gt; influences the stability, accuracy and numerical damping of the &lt;i&gt;Newmark Sheme&lt;/i&gt;.&lt;/v&gt; (default to 0.5M).</param>
        public NewmarkTimeIntegrationScheme(string type = "NEWMARK", decimal? beta = default(decimal?), decimal? gamma = default(decimal?))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for NewmarkTimeIntegrationScheme and cannot be null");
            this.Beta = beta;
            this.Gamma = gamma;
        }
        
        /// <summary>
        /// Schema name: NewmarkTimeIntegrationScheme
        /// </summary>
        /// <value>Schema name: NewmarkTimeIntegrationScheme</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// &lt;p&gt;The choice of the values for the parameters &lt;b&gt;&amp;alpha;&lt;/b&gt; and &lt;b&gt;&amp;beta;&lt;/b&gt; influences the stability, accuracy and numerical damping of the &lt;i&gt;Newmark Sheme&lt;/i&gt;.&lt;/v&gt;
        /// </summary>
        /// <value>&lt;p&gt;The choice of the values for the parameters &lt;b&gt;&amp;alpha;&lt;/b&gt; and &lt;b&gt;&amp;beta;&lt;/b&gt; influences the stability, accuracy and numerical damping of the &lt;i&gt;Newmark Sheme&lt;/i&gt;.&lt;/v&gt;</value>
        [DataMember(Name="beta", EmitDefaultValue=false)]
        public decimal? Beta { get; set; }

        /// <summary>
        /// &lt;p&gt;The choice of the values for the parameters &lt;b&gt;&amp;alpha;&lt;/b&gt; and &lt;b&gt;&amp;beta;&lt;/b&gt; influences the stability, accuracy and numerical damping of the &lt;i&gt;Newmark Sheme&lt;/i&gt;.&lt;/v&gt;
        /// </summary>
        /// <value>&lt;p&gt;The choice of the values for the parameters &lt;b&gt;&amp;alpha;&lt;/b&gt; and &lt;b&gt;&amp;beta;&lt;/b&gt; influences the stability, accuracy and numerical damping of the &lt;i&gt;Newmark Sheme&lt;/i&gt;.&lt;/v&gt;</value>
        [DataMember(Name="gamma", EmitDefaultValue=false)]
        public decimal? Gamma { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NewmarkTimeIntegrationScheme {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Beta: ").Append(Beta).Append("\n");
            sb.Append("  Gamma: ").Append(Gamma).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NewmarkTimeIntegrationScheme);
        }

        /// <summary>
        /// Returns true if NewmarkTimeIntegrationScheme instances are equal
        /// </summary>
        /// <param name="input">Instance of NewmarkTimeIntegrationScheme to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NewmarkTimeIntegrationScheme input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Beta == input.Beta ||
                    (this.Beta != null &&
                    this.Beta.Equals(input.Beta))
                ) && 
                (
                    this.Gamma == input.Gamma ||
                    (this.Gamma != null &&
                    this.Gamma.Equals(input.Gamma))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Beta != null)
                    hashCode = hashCode * 59 + this.Beta.GetHashCode();
                if (this.Gamma != null)
                    hashCode = hashCode * 59 + this.Gamma.GetHashCode();
                return hashCode;
            }
        }

    }

}
