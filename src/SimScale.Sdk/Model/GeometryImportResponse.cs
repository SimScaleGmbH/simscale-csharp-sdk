/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// GeometryImportResponse
    /// </summary>
    [DataContract]
    public partial class GeometryImportResponse : IEquatable<GeometryImportResponse>
    {
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public Status Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GeometryImportResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GeometryImportResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GeometryImportResponse" /> class.
        /// </summary>
        /// <param name="status">status (required).</param>
        /// <param name="failureReason">failureReason.</param>
        public GeometryImportResponse(Status status = default(Status), LogEntry failureReason = default(LogEntry))
        {
            this.Status = status;
            this.FailureReason = failureReason;
        }
        
        /// <summary>
        /// The ID of the geometry import operation.
        /// </summary>
        /// <value>The ID of the geometry import operation.</value>
        [DataMember(Name="geometryImportId", EmitDefaultValue=false)]
        public Guid? GeometryImportId { get; private set; }

        /// <summary>
        /// The ID of the imported geometry when the import succeeded.
        /// </summary>
        /// <value>The ID of the imported geometry when the import succeeded.</value>
        [DataMember(Name="geometryId", EmitDefaultValue=false)]
        public Guid? GeometryId { get; private set; }

        /// <summary>
        /// Gets or Sets FailureReason
        /// </summary>
        [DataMember(Name="failureReason", EmitDefaultValue=false)]
        public LogEntry FailureReason { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GeometryImportResponse {\n");
            sb.Append("  GeometryImportId: ").Append(GeometryImportId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  GeometryId: ").Append(GeometryId).Append("\n");
            sb.Append("  FailureReason: ").Append(FailureReason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GeometryImportResponse);
        }

        /// <summary>
        /// Returns true if GeometryImportResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GeometryImportResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GeometryImportResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.GeometryImportId == input.GeometryImportId ||
                    (this.GeometryImportId != null &&
                    this.GeometryImportId.Equals(input.GeometryImportId))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.GeometryId == input.GeometryId ||
                    (this.GeometryId != null &&
                    this.GeometryId.Equals(input.GeometryId))
                ) && 
                (
                    this.FailureReason == input.FailureReason ||
                    (this.FailureReason != null &&
                    this.FailureReason.Equals(input.FailureReason))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GeometryImportId != null)
                    hashCode = hashCode * 59 + this.GeometryImportId.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.GeometryId != null)
                    hashCode = hashCode * 59 + this.GeometryId.GetHashCode();
                if (this.FailureReason != null)
                    hashCode = hashCode * 59 + this.FailureReason.GetHashCode();
                return hashCode;
            }
        }

    }

}
