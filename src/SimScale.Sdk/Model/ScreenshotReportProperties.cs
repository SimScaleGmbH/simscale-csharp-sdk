/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// ScreenshotReportProperties
    /// </summary>
    [DataContract]
    public partial class ScreenshotReportProperties : OneOfReportProperties, IEquatable<ScreenshotReportProperties>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScreenshotReportProperties" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ScreenshotReportProperties() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScreenshotReportProperties" /> class.
        /// </summary>
        /// <param name="reportType">reportType (required) (default to &quot;SCREENSHOT&quot;).</param>
        /// <param name="modelSettings">modelSettings (required).</param>
        /// <param name="filters">filters.</param>
        /// <param name="cameraSettings">cameraSettings (required).</param>
        /// <param name="outputSettings">outputSettings (required).</param>
        public ScreenshotReportProperties(string reportType = "SCREENSHOT", ModelSettings modelSettings = default(ModelSettings), Filters filters = default(Filters), OneOfCameraSettings cameraSettings = default(OneOfCameraSettings), ScreenshotOutputSettings outputSettings = default(ScreenshotOutputSettings))
        {
            // to ensure "reportType" is required (not null)
            this.ReportType = reportType ?? throw new ArgumentNullException("reportType is a required property for ScreenshotReportProperties and cannot be null");
            // to ensure "modelSettings" is required (not null)
            this.ModelSettings = modelSettings ?? throw new ArgumentNullException("modelSettings is a required property for ScreenshotReportProperties and cannot be null");
            // to ensure "cameraSettings" is required (not null)
            this.CameraSettings = cameraSettings ?? throw new ArgumentNullException("cameraSettings is a required property for ScreenshotReportProperties and cannot be null");
            // to ensure "outputSettings" is required (not null)
            this.OutputSettings = outputSettings ?? throw new ArgumentNullException("outputSettings is a required property for ScreenshotReportProperties and cannot be null");
            this.Filters = filters;
        }
        
        /// <summary>
        /// Gets or Sets ReportType
        /// </summary>
        [DataMember(Name="reportType", EmitDefaultValue=false)]
        public string ReportType { get; set; }

        /// <summary>
        /// Gets or Sets ModelSettings
        /// </summary>
        [DataMember(Name="modelSettings", EmitDefaultValue=false)]
        public ModelSettings ModelSettings { get; set; }

        /// <summary>
        /// Gets or Sets Filters
        /// </summary>
        [DataMember(Name="filters", EmitDefaultValue=false)]
        public Filters Filters { get; set; }

        /// <summary>
        /// Gets or Sets CameraSettings
        /// </summary>
        [DataMember(Name="cameraSettings", EmitDefaultValue=false)]
        public OneOfCameraSettings CameraSettings { get; set; }

        /// <summary>
        /// Gets or Sets OutputSettings
        /// </summary>
        [DataMember(Name="outputSettings", EmitDefaultValue=false)]
        public ScreenshotOutputSettings OutputSettings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScreenshotReportProperties {\n");
            sb.Append("  ReportType: ").Append(ReportType).Append("\n");
            sb.Append("  ModelSettings: ").Append(ModelSettings).Append("\n");
            sb.Append("  Filters: ").Append(Filters).Append("\n");
            sb.Append("  CameraSettings: ").Append(CameraSettings).Append("\n");
            sb.Append("  OutputSettings: ").Append(OutputSettings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScreenshotReportProperties);
        }

        /// <summary>
        /// Returns true if ScreenshotReportProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ScreenshotReportProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScreenshotReportProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ReportType == input.ReportType ||
                    (this.ReportType != null &&
                    this.ReportType.Equals(input.ReportType))
                ) && 
                (
                    this.ModelSettings == input.ModelSettings ||
                    (this.ModelSettings != null &&
                    this.ModelSettings.Equals(input.ModelSettings))
                ) && 
                (
                    this.Filters == input.Filters ||
                    (this.Filters != null &&
                    this.Filters.Equals(input.Filters))
                ) && 
                (
                    this.CameraSettings == input.CameraSettings ||
                    (this.CameraSettings != null &&
                    this.CameraSettings.Equals(input.CameraSettings))
                ) && 
                (
                    this.OutputSettings == input.OutputSettings ||
                    (this.OutputSettings != null &&
                    this.OutputSettings.Equals(input.OutputSettings))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReportType != null)
                    hashCode = hashCode * 59 + this.ReportType.GetHashCode();
                if (this.ModelSettings != null)
                    hashCode = hashCode * 59 + this.ModelSettings.GetHashCode();
                if (this.Filters != null)
                    hashCode = hashCode * 59 + this.Filters.GetHashCode();
                if (this.CameraSettings != null)
                    hashCode = hashCode * 59 + this.CameraSettings.GetHashCode();
                if (this.OutputSettings != null)
                    hashCode = hashCode * 59 + this.OutputSettings.GetHashCode();
                return hashCode;
            }
        }

    }

}
