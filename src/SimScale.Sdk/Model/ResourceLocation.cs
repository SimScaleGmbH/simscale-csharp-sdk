/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// Specify the destination to which the resource will be moved/copied
    /// </summary>
    [DataContract]
    public partial class ResourceLocation : IEquatable<ResourceLocation>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceLocation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ResourceLocation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceLocation" /> class.
        /// </summary>
        /// <param name="spaceId">spaceId (required).</param>
        /// <param name="parentFolderId">If missing, the resource will be moved/copied to the root of the Space.</param>
        public ResourceLocation(Guid? spaceId = default(Guid?), Guid? parentFolderId = default(Guid?))
        {
            // to ensure "spaceId" is required (not null)
            this.SpaceId = spaceId ?? throw new ArgumentNullException("spaceId is a required property for ResourceLocation and cannot be null");
            this.ParentFolderId = parentFolderId;
        }
        
        /// <summary>
        /// Gets or Sets SpaceId
        /// </summary>
        [DataMember(Name="spaceId", EmitDefaultValue=false)]
        public Guid? SpaceId { get; set; }

        /// <summary>
        /// If missing, the resource will be moved/copied to the root of the Space
        /// </summary>
        /// <value>If missing, the resource will be moved/copied to the root of the Space</value>
        [DataMember(Name="parentFolderId", EmitDefaultValue=false)]
        public Guid? ParentFolderId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResourceLocation {\n");
            sb.Append("  SpaceId: ").Append(SpaceId).Append("\n");
            sb.Append("  ParentFolderId: ").Append(ParentFolderId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResourceLocation);
        }

        /// <summary>
        /// Returns true if ResourceLocation instances are equal
        /// </summary>
        /// <param name="input">Instance of ResourceLocation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResourceLocation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SpaceId == input.SpaceId ||
                    (this.SpaceId != null &&
                    this.SpaceId.Equals(input.SpaceId))
                ) && 
                (
                    this.ParentFolderId == input.ParentFolderId ||
                    (this.ParentFolderId != null &&
                    this.ParentFolderId.Equals(input.ParentFolderId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SpaceId != null)
                    hashCode = hashCode * 59 + this.SpaceId.GetHashCode();
                if (this.ParentFolderId != null)
                    hashCode = hashCode * 59 + this.ParentFolderId.GetHashCode();
                return hashCode;
            }
        }

    }

}
