/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// SolidNumerics
    /// </summary>
    [DataContract]
    public partial class SolidNumerics : IEquatable<SolidNumerics>
    {
        /// <summary>
        /// Defines HarmonicSolutionMethod
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HarmonicSolutionMethodEnum
        {
            /// <summary>
            /// Enum MODALBASED for value: MODAL_BASED
            /// </summary>
            [EnumMember(Value = "MODAL_BASED")]
            MODALBASED = 1,

            /// <summary>
            /// Enum DIRECT for value: DIRECT
            /// </summary>
            [EnumMember(Value = "DIRECT")]
            DIRECT = 2

        }

        /// <summary>
        /// Gets or Sets HarmonicSolutionMethod
        /// </summary>
        [DataMember(Name="harmonicSolutionMethod", EmitDefaultValue=false)]
        public HarmonicSolutionMethodEnum? HarmonicSolutionMethod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SolidNumerics" /> class.
        /// </summary>
        /// <param name="harmonicSolutionMethod">harmonicSolutionMethod (default to HarmonicSolutionMethodEnum.DIRECT).</param>
        /// <param name="solver">solver.</param>
        /// <param name="solveModel">solveModel.</param>
        /// <param name="eigenSolver">eigenSolver.</param>
        /// <param name="calculateFrequency">calculateFrequency.</param>
        /// <param name="eigenMode">eigenMode.</param>
        /// <param name="enhancedAccuracy">Further increase the accuracy of the results by running two simulations. The results of the first one will be used as input for the second one to fine-tune the setup. (default to false).</param>
        /// <param name="modalBase">modalBase.</param>
        /// <param name="harmonicResponse">harmonicResponse.</param>
        /// <param name="mechanicalTimeIntegrationType">mechanicalTimeIntegrationType.</param>
        /// <param name="mechanicalResolutionType">mechanicalResolutionType.</param>
        /// <param name="mechanicalLineSearch">mechanicalLineSearch.</param>
        /// <param name="thermalTimeIntegrationType">thermalTimeIntegrationType.</param>
        /// <param name="thermalResolutionType">thermalResolutionType.</param>
        /// <param name="thermalLineSearch">thermalLineSearch.</param>
        public SolidNumerics(HarmonicSolutionMethodEnum? harmonicSolutionMethod = default(HarmonicSolutionMethodEnum?), OneOfSolidNumericsSolver solver = default(OneOfSolidNumericsSolver), Object solveModel = default(Object), OneOfSolidNumericsEigenSolver eigenSolver = default(OneOfSolidNumericsEigenSolver), CalculateFrequency calculateFrequency = default(CalculateFrequency), EigenModeVerification eigenMode = default(EigenModeVerification), bool? enhancedAccuracy = default(bool?), ModalSolver modalBase = default(ModalSolver), HarmonicResponse harmonicResponse = default(HarmonicResponse), OneOfSolidNumericsMechanicalTimeIntegrationType mechanicalTimeIntegrationType = default(OneOfSolidNumericsMechanicalTimeIntegrationType), OneOfSolidNumericsMechanicalResolutionType mechanicalResolutionType = default(OneOfSolidNumericsMechanicalResolutionType), OneOfSolidNumericsMechanicalLineSearch mechanicalLineSearch = default(OneOfSolidNumericsMechanicalLineSearch), ThetaMethodTimeIntegrationType thermalTimeIntegrationType = default(ThetaMethodTimeIntegrationType), OneOfSolidNumericsThermalResolutionType thermalResolutionType = default(OneOfSolidNumericsThermalResolutionType), OneOfSolidNumericsThermalLineSearch thermalLineSearch = default(OneOfSolidNumericsThermalLineSearch))
        {
            this.HarmonicSolutionMethod = harmonicSolutionMethod;
            this.Solver = solver;
            this.SolveModel = solveModel;
            this.EigenSolver = eigenSolver;
            this.CalculateFrequency = calculateFrequency;
            this.EigenMode = eigenMode;
            this.EnhancedAccuracy = enhancedAccuracy;
            this.ModalBase = modalBase;
            this.HarmonicResponse = harmonicResponse;
            this.MechanicalTimeIntegrationType = mechanicalTimeIntegrationType;
            this.MechanicalResolutionType = mechanicalResolutionType;
            this.MechanicalLineSearch = mechanicalLineSearch;
            this.ThermalTimeIntegrationType = thermalTimeIntegrationType;
            this.ThermalResolutionType = thermalResolutionType;
            this.ThermalLineSearch = thermalLineSearch;
        }
        
        /// <summary>
        /// Gets or Sets Solver
        /// </summary>
        [DataMember(Name="solver", EmitDefaultValue=false)]
        public OneOfSolidNumericsSolver Solver { get; set; }

        /// <summary>
        /// Gets or Sets SolveModel
        /// </summary>
        [DataMember(Name="solveModel", EmitDefaultValue=false)]
        public Object SolveModel { get; set; }

        /// <summary>
        /// Gets or Sets EigenSolver
        /// </summary>
        [DataMember(Name="eigenSolver", EmitDefaultValue=false)]
        public OneOfSolidNumericsEigenSolver EigenSolver { get; set; }

        /// <summary>
        /// Gets or Sets CalculateFrequency
        /// </summary>
        [DataMember(Name="calculateFrequency", EmitDefaultValue=false)]
        public CalculateFrequency CalculateFrequency { get; set; }

        /// <summary>
        /// Gets or Sets EigenMode
        /// </summary>
        [DataMember(Name="eigenMode", EmitDefaultValue=false)]
        public EigenModeVerification EigenMode { get; set; }

        /// <summary>
        /// Further increase the accuracy of the results by running two simulations. The results of the first one will be used as input for the second one to fine-tune the setup.
        /// </summary>
        /// <value>Further increase the accuracy of the results by running two simulations. The results of the first one will be used as input for the second one to fine-tune the setup.</value>
        [DataMember(Name="enhancedAccuracy", EmitDefaultValue=false)]
        public bool? EnhancedAccuracy { get; set; }

        /// <summary>
        /// Gets or Sets ModalBase
        /// </summary>
        [DataMember(Name="modalBase", EmitDefaultValue=false)]
        public ModalSolver ModalBase { get; set; }

        /// <summary>
        /// Gets or Sets HarmonicResponse
        /// </summary>
        [DataMember(Name="harmonicResponse", EmitDefaultValue=false)]
        public HarmonicResponse HarmonicResponse { get; set; }

        /// <summary>
        /// Gets or Sets MechanicalTimeIntegrationType
        /// </summary>
        [DataMember(Name="mechanicalTimeIntegrationType", EmitDefaultValue=false)]
        public OneOfSolidNumericsMechanicalTimeIntegrationType MechanicalTimeIntegrationType { get; set; }

        /// <summary>
        /// Gets or Sets MechanicalResolutionType
        /// </summary>
        [DataMember(Name="mechanicalResolutionType", EmitDefaultValue=false)]
        public OneOfSolidNumericsMechanicalResolutionType MechanicalResolutionType { get; set; }

        /// <summary>
        /// Gets or Sets MechanicalLineSearch
        /// </summary>
        [DataMember(Name="mechanicalLineSearch", EmitDefaultValue=false)]
        public OneOfSolidNumericsMechanicalLineSearch MechanicalLineSearch { get; set; }

        /// <summary>
        /// Gets or Sets ThermalTimeIntegrationType
        /// </summary>
        [DataMember(Name="thermalTimeIntegrationType", EmitDefaultValue=false)]
        public ThetaMethodTimeIntegrationType ThermalTimeIntegrationType { get; set; }

        /// <summary>
        /// Gets or Sets ThermalResolutionType
        /// </summary>
        [DataMember(Name="thermalResolutionType", EmitDefaultValue=false)]
        public OneOfSolidNumericsThermalResolutionType ThermalResolutionType { get; set; }

        /// <summary>
        /// Gets or Sets ThermalLineSearch
        /// </summary>
        [DataMember(Name="thermalLineSearch", EmitDefaultValue=false)]
        public OneOfSolidNumericsThermalLineSearch ThermalLineSearch { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SolidNumerics {\n");
            sb.Append("  HarmonicSolutionMethod: ").Append(HarmonicSolutionMethod).Append("\n");
            sb.Append("  Solver: ").Append(Solver).Append("\n");
            sb.Append("  SolveModel: ").Append(SolveModel).Append("\n");
            sb.Append("  EigenSolver: ").Append(EigenSolver).Append("\n");
            sb.Append("  CalculateFrequency: ").Append(CalculateFrequency).Append("\n");
            sb.Append("  EigenMode: ").Append(EigenMode).Append("\n");
            sb.Append("  EnhancedAccuracy: ").Append(EnhancedAccuracy).Append("\n");
            sb.Append("  ModalBase: ").Append(ModalBase).Append("\n");
            sb.Append("  HarmonicResponse: ").Append(HarmonicResponse).Append("\n");
            sb.Append("  MechanicalTimeIntegrationType: ").Append(MechanicalTimeIntegrationType).Append("\n");
            sb.Append("  MechanicalResolutionType: ").Append(MechanicalResolutionType).Append("\n");
            sb.Append("  MechanicalLineSearch: ").Append(MechanicalLineSearch).Append("\n");
            sb.Append("  ThermalTimeIntegrationType: ").Append(ThermalTimeIntegrationType).Append("\n");
            sb.Append("  ThermalResolutionType: ").Append(ThermalResolutionType).Append("\n");
            sb.Append("  ThermalLineSearch: ").Append(ThermalLineSearch).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SolidNumerics);
        }

        /// <summary>
        /// Returns true if SolidNumerics instances are equal
        /// </summary>
        /// <param name="input">Instance of SolidNumerics to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SolidNumerics input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.HarmonicSolutionMethod == input.HarmonicSolutionMethod ||
                    this.HarmonicSolutionMethod.Equals(input.HarmonicSolutionMethod)
                ) && 
                (
                    this.Solver == input.Solver ||
                    (this.Solver != null &&
                    this.Solver.Equals(input.Solver))
                ) && 
                (
                    this.SolveModel == input.SolveModel ||
                    (this.SolveModel != null &&
                    this.SolveModel.Equals(input.SolveModel))
                ) && 
                (
                    this.EigenSolver == input.EigenSolver ||
                    (this.EigenSolver != null &&
                    this.EigenSolver.Equals(input.EigenSolver))
                ) && 
                (
                    this.CalculateFrequency == input.CalculateFrequency ||
                    (this.CalculateFrequency != null &&
                    this.CalculateFrequency.Equals(input.CalculateFrequency))
                ) && 
                (
                    this.EigenMode == input.EigenMode ||
                    (this.EigenMode != null &&
                    this.EigenMode.Equals(input.EigenMode))
                ) && 
                (
                    this.EnhancedAccuracy == input.EnhancedAccuracy ||
                    (this.EnhancedAccuracy != null &&
                    this.EnhancedAccuracy.Equals(input.EnhancedAccuracy))
                ) && 
                (
                    this.ModalBase == input.ModalBase ||
                    (this.ModalBase != null &&
                    this.ModalBase.Equals(input.ModalBase))
                ) && 
                (
                    this.HarmonicResponse == input.HarmonicResponse ||
                    (this.HarmonicResponse != null &&
                    this.HarmonicResponse.Equals(input.HarmonicResponse))
                ) && 
                (
                    this.MechanicalTimeIntegrationType == input.MechanicalTimeIntegrationType ||
                    (this.MechanicalTimeIntegrationType != null &&
                    this.MechanicalTimeIntegrationType.Equals(input.MechanicalTimeIntegrationType))
                ) && 
                (
                    this.MechanicalResolutionType == input.MechanicalResolutionType ||
                    (this.MechanicalResolutionType != null &&
                    this.MechanicalResolutionType.Equals(input.MechanicalResolutionType))
                ) && 
                (
                    this.MechanicalLineSearch == input.MechanicalLineSearch ||
                    (this.MechanicalLineSearch != null &&
                    this.MechanicalLineSearch.Equals(input.MechanicalLineSearch))
                ) && 
                (
                    this.ThermalTimeIntegrationType == input.ThermalTimeIntegrationType ||
                    (this.ThermalTimeIntegrationType != null &&
                    this.ThermalTimeIntegrationType.Equals(input.ThermalTimeIntegrationType))
                ) && 
                (
                    this.ThermalResolutionType == input.ThermalResolutionType ||
                    (this.ThermalResolutionType != null &&
                    this.ThermalResolutionType.Equals(input.ThermalResolutionType))
                ) && 
                (
                    this.ThermalLineSearch == input.ThermalLineSearch ||
                    (this.ThermalLineSearch != null &&
                    this.ThermalLineSearch.Equals(input.ThermalLineSearch))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.HarmonicSolutionMethod.GetHashCode();
                if (this.Solver != null)
                    hashCode = hashCode * 59 + this.Solver.GetHashCode();
                if (this.SolveModel != null)
                    hashCode = hashCode * 59 + this.SolveModel.GetHashCode();
                if (this.EigenSolver != null)
                    hashCode = hashCode * 59 + this.EigenSolver.GetHashCode();
                if (this.CalculateFrequency != null)
                    hashCode = hashCode * 59 + this.CalculateFrequency.GetHashCode();
                if (this.EigenMode != null)
                    hashCode = hashCode * 59 + this.EigenMode.GetHashCode();
                if (this.EnhancedAccuracy != null)
                    hashCode = hashCode * 59 + this.EnhancedAccuracy.GetHashCode();
                if (this.ModalBase != null)
                    hashCode = hashCode * 59 + this.ModalBase.GetHashCode();
                if (this.HarmonicResponse != null)
                    hashCode = hashCode * 59 + this.HarmonicResponse.GetHashCode();
                if (this.MechanicalTimeIntegrationType != null)
                    hashCode = hashCode * 59 + this.MechanicalTimeIntegrationType.GetHashCode();
                if (this.MechanicalResolutionType != null)
                    hashCode = hashCode * 59 + this.MechanicalResolutionType.GetHashCode();
                if (this.MechanicalLineSearch != null)
                    hashCode = hashCode * 59 + this.MechanicalLineSearch.GetHashCode();
                if (this.ThermalTimeIntegrationType != null)
                    hashCode = hashCode * 59 + this.ThermalTimeIntegrationType.GetHashCode();
                if (this.ThermalResolutionType != null)
                    hashCode = hashCode * 59 + this.ThermalResolutionType.GetHashCode();
                if (this.ThermalLineSearch != null)
                    hashCode = hashCode * 59 + this.ThermalLineSearch.GetHashCode();
                return hashCode;
            }
        }

    }

}
