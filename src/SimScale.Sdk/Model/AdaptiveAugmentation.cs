/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// AdaptiveAugmentation
    /// </summary>
    [DataContract]
    public partial class AdaptiveAugmentation : IEquatable<AdaptiveAugmentation>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdaptiveAugmentation" /> class.
        /// </summary>
        /// <param name="fieldChangeTargetValue">&lt;p&gt;Define the percentage of additional Newton Iterations that should be allowed to be used if convergence is not reached after the maximum number of Newton Iterations is reached.&lt;/p&gt; (default to 0.01M).</param>
        public AdaptiveAugmentation(decimal? fieldChangeTargetValue = default(decimal?))
        {
            this.FieldChangeTargetValue = fieldChangeTargetValue;
        }
        
        /// <summary>
        /// &lt;p&gt;Define the percentage of additional Newton Iterations that should be allowed to be used if convergence is not reached after the maximum number of Newton Iterations is reached.&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;Define the percentage of additional Newton Iterations that should be allowed to be used if convergence is not reached after the maximum number of Newton Iterations is reached.&lt;/p&gt;</value>
        [DataMember(Name="fieldChangeTargetValue", EmitDefaultValue=false)]
        public decimal? FieldChangeTargetValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdaptiveAugmentation {\n");
            sb.Append("  FieldChangeTargetValue: ").Append(FieldChangeTargetValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdaptiveAugmentation);
        }

        /// <summary>
        /// Returns true if AdaptiveAugmentation instances are equal
        /// </summary>
        /// <param name="input">Instance of AdaptiveAugmentation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdaptiveAugmentation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FieldChangeTargetValue == input.FieldChangeTargetValue ||
                    (this.FieldChangeTargetValue != null &&
                    this.FieldChangeTargetValue.Equals(input.FieldChangeTargetValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FieldChangeTargetValue != null)
                    hashCode = hashCode * 59 + this.FieldChangeTargetValue.GetHashCode();
                return hashCode;
            }
        }

    }

}
