/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// ScalarSettings
    /// </summary>
    [DataContract]
    public partial class ScalarSettings : IEquatable<ScalarSettings>
    {
        /// <summary>
        /// The color scheme to use to map scalar values on the model and legend bar.
        /// </summary>
        /// <value>The color scheme to use to map scalar values on the model and legend bar.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ColorSchemeEnum
        {
            /// <summary>
            /// Enum NORMAL for value: NORMAL
            /// </summary>
            [EnumMember(Value = "NORMAL")]
            NORMAL = 1,

            /// <summary>
            /// Enum NORMALINVERTED for value: NORMAL_INVERTED
            /// </summary>
            [EnumMember(Value = "NORMAL_INVERTED")]
            NORMALINVERTED = 2,

            /// <summary>
            /// Enum BLACKTOWHITE for value: BLACK_TO_WHITE
            /// </summary>
            [EnumMember(Value = "BLACK_TO_WHITE")]
            BLACKTOWHITE = 3,

            /// <summary>
            /// Enum WHITETOBLACK for value: WHITE_TO_BLACK
            /// </summary>
            [EnumMember(Value = "WHITE_TO_BLACK")]
            WHITETOBLACK = 4,

            /// <summary>
            /// Enum GREENTOBROWN for value: GREEN_TO_BROWN
            /// </summary>
            [EnumMember(Value = "GREEN_TO_BROWN")]
            GREENTOBROWN = 5,

            /// <summary>
            /// Enum WHITETOBROWN for value: WHITE_TO_BROWN
            /// </summary>
            [EnumMember(Value = "WHITE_TO_BROWN")]
            WHITETOBROWN = 6,

            /// <summary>
            /// Enum METALCASTING for value: METAL_CASTING
            /// </summary>
            [EnumMember(Value = "METAL_CASTING")]
            METALCASTING = 7,

            /// <summary>
            /// Enum BLUETOWHITETORED for value: BLUE_TO_WHITE_TO_RED
            /// </summary>
            [EnumMember(Value = "BLUE_TO_WHITE_TO_RED")]
            BLUETOWHITETORED = 8,

            /// <summary>
            /// Enum THERMAL1 for value: THERMAL_1
            /// </summary>
            [EnumMember(Value = "THERMAL_1")]
            THERMAL1 = 9,

            /// <summary>
            /// Enum THERMAL2 for value: THERMAL_2
            /// </summary>
            [EnumMember(Value = "THERMAL_2")]
            THERMAL2 = 10,

            /// <summary>
            /// Enum THERMAL3 for value: THERMAL_3
            /// </summary>
            [EnumMember(Value = "THERMAL_3")]
            THERMAL3 = 11

        }

        /// <summary>
        /// The color scheme to use to map scalar values on the model and legend bar.
        /// </summary>
        /// <value>The color scheme to use to map scalar values on the model and legend bar.</value>
        [DataMember(Name="colorScheme", EmitDefaultValue=false)]
        public ColorSchemeEnum? ColorScheme { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScalarSettings" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ScalarSettings() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScalarSettings" /> class.
        /// </summary>
        /// <param name="scalarField">scalarField (required).</param>
        /// <param name="minimumRange">The minimum value for the color scheme to fill. Default is the minimum value of the scalar..</param>
        /// <param name="maximumRange">The maximum value for the color scheme to fill. Default is the maximum value of the scalar..</param>
        /// <param name="nodeAverageValue">Specify if the scalar result should be shown as a node averaged result or not. (default to false).</param>
        /// <param name="numberOfDivisions">The number of divisions in the legend. If set to 0, this will create a continuous (gradient) legend with a smooth interpolation between the colors. (default to 20).</param>
        /// <param name="colorScheme">The color scheme to use to map scalar values on the model and legend bar. (default to ColorSchemeEnum.NORMAL).</param>
        public ScalarSettings(ScalarField scalarField = default(ScalarField), float? minimumRange = default(float?), float? maximumRange = default(float?), bool? nodeAverageValue = default(bool?), int? numberOfDivisions = default(int?), ColorSchemeEnum? colorScheme = default(ColorSchemeEnum?))
        {
            // to ensure "scalarField" is required (not null)
            this.ScalarField = scalarField ?? throw new ArgumentNullException("scalarField is a required property for ScalarSettings and cannot be null");
            this.MinimumRange = minimumRange;
            this.MaximumRange = maximumRange;
            this.NodeAverageValue = nodeAverageValue;
            this.NumberOfDivisions = numberOfDivisions;
            this.ColorScheme = colorScheme;
        }
        
        /// <summary>
        /// Gets or Sets ScalarField
        /// </summary>
        [DataMember(Name="scalarField", EmitDefaultValue=false)]
        public ScalarField ScalarField { get; set; }

        /// <summary>
        /// The minimum value for the color scheme to fill. Default is the minimum value of the scalar.
        /// </summary>
        /// <value>The minimum value for the color scheme to fill. Default is the minimum value of the scalar.</value>
        [DataMember(Name="minimumRange", EmitDefaultValue=false)]
        public float? MinimumRange { get; set; }

        /// <summary>
        /// The maximum value for the color scheme to fill. Default is the maximum value of the scalar.
        /// </summary>
        /// <value>The maximum value for the color scheme to fill. Default is the maximum value of the scalar.</value>
        [DataMember(Name="maximumRange", EmitDefaultValue=false)]
        public float? MaximumRange { get; set; }

        /// <summary>
        /// Specify if the scalar result should be shown as a node averaged result or not.
        /// </summary>
        /// <value>Specify if the scalar result should be shown as a node averaged result or not.</value>
        [DataMember(Name="nodeAverageValue", EmitDefaultValue=false)]
        public bool? NodeAverageValue { get; set; }

        /// <summary>
        /// The number of divisions in the legend. If set to 0, this will create a continuous (gradient) legend with a smooth interpolation between the colors.
        /// </summary>
        /// <value>The number of divisions in the legend. If set to 0, this will create a continuous (gradient) legend with a smooth interpolation between the colors.</value>
        [DataMember(Name="numberOfDivisions", EmitDefaultValue=false)]
        public int? NumberOfDivisions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScalarSettings {\n");
            sb.Append("  ScalarField: ").Append(ScalarField).Append("\n");
            sb.Append("  MinimumRange: ").Append(MinimumRange).Append("\n");
            sb.Append("  MaximumRange: ").Append(MaximumRange).Append("\n");
            sb.Append("  NodeAverageValue: ").Append(NodeAverageValue).Append("\n");
            sb.Append("  NumberOfDivisions: ").Append(NumberOfDivisions).Append("\n");
            sb.Append("  ColorScheme: ").Append(ColorScheme).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScalarSettings);
        }

        /// <summary>
        /// Returns true if ScalarSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of ScalarSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScalarSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ScalarField == input.ScalarField ||
                    (this.ScalarField != null &&
                    this.ScalarField.Equals(input.ScalarField))
                ) && 
                (
                    this.MinimumRange == input.MinimumRange ||
                    (this.MinimumRange != null &&
                    this.MinimumRange.Equals(input.MinimumRange))
                ) && 
                (
                    this.MaximumRange == input.MaximumRange ||
                    (this.MaximumRange != null &&
                    this.MaximumRange.Equals(input.MaximumRange))
                ) && 
                (
                    this.NodeAverageValue == input.NodeAverageValue ||
                    (this.NodeAverageValue != null &&
                    this.NodeAverageValue.Equals(input.NodeAverageValue))
                ) && 
                (
                    this.NumberOfDivisions == input.NumberOfDivisions ||
                    (this.NumberOfDivisions != null &&
                    this.NumberOfDivisions.Equals(input.NumberOfDivisions))
                ) && 
                (
                    this.ColorScheme == input.ColorScheme ||
                    this.ColorScheme.Equals(input.ColorScheme)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ScalarField != null)
                    hashCode = hashCode * 59 + this.ScalarField.GetHashCode();
                if (this.MinimumRange != null)
                    hashCode = hashCode * 59 + this.MinimumRange.GetHashCode();
                if (this.MaximumRange != null)
                    hashCode = hashCode * 59 + this.MaximumRange.GetHashCode();
                if (this.NodeAverageValue != null)
                    hashCode = hashCode * 59 + this.NodeAverageValue.GetHashCode();
                if (this.NumberOfDivisions != null)
                    hashCode = hashCode * 59 + this.NumberOfDivisions.GetHashCode();
                hashCode = hashCode * 59 + this.ColorScheme.GetHashCode();
                return hashCode;
            }
        }

    }

}
