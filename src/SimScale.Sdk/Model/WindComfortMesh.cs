/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// WindComfortMesh
    /// </summary>
    [DataContract]
    public partial class WindComfortMesh : IEquatable<WindComfortMesh>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WindComfortMesh" /> class.
        /// </summary>
        /// <param name="windComfortFineness">windComfortFineness.</param>
        /// <param name="progressiveRefinement">progressiveRefinement.</param>
        /// <param name="reynoldsScalingType">reynoldsScalingType.</param>
        /// <param name="refinements">refinements.</param>
        public WindComfortMesh(OneOfWindComfortMeshWindComfortFineness windComfortFineness = default(OneOfWindComfortMeshWindComfortFineness), ProgressiveRefinement progressiveRefinement = default(ProgressiveRefinement), OneOfWindComfortMeshReynoldsScalingType reynoldsScalingType = default(OneOfWindComfortMeshReynoldsScalingType), List<OneOfWindComfortMeshRefinements> refinements = default(List<OneOfWindComfortMeshRefinements>))
        {
            this.WindComfortFineness = windComfortFineness;
            this.ProgressiveRefinement = progressiveRefinement;
            this.ReynoldsScalingType = reynoldsScalingType;
            this.Refinements = refinements;
        }
        
        /// <summary>
        /// Gets or Sets WindComfortFineness
        /// </summary>
        [DataMember(Name="windComfortFineness", EmitDefaultValue=false)]
        public OneOfWindComfortMeshWindComfortFineness WindComfortFineness { get; set; }

        /// <summary>
        /// Gets or Sets ProgressiveRefinement
        /// </summary>
        [DataMember(Name="progressiveRefinement", EmitDefaultValue=false)]
        public ProgressiveRefinement ProgressiveRefinement { get; set; }

        /// <summary>
        /// Gets or Sets ReynoldsScalingType
        /// </summary>
        [DataMember(Name="reynoldsScalingType", EmitDefaultValue=false)]
        public OneOfWindComfortMeshReynoldsScalingType ReynoldsScalingType { get; set; }

        /// <summary>
        /// Gets or Sets Refinements
        /// </summary>
        [DataMember(Name="refinements", EmitDefaultValue=false)]
        public List<OneOfWindComfortMeshRefinements> Refinements { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WindComfortMesh {\n");
            sb.Append("  WindComfortFineness: ").Append(WindComfortFineness).Append("\n");
            sb.Append("  ProgressiveRefinement: ").Append(ProgressiveRefinement).Append("\n");
            sb.Append("  ReynoldsScalingType: ").Append(ReynoldsScalingType).Append("\n");
            sb.Append("  Refinements: ").Append(Refinements).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WindComfortMesh);
        }

        /// <summary>
        /// Returns true if WindComfortMesh instances are equal
        /// </summary>
        /// <param name="input">Instance of WindComfortMesh to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WindComfortMesh input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.WindComfortFineness == input.WindComfortFineness ||
                    (this.WindComfortFineness != null &&
                    this.WindComfortFineness.Equals(input.WindComfortFineness))
                ) && 
                (
                    this.ProgressiveRefinement == input.ProgressiveRefinement ||
                    (this.ProgressiveRefinement != null &&
                    this.ProgressiveRefinement.Equals(input.ProgressiveRefinement))
                ) && 
                (
                    this.ReynoldsScalingType == input.ReynoldsScalingType ||
                    (this.ReynoldsScalingType != null &&
                    this.ReynoldsScalingType.Equals(input.ReynoldsScalingType))
                ) && 
                (
                    this.Refinements == input.Refinements ||
                    this.Refinements != null &&
                    input.Refinements != null &&
                    this.Refinements.SequenceEqual(input.Refinements)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.WindComfortFineness != null)
                    hashCode = hashCode * 59 + this.WindComfortFineness.GetHashCode();
                if (this.ProgressiveRefinement != null)
                    hashCode = hashCode * 59 + this.ProgressiveRefinement.GetHashCode();
                if (this.ReynoldsScalingType != null)
                    hashCode = hashCode * 59 + this.ReynoldsScalingType.GetHashCode();
                if (this.Refinements != null)
                    hashCode = hashCode * 59 + this.Refinements.GetHashCode();
                return hashCode;
            }
        }

    }

}
