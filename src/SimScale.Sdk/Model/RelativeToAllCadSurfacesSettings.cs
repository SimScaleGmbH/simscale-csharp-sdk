/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// RelativeToAllCadSurfacesSettings
    /// </summary>
    [DataContract]
    public partial class RelativeToAllCadSurfacesSettings : OneOfManualSimericsMeshSettingsCellSizeSpecification, IEquatable<RelativeToAllCadSurfacesSettings>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RelativeToAllCadSurfacesSettings" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RelativeToAllCadSurfacesSettings() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RelativeToAllCadSurfacesSettings" /> class.
        /// </summary>
        /// <param name="type">Schema name: RelativeToAllCadSurfacesSettings (required) (default to &quot;RELATIVE_TO_ALL_CAD_SURFACES&quot;).</param>
        /// <param name="minimumCellSize">&lt;p&gt;This parameter specifies the &lt;b&gt;minimum size for all cells&lt;/b&gt; of the mesh relative to the diagonal of the CAD model. A higher value leads to a coarser mesh. Our recommendation is to start with the default value and if necessary, gradually lower the parameter until a desired mesh fineness is obtained.&lt;/p&gt; (default to 0.00070M).</param>
        /// <param name="maximumCellSize">&lt;p&gt;This parameter specifies the &lt;b&gt;maximum size for all cells&lt;/b&gt; of the mesh relative to the diagonal of the CAD model. A lower value leads to a finer mesh. Our recommendation is to start with the default value and if necessary, gradually lower the parameter until a desired mesh fineness is obtained.&lt;/p&gt; (default to 0.02M).</param>
        /// <param name="cellSizeOnSurfaces">&lt;p&gt;This parameter specifies the &lt;b&gt;size of cells close to the surfaces&lt;/b&gt; relative to the diagonal of the CAD model. A higher value leads to a coarser mesh. Our recommendation is to start with the default value and if necessary, gradually lower the parameter until a desired mesh fineness is obtained.&lt;/p&gt; (default to 0.01M).</param>
        public RelativeToAllCadSurfacesSettings(string type = "RELATIVE_TO_ALL_CAD_SURFACES", decimal? minimumCellSize = default(decimal?), decimal? maximumCellSize = default(decimal?), decimal? cellSizeOnSurfaces = default(decimal?))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for RelativeToAllCadSurfacesSettings and cannot be null");
            this.MinimumCellSize = minimumCellSize;
            this.MaximumCellSize = maximumCellSize;
            this.CellSizeOnSurfaces = cellSizeOnSurfaces;
        }
        
        /// <summary>
        /// Schema name: RelativeToAllCadSurfacesSettings
        /// </summary>
        /// <value>Schema name: RelativeToAllCadSurfacesSettings</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// &lt;p&gt;This parameter specifies the &lt;b&gt;minimum size for all cells&lt;/b&gt; of the mesh relative to the diagonal of the CAD model. A higher value leads to a coarser mesh. Our recommendation is to start with the default value and if necessary, gradually lower the parameter until a desired mesh fineness is obtained.&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;This parameter specifies the &lt;b&gt;minimum size for all cells&lt;/b&gt; of the mesh relative to the diagonal of the CAD model. A higher value leads to a coarser mesh. Our recommendation is to start with the default value and if necessary, gradually lower the parameter until a desired mesh fineness is obtained.&lt;/p&gt;</value>
        [DataMember(Name="minimumCellSize", EmitDefaultValue=false)]
        public decimal? MinimumCellSize { get; set; }

        /// <summary>
        /// &lt;p&gt;This parameter specifies the &lt;b&gt;maximum size for all cells&lt;/b&gt; of the mesh relative to the diagonal of the CAD model. A lower value leads to a finer mesh. Our recommendation is to start with the default value and if necessary, gradually lower the parameter until a desired mesh fineness is obtained.&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;This parameter specifies the &lt;b&gt;maximum size for all cells&lt;/b&gt; of the mesh relative to the diagonal of the CAD model. A lower value leads to a finer mesh. Our recommendation is to start with the default value and if necessary, gradually lower the parameter until a desired mesh fineness is obtained.&lt;/p&gt;</value>
        [DataMember(Name="maximumCellSize", EmitDefaultValue=false)]
        public decimal? MaximumCellSize { get; set; }

        /// <summary>
        /// &lt;p&gt;This parameter specifies the &lt;b&gt;size of cells close to the surfaces&lt;/b&gt; relative to the diagonal of the CAD model. A higher value leads to a coarser mesh. Our recommendation is to start with the default value and if necessary, gradually lower the parameter until a desired mesh fineness is obtained.&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;This parameter specifies the &lt;b&gt;size of cells close to the surfaces&lt;/b&gt; relative to the diagonal of the CAD model. A higher value leads to a coarser mesh. Our recommendation is to start with the default value and if necessary, gradually lower the parameter until a desired mesh fineness is obtained.&lt;/p&gt;</value>
        [DataMember(Name="cellSizeOnSurfaces", EmitDefaultValue=false)]
        public decimal? CellSizeOnSurfaces { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RelativeToAllCadSurfacesSettings {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  MinimumCellSize: ").Append(MinimumCellSize).Append("\n");
            sb.Append("  MaximumCellSize: ").Append(MaximumCellSize).Append("\n");
            sb.Append("  CellSizeOnSurfaces: ").Append(CellSizeOnSurfaces).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RelativeToAllCadSurfacesSettings);
        }

        /// <summary>
        /// Returns true if RelativeToAllCadSurfacesSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of RelativeToAllCadSurfacesSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RelativeToAllCadSurfacesSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.MinimumCellSize == input.MinimumCellSize ||
                    (this.MinimumCellSize != null &&
                    this.MinimumCellSize.Equals(input.MinimumCellSize))
                ) && 
                (
                    this.MaximumCellSize == input.MaximumCellSize ||
                    (this.MaximumCellSize != null &&
                    this.MaximumCellSize.Equals(input.MaximumCellSize))
                ) && 
                (
                    this.CellSizeOnSurfaces == input.CellSizeOnSurfaces ||
                    (this.CellSizeOnSurfaces != null &&
                    this.CellSizeOnSurfaces.Equals(input.CellSizeOnSurfaces))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.MinimumCellSize != null)
                    hashCode = hashCode * 59 + this.MinimumCellSize.GetHashCode();
                if (this.MaximumCellSize != null)
                    hashCode = hashCode * 59 + this.MaximumCellSize.GetHashCode();
                if (this.CellSizeOnSurfaces != null)
                    hashCode = hashCode * 59 + this.CellSizeOnSurfaces.GetHashCode();
                return hashCode;
            }
        }

    }

}
