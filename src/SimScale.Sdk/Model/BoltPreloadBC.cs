/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// &lt;b&gt;Bolt preload&lt;/b&gt; boundary condition helps to model pre-stressed bolts in a CAD geometry for structural analysis. Enter a preload &lt;i&gt;force&lt;/i&gt; to be assigned to cylindrical faces representing the shank of the bolt. &lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;ul&gt;&lt;li&gt;These faces should be continuous and not be assigned to contact definitions.&lt;/li&gt;&lt;li&gt;Each bolt gets only one load, if multiple faces for the same bolt are assigned, they get ignored.&lt;/li&gt;&lt;/ul&gt; &lt;img src&#x3D;\&quot;/spec/resources/help/imgs/bolt_preload_help_text.png\&quot; class&#x3D;\&quot;helpPopupImage\&quot;/&gt; &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/boundary-conditions/bolt-preload/&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.
    /// </summary>
    [DataContract]
    public partial class BoltPreloadBC : OneOfDynamicAnalysisBoundaryConditions, OneOfFrequencyAnalysisBoundaryConditions, OneOfHarmonicAnalysisBoundaryConditions, OneOfStaticAnalysisBoundaryConditions, OneOfThermalMechanicalBoundaryConditions, IEquatable<BoltPreloadBC>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BoltPreloadBC" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BoltPreloadBC() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BoltPreloadBC" /> class.
        /// </summary>
        /// <param name="type">type (required) (default to &quot;BOLT_PRELOAD&quot;).</param>
        /// <param name="name">name.</param>
        /// <param name="preload">preload.</param>
        /// <param name="topologicalReference">topologicalReference.</param>
        public BoltPreloadBC(string type = "BOLT_PRELOAD", string name = default(string), ForcePreload preload = default(ForcePreload), TopologicalReference topologicalReference = default(TopologicalReference))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for BoltPreloadBC and cannot be null");
            this.Name = name;
            this.Preload = preload;
            this.TopologicalReference = topologicalReference;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Preload
        /// </summary>
        [DataMember(Name="preload", EmitDefaultValue=false)]
        public ForcePreload Preload { get; set; }

        /// <summary>
        /// Gets or Sets TopologicalReference
        /// </summary>
        [DataMember(Name="topologicalReference", EmitDefaultValue=false)]
        public TopologicalReference TopologicalReference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BoltPreloadBC {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Preload: ").Append(Preload).Append("\n");
            sb.Append("  TopologicalReference: ").Append(TopologicalReference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BoltPreloadBC);
        }

        /// <summary>
        /// Returns true if BoltPreloadBC instances are equal
        /// </summary>
        /// <param name="input">Instance of BoltPreloadBC to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BoltPreloadBC input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Preload == input.Preload ||
                    (this.Preload != null &&
                    this.Preload.Equals(input.Preload))
                ) && 
                (
                    this.TopologicalReference == input.TopologicalReference ||
                    (this.TopologicalReference != null &&
                    this.TopologicalReference.Equals(input.TopologicalReference))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Preload != null)
                    hashCode = hashCode * 59 + this.Preload.GetHashCode();
                if (this.TopologicalReference != null)
                    hashCode = hashCode * 59 + this.TopologicalReference.GetHashCode();
                return hashCode;
            }
        }

    }

}
