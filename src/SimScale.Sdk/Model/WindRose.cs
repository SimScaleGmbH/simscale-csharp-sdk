/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// WindRose
    /// </summary>
    [DataContract]
    public partial class WindRose : IEquatable<WindRose>
    {
        /// <summary>
        /// Defines ExposureCategories
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ExposureCategoriesEnum
        {
            /// <summary>
            /// Enum EC1 for value: EC1
            /// </summary>
            [EnumMember(Value = "EC1")]
            EC1 = 1,

            /// <summary>
            /// Enum EC2 for value: EC2
            /// </summary>
            [EnumMember(Value = "EC2")]
            EC2 = 2,

            /// <summary>
            /// Enum EC3 for value: EC3
            /// </summary>
            [EnumMember(Value = "EC3")]
            EC3 = 3,

            /// <summary>
            /// Enum EC4 for value: EC4
            /// </summary>
            [EnumMember(Value = "EC4")]
            EC4 = 4,

            /// <summary>
            /// Enum EC5 for value: EC5
            /// </summary>
            [EnumMember(Value = "EC5")]
            EC5 = 5,

            /// <summary>
            /// Enum EC6 for value: EC6
            /// </summary>
            [EnumMember(Value = "EC6")]
            EC6 = 6

        }


        /// <summary>
        /// Gets or Sets ExposureCategories
        /// </summary>
        [DataMember(Name="exposureCategories", EmitDefaultValue=false)]
        public List<ExposureCategoriesEnum> ExposureCategories { get; set; }
        /// <summary>
        /// Defines WindEngineeringStandard
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WindEngineeringStandardEnum
        {
            /// <summary>
            /// Enum EU for value: EU
            /// </summary>
            [EnumMember(Value = "EU")]
            EU = 1,

            /// <summary>
            /// Enum ASNZS for value: AS_NZS
            /// </summary>
            [EnumMember(Value = "AS_NZS")]
            ASNZS = 2,

            /// <summary>
            /// Enum NEN8100 for value: NEN8100
            /// </summary>
            [EnumMember(Value = "NEN8100")]
            NEN8100 = 3,

            /// <summary>
            /// Enum LONDON for value: LONDON
            /// </summary>
            [EnumMember(Value = "LONDON")]
            LONDON = 4

        }

        /// <summary>
        /// Gets or Sets WindEngineeringStandard
        /// </summary>
        [DataMember(Name="windEngineeringStandard", EmitDefaultValue=false)]
        public WindEngineeringStandardEnum? WindEngineeringStandard { get; set; }
        /// <summary>
        /// Defines WindDataSource
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WindDataSourceEnum
        {
            /// <summary>
            /// Enum METEOBLUE for value: METEOBLUE
            /// </summary>
            [EnumMember(Value = "METEOBLUE")]
            METEOBLUE = 1,

            /// <summary>
            /// Enum USERUPLOAD for value: USER_UPLOAD
            /// </summary>
            [EnumMember(Value = "USER_UPLOAD")]
            USERUPLOAD = 2

        }

        /// <summary>
        /// Gets or Sets WindDataSource
        /// </summary>
        [DataMember(Name="windDataSource", EmitDefaultValue=false)]
        public WindDataSourceEnum? WindDataSource { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WindRose" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WindRose() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WindRose" /> class.
        /// </summary>
        /// <param name="numDirections">numDirections (default to 16).</param>
        /// <param name="velocityBuckets">velocityBuckets.</param>
        /// <param name="velocityUnit">velocityUnit (required) (default to &quot;m/s&quot;).</param>
        /// <param name="exposureCategories">exposureCategories.</param>
        /// <param name="windEngineeringStandard">windEngineeringStandard (default to WindEngineeringStandardEnum.EU).</param>
        /// <param name="windDataSource">windDataSource.</param>
        /// <param name="addSurfaceRoughness">addSurfaceRoughness (default to true).</param>
        public WindRose(int? numDirections = default(int?), List<WindRoseVelocityBucket> velocityBuckets = default(List<WindRoseVelocityBucket>), string velocityUnit = "m/s", List<ExposureCategoriesEnum> exposureCategories = default(List<ExposureCategoriesEnum>), WindEngineeringStandardEnum? windEngineeringStandard = default(WindEngineeringStandardEnum?), WindDataSourceEnum? windDataSource = default(WindDataSourceEnum?), bool? addSurfaceRoughness = default(bool?))
        {
            // to ensure "velocityUnit" is required (not null)
            this.VelocityUnit = velocityUnit ?? throw new ArgumentNullException("velocityUnit is a required property for WindRose and cannot be null");
            this.NumDirections = numDirections;
            this.VelocityBuckets = velocityBuckets;
            this.ExposureCategories = exposureCategories;
            this.WindEngineeringStandard = windEngineeringStandard;
            this.WindDataSource = windDataSource;
            this.AddSurfaceRoughness = addSurfaceRoughness;
        }
        
        /// <summary>
        /// Gets or Sets NumDirections
        /// </summary>
        [DataMember(Name="numDirections", EmitDefaultValue=false)]
        public int? NumDirections { get; set; }

        /// <summary>
        /// Gets or Sets VelocityBuckets
        /// </summary>
        [DataMember(Name="velocityBuckets", EmitDefaultValue=false)]
        public List<WindRoseVelocityBucket> VelocityBuckets { get; set; }

        /// <summary>
        /// Gets or Sets VelocityUnit
        /// </summary>
        [DataMember(Name="velocityUnit", EmitDefaultValue=false)]
        public string VelocityUnit { get; set; }

        /// <summary>
        /// Gets or Sets AddSurfaceRoughness
        /// </summary>
        [DataMember(Name="addSurfaceRoughness", EmitDefaultValue=false)]
        public bool? AddSurfaceRoughness { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WindRose {\n");
            sb.Append("  NumDirections: ").Append(NumDirections).Append("\n");
            sb.Append("  VelocityBuckets: ").Append(VelocityBuckets).Append("\n");
            sb.Append("  VelocityUnit: ").Append(VelocityUnit).Append("\n");
            sb.Append("  ExposureCategories: ").Append(ExposureCategories).Append("\n");
            sb.Append("  WindEngineeringStandard: ").Append(WindEngineeringStandard).Append("\n");
            sb.Append("  WindDataSource: ").Append(WindDataSource).Append("\n");
            sb.Append("  AddSurfaceRoughness: ").Append(AddSurfaceRoughness).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WindRose);
        }

        /// <summary>
        /// Returns true if WindRose instances are equal
        /// </summary>
        /// <param name="input">Instance of WindRose to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WindRose input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NumDirections == input.NumDirections ||
                    (this.NumDirections != null &&
                    this.NumDirections.Equals(input.NumDirections))
                ) && 
                (
                    this.VelocityBuckets == input.VelocityBuckets ||
                    this.VelocityBuckets != null &&
                    input.VelocityBuckets != null &&
                    this.VelocityBuckets.SequenceEqual(input.VelocityBuckets)
                ) && 
                (
                    this.VelocityUnit == input.VelocityUnit ||
                    (this.VelocityUnit != null &&
                    this.VelocityUnit.Equals(input.VelocityUnit))
                ) && 
                (
                    this.ExposureCategories == input.ExposureCategories ||
                    this.ExposureCategories.SequenceEqual(input.ExposureCategories)
                ) && 
                (
                    this.WindEngineeringStandard == input.WindEngineeringStandard ||
                    this.WindEngineeringStandard.Equals(input.WindEngineeringStandard)
                ) && 
                (
                    this.WindDataSource == input.WindDataSource ||
                    this.WindDataSource.Equals(input.WindDataSource)
                ) && 
                (
                    this.AddSurfaceRoughness == input.AddSurfaceRoughness ||
                    (this.AddSurfaceRoughness != null &&
                    this.AddSurfaceRoughness.Equals(input.AddSurfaceRoughness))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NumDirections != null)
                    hashCode = hashCode * 59 + this.NumDirections.GetHashCode();
                if (this.VelocityBuckets != null)
                    hashCode = hashCode * 59 + this.VelocityBuckets.GetHashCode();
                if (this.VelocityUnit != null)
                    hashCode = hashCode * 59 + this.VelocityUnit.GetHashCode();
                hashCode = hashCode * 59 + this.ExposureCategories.GetHashCode();
                hashCode = hashCode * 59 + this.WindEngineeringStandard.GetHashCode();
                hashCode = hashCode * 59 + this.WindDataSource.GetHashCode();
                if (this.AddSurfaceRoughness != null)
                    hashCode = hashCode * 59 + this.AddSurfaceRoughness.GetHashCode();
                return hashCode;
            }
        }

    }

}
