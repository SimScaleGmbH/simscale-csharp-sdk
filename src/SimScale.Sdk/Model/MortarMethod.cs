/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// MortarMethod
    /// </summary>
    [DataContract]
    public partial class MortarMethod : OneOfFrictionlessContactContactSolutionMethod, IEquatable<MortarMethod>
    {
        /// <summary>
        /// Use updated Jacobian if the contact area is undergoing large deformations.
        /// </summary>
        /// <value>Use updated Jacobian if the contact area is undergoing large deformations.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MortarJacobianTypeEnum
        {
            /// <summary>
            /// Enum INITIAL for value: INITIAL
            /// </summary>
            [EnumMember(Value = "INITIAL")]
            INITIAL = 1,

            /// <summary>
            /// Enum UPDATED for value: UPDATED
            /// </summary>
            [EnumMember(Value = "UPDATED")]
            UPDATED = 2

        }

        /// <summary>
        /// Use updated Jacobian if the contact area is undergoing large deformations.
        /// </summary>
        /// <value>Use updated Jacobian if the contact area is undergoing large deformations.</value>
        [DataMember(Name="mortarJacobianType", EmitDefaultValue=false)]
        public MortarJacobianTypeEnum? MortarJacobianType { get; set; }
        /// <summary>
        /// Using the fast pairing can lead to false pairings, whereas the robust algorithm is much slower.
        /// </summary>
        /// <value>Using the fast pairing can lead to false pairings, whereas the robust algorithm is much slower.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MortarPairingTypeEnum
        {
            /// <summary>
            /// Enum FAST for value: FAST
            /// </summary>
            [EnumMember(Value = "FAST")]
            FAST = 1,

            /// <summary>
            /// Enum ROBUST for value: ROBUST
            /// </summary>
            [EnumMember(Value = "ROBUST")]
            ROBUST = 2

        }

        /// <summary>
        /// Using the fast pairing can lead to false pairings, whereas the robust algorithm is much slower.
        /// </summary>
        /// <value>Using the fast pairing can lead to false pairings, whereas the robust algorithm is much slower.</value>
        [DataMember(Name="mortarPairingType", EmitDefaultValue=false)]
        public MortarPairingTypeEnum? MortarPairingType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MortarMethod" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MortarMethod() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MortarMethod" /> class.
        /// </summary>
        /// <param name="type">Schema name: MortarMethod (required) (default to &quot;MORTAR_METHOD&quot;).</param>
        /// <param name="mortarJacobianType">Use updated Jacobian if the contact area is undergoing large deformations. (default to MortarJacobianTypeEnum.INITIAL).</param>
        /// <param name="mortarPairingType">Using the fast pairing can lead to false pairings, whereas the robust algorithm is much slower. (default to MortarPairingTypeEnum.FAST).</param>
        /// <param name="mortarPairingTolerance">Accuracy of the pairing, the default value is suitable for most cases. (default to 1.0E-8M).</param>
        public MortarMethod(string type = "MORTAR_METHOD", MortarJacobianTypeEnum? mortarJacobianType = default(MortarJacobianTypeEnum?), MortarPairingTypeEnum? mortarPairingType = default(MortarPairingTypeEnum?), decimal? mortarPairingTolerance = default(decimal?))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for MortarMethod and cannot be null");
            this.MortarJacobianType = mortarJacobianType;
            this.MortarPairingType = mortarPairingType;
            this.MortarPairingTolerance = mortarPairingTolerance;
        }
        
        /// <summary>
        /// Schema name: MortarMethod
        /// </summary>
        /// <value>Schema name: MortarMethod</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Accuracy of the pairing, the default value is suitable for most cases.
        /// </summary>
        /// <value>Accuracy of the pairing, the default value is suitable for most cases.</value>
        [DataMember(Name="mortarPairingTolerance", EmitDefaultValue=false)]
        public decimal? MortarPairingTolerance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MortarMethod {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  MortarJacobianType: ").Append(MortarJacobianType).Append("\n");
            sb.Append("  MortarPairingType: ").Append(MortarPairingType).Append("\n");
            sb.Append("  MortarPairingTolerance: ").Append(MortarPairingTolerance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MortarMethod);
        }

        /// <summary>
        /// Returns true if MortarMethod instances are equal
        /// </summary>
        /// <param name="input">Instance of MortarMethod to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MortarMethod input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.MortarJacobianType == input.MortarJacobianType ||
                    this.MortarJacobianType.Equals(input.MortarJacobianType)
                ) && 
                (
                    this.MortarPairingType == input.MortarPairingType ||
                    this.MortarPairingType.Equals(input.MortarPairingType)
                ) && 
                (
                    this.MortarPairingTolerance == input.MortarPairingTolerance ||
                    (this.MortarPairingTolerance != null &&
                    this.MortarPairingTolerance.Equals(input.MortarPairingTolerance))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                hashCode = hashCode * 59 + this.MortarJacobianType.GetHashCode();
                hashCode = hashCode * 59 + this.MortarPairingType.GetHashCode();
                if (this.MortarPairingTolerance != null)
                    hashCode = hashCode * 59 + this.MortarPairingTolerance.GetHashCode();
                return hashCode;
            }
        }

    }

}
