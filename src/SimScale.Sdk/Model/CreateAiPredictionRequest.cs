/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// CreateAiPredictionRequest
    /// </summary>
    [DataContract]
    public partial class CreateAiPredictionRequest : IEquatable<CreateAiPredictionRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAiPredictionRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateAiPredictionRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAiPredictionRequest" /> class.
        /// </summary>
        /// <param name="aiModelId">aiModelId (required).</param>
        /// <param name="projectId">projectId (required).</param>
        /// <param name="simulationId">simulationId (required).</param>
        public CreateAiPredictionRequest(Guid? aiModelId = default(Guid?), string projectId = default(string), Guid? simulationId = default(Guid?))
        {
            // to ensure "aiModelId" is required (not null)
            this.AiModelId = aiModelId ?? throw new ArgumentNullException("aiModelId is a required property for CreateAiPredictionRequest and cannot be null");
            // to ensure "projectId" is required (not null)
            this.ProjectId = projectId ?? throw new ArgumentNullException("projectId is a required property for CreateAiPredictionRequest and cannot be null");
            // to ensure "simulationId" is required (not null)
            this.SimulationId = simulationId ?? throw new ArgumentNullException("simulationId is a required property for CreateAiPredictionRequest and cannot be null");
        }
        
        /// <summary>
        /// Gets or Sets AiModelId
        /// </summary>
        [DataMember(Name="aiModelId", EmitDefaultValue=false)]
        public Guid? AiModelId { get; set; }

        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        [DataMember(Name="projectId", EmitDefaultValue=false)]
        public string ProjectId { get; set; }

        /// <summary>
        /// Gets or Sets SimulationId
        /// </summary>
        [DataMember(Name="simulationId", EmitDefaultValue=false)]
        public Guid? SimulationId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateAiPredictionRequest {\n");
            sb.Append("  AiModelId: ").Append(AiModelId).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  SimulationId: ").Append(SimulationId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateAiPredictionRequest);
        }

        /// <summary>
        /// Returns true if CreateAiPredictionRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateAiPredictionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateAiPredictionRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AiModelId == input.AiModelId ||
                    (this.AiModelId != null &&
                    this.AiModelId.Equals(input.AiModelId))
                ) && 
                (
                    this.ProjectId == input.ProjectId ||
                    (this.ProjectId != null &&
                    this.ProjectId.Equals(input.ProjectId))
                ) && 
                (
                    this.SimulationId == input.SimulationId ||
                    (this.SimulationId != null &&
                    this.SimulationId.Equals(input.SimulationId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AiModelId != null)
                    hashCode = hashCode * 59 + this.AiModelId.GetHashCode();
                if (this.ProjectId != null)
                    hashCode = hashCode * 59 + this.ProjectId.GetHashCode();
                if (this.SimulationId != null)
                    hashCode = hashCode * 59 + this.SimulationId.GetHashCode();
                return hashCode;
            }
        }

    }

}
