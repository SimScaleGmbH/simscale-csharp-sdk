/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// GAMGSolver
    /// </summary>
    [DataContract]
    public partial class GAMGSolver : OneOfFluidSolversDensityFinalSolver, OneOfFluidSolversDensitySolver, OneOfFluidSolversPressureFinalSolver, OneOfFluidSolversPressureRghFinalSolver, OneOfFluidSolversPressureRghSolver, OneOfFluidSolversPressureSolver, OneOfFluidSolversSolidEnthalpyFinalSolver, OneOfFluidSolversSolidEnthalpySolver, OneOfFluidSolversVoltageSolver, OneOfPCGSolverPreconditioner, IEquatable<GAMGSolver>
    {
        /// <summary>
        /// &lt;p&gt;Choose a smoother for your solver.&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;Choose a smoother for your solver.&lt;/p&gt;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SmootherEnum
        {
            /// <summary>
            /// Enum GAUSSSEIDEL for value: GAUSSSEIDEL
            /// </summary>
            [EnumMember(Value = "GAUSSSEIDEL")]
            GAUSSSEIDEL = 1,

            /// <summary>
            /// Enum DIC for value: DIC
            /// </summary>
            [EnumMember(Value = "DIC")]
            DIC = 2

        }

        /// <summary>
        /// &lt;p&gt;Choose a smoother for your solver.&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;Choose a smoother for your solver.&lt;/p&gt;</value>
        [DataMember(Name="smoother", EmitDefaultValue=false)]
        public SmootherEnum? Smoother { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GAMGSolver" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GAMGSolver() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GAMGSolver" /> class.
        /// </summary>
        /// <param name="type">Schema name: GAMGSolver (required) (default to &quot;GAMG&quot;).</param>
        /// <param name="absoluteTolerance">&lt;p&gt;Define the absolute tolerance for the residual. The convergence process will be stopped as soon as the residual falls below the absolute tolerance.&lt;/p&gt;.</param>
        /// <param name="relativeTolerance">&lt;p&gt;Choose the relative tolerance for the residual. The convergence process will be stopped as soon as the ratio of current to initial residual falls below the relative tolerance.&lt;/p&gt;.</param>
        /// <param name="smoother">&lt;p&gt;Choose a smoother for your solver.&lt;/p&gt;.</param>
        /// <param name="numPreSweeps">numPreSweeps.</param>
        /// <param name="numPostSweeps">numPostSweeps (default to 1).</param>
        /// <param name="cacheAgglomerationOn">cacheAgglomerationOn (default to true).</param>
        /// <param name="numCellsCoarsestLevel">numCellsCoarsestLevel (default to 100).</param>
        /// <param name="numMergeLevels">numMergeLevels (default to 1).</param>
        public GAMGSolver(string type = "GAMG", decimal? absoluteTolerance = default(decimal?), decimal? relativeTolerance = default(decimal?), SmootherEnum? smoother = default(SmootherEnum?), int? numPreSweeps = default(int?), int? numPostSweeps = default(int?), bool? cacheAgglomerationOn = default(bool?), int? numCellsCoarsestLevel = default(int?), int? numMergeLevels = default(int?))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for GAMGSolver and cannot be null");
            this.AbsoluteTolerance = absoluteTolerance;
            this.RelativeTolerance = relativeTolerance;
            this.Smoother = smoother;
            this.NumPreSweeps = numPreSweeps;
            this.NumPostSweeps = numPostSweeps;
            this.CacheAgglomerationOn = cacheAgglomerationOn;
            this.NumCellsCoarsestLevel = numCellsCoarsestLevel;
            this.NumMergeLevels = numMergeLevels;
        }
        
        /// <summary>
        /// Schema name: GAMGSolver
        /// </summary>
        /// <value>Schema name: GAMGSolver</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// &lt;p&gt;Define the absolute tolerance for the residual. The convergence process will be stopped as soon as the residual falls below the absolute tolerance.&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;Define the absolute tolerance for the residual. The convergence process will be stopped as soon as the residual falls below the absolute tolerance.&lt;/p&gt;</value>
        [DataMember(Name="absoluteTolerance", EmitDefaultValue=false)]
        public decimal? AbsoluteTolerance { get; set; }

        /// <summary>
        /// &lt;p&gt;Choose the relative tolerance for the residual. The convergence process will be stopped as soon as the ratio of current to initial residual falls below the relative tolerance.&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;Choose the relative tolerance for the residual. The convergence process will be stopped as soon as the ratio of current to initial residual falls below the relative tolerance.&lt;/p&gt;</value>
        [DataMember(Name="relativeTolerance", EmitDefaultValue=false)]
        public decimal? RelativeTolerance { get; set; }

        /// <summary>
        /// Gets or Sets NumPreSweeps
        /// </summary>
        [DataMember(Name="numPreSweeps", EmitDefaultValue=false)]
        public int? NumPreSweeps { get; set; }

        /// <summary>
        /// Gets or Sets NumPostSweeps
        /// </summary>
        [DataMember(Name="numPostSweeps", EmitDefaultValue=false)]
        public int? NumPostSweeps { get; set; }

        /// <summary>
        /// Gets or Sets CacheAgglomerationOn
        /// </summary>
        [DataMember(Name="cacheAgglomerationOn", EmitDefaultValue=false)]
        public bool? CacheAgglomerationOn { get; set; }

        /// <summary>
        /// Gets or Sets NumCellsCoarsestLevel
        /// </summary>
        [DataMember(Name="numCellsCoarsestLevel", EmitDefaultValue=false)]
        public int? NumCellsCoarsestLevel { get; set; }

        /// <summary>
        /// Gets or Sets NumMergeLevels
        /// </summary>
        [DataMember(Name="numMergeLevels", EmitDefaultValue=false)]
        public int? NumMergeLevels { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GAMGSolver {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AbsoluteTolerance: ").Append(AbsoluteTolerance).Append("\n");
            sb.Append("  RelativeTolerance: ").Append(RelativeTolerance).Append("\n");
            sb.Append("  Smoother: ").Append(Smoother).Append("\n");
            sb.Append("  NumPreSweeps: ").Append(NumPreSweeps).Append("\n");
            sb.Append("  NumPostSweeps: ").Append(NumPostSweeps).Append("\n");
            sb.Append("  CacheAgglomerationOn: ").Append(CacheAgglomerationOn).Append("\n");
            sb.Append("  NumCellsCoarsestLevel: ").Append(NumCellsCoarsestLevel).Append("\n");
            sb.Append("  NumMergeLevels: ").Append(NumMergeLevels).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GAMGSolver);
        }

        /// <summary>
        /// Returns true if GAMGSolver instances are equal
        /// </summary>
        /// <param name="input">Instance of GAMGSolver to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GAMGSolver input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.AbsoluteTolerance == input.AbsoluteTolerance ||
                    (this.AbsoluteTolerance != null &&
                    this.AbsoluteTolerance.Equals(input.AbsoluteTolerance))
                ) && 
                (
                    this.RelativeTolerance == input.RelativeTolerance ||
                    (this.RelativeTolerance != null &&
                    this.RelativeTolerance.Equals(input.RelativeTolerance))
                ) && 
                (
                    this.Smoother == input.Smoother ||
                    this.Smoother.Equals(input.Smoother)
                ) && 
                (
                    this.NumPreSweeps == input.NumPreSweeps ||
                    (this.NumPreSweeps != null &&
                    this.NumPreSweeps.Equals(input.NumPreSweeps))
                ) && 
                (
                    this.NumPostSweeps == input.NumPostSweeps ||
                    (this.NumPostSweeps != null &&
                    this.NumPostSweeps.Equals(input.NumPostSweeps))
                ) && 
                (
                    this.CacheAgglomerationOn == input.CacheAgglomerationOn ||
                    (this.CacheAgglomerationOn != null &&
                    this.CacheAgglomerationOn.Equals(input.CacheAgglomerationOn))
                ) && 
                (
                    this.NumCellsCoarsestLevel == input.NumCellsCoarsestLevel ||
                    (this.NumCellsCoarsestLevel != null &&
                    this.NumCellsCoarsestLevel.Equals(input.NumCellsCoarsestLevel))
                ) && 
                (
                    this.NumMergeLevels == input.NumMergeLevels ||
                    (this.NumMergeLevels != null &&
                    this.NumMergeLevels.Equals(input.NumMergeLevels))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.AbsoluteTolerance != null)
                    hashCode = hashCode * 59 + this.AbsoluteTolerance.GetHashCode();
                if (this.RelativeTolerance != null)
                    hashCode = hashCode * 59 + this.RelativeTolerance.GetHashCode();
                hashCode = hashCode * 59 + this.Smoother.GetHashCode();
                if (this.NumPreSweeps != null)
                    hashCode = hashCode * 59 + this.NumPreSweeps.GetHashCode();
                if (this.NumPostSweeps != null)
                    hashCode = hashCode * 59 + this.NumPostSweeps.GetHashCode();
                if (this.CacheAgglomerationOn != null)
                    hashCode = hashCode * 59 + this.CacheAgglomerationOn.GetHashCode();
                if (this.NumCellsCoarsestLevel != null)
                    hashCode = hashCode * 59 + this.NumCellsCoarsestLevel.GetHashCode();
                if (this.NumMergeLevels != null)
                    hashCode = hashCode * 59 + this.NumMergeLevels.GetHashCode();
                return hashCode;
            }
        }

    }

}
