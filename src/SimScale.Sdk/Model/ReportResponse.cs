/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// ReportResponse
    /// </summary>
    [DataContract]
    public partial class ReportResponse : IEquatable<ReportResponse>
    {
        /// <summary>
        /// Status of the report operation.
        /// </summary>
        /// <value>Status of the report operation.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum READY for value: READY
            /// </summary>
            [EnumMember(Value = "READY")]
            READY = 1,

            /// <summary>
            /// Enum QUEUED for value: QUEUED
            /// </summary>
            [EnumMember(Value = "QUEUED")]
            QUEUED = 2,

            /// <summary>
            /// Enum RUNNING for value: RUNNING
            /// </summary>
            [EnumMember(Value = "RUNNING")]
            RUNNING = 3,

            /// <summary>
            /// Enum FINISHED for value: FINISHED
            /// </summary>
            [EnumMember(Value = "FINISHED")]
            FINISHED = 4,

            /// <summary>
            /// Enum CANCELED for value: CANCELED
            /// </summary>
            [EnumMember(Value = "CANCELED")]
            CANCELED = 5,

            /// <summary>
            /// Enum FAILED for value: FAILED
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILED = 6

        }

        /// <summary>
        /// Status of the report operation.
        /// </summary>
        /// <value>Status of the report operation.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReportResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportResponse" /> class.
        /// </summary>
        /// <param name="name">The name of the report. (required).</param>
        /// <param name="description">The description of the report..</param>
        /// <param name="resultIds">The resultIds the report has been created for..</param>
        /// <param name="reportProperties">reportProperties.</param>
        /// <param name="download">download.</param>
        /// <param name="failureReason">failureReason.</param>
        public ReportResponse(string name = default(string), string description = default(string), List<Guid?> resultIds = default(List<Guid?>), OneOfReportProperties reportProperties = default(OneOfReportProperties), DownloadInfo download = default(DownloadInfo), ReportResponseFailureReason failureReason = default(ReportResponseFailureReason))
        {
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for ReportResponse and cannot be null");
            this.Description = description;
            this.ResultIds = resultIds;
            this.ReportProperties = reportProperties;
            this.Download = download;
            this.FailureReason = failureReason;
        }
        
        /// <summary>
        /// The ID of the report.
        /// </summary>
        /// <value>The ID of the report.</value>
        [DataMember(Name="reportId", EmitDefaultValue=false)]
        public Guid? ReportId { get; private set; }

        /// <summary>
        /// The name of the report.
        /// </summary>
        /// <value>The name of the report.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The description of the report.
        /// </summary>
        /// <value>The description of the report.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The time the report was created.
        /// </summary>
        /// <value>The time the report was created.</value>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public DateTimeOffset? CreatedAt { get; private set; }

        /// <summary>
        /// The time the report was started.
        /// </summary>
        /// <value>The time the report was started.</value>
        [DataMember(Name="startedAt", EmitDefaultValue=false)]
        public DateTimeOffset? StartedAt { get; private set; }

        /// <summary>
        /// The time the report was finished.
        /// </summary>
        /// <value>The time the report was finished.</value>
        [DataMember(Name="finishedAt", EmitDefaultValue=false)]
        public DateTimeOffset? FinishedAt { get; private set; }

        /// <summary>
        /// The resultIds the report has been created for.
        /// </summary>
        /// <value>The resultIds the report has been created for.</value>
        [DataMember(Name="resultIds", EmitDefaultValue=false)]
        public List<Guid?> ResultIds { get; set; }

        /// <summary>
        /// Gets or Sets ReportProperties
        /// </summary>
        [DataMember(Name="reportProperties", EmitDefaultValue=false)]
        public OneOfReportProperties ReportProperties { get; set; }

        /// <summary>
        /// Gets or Sets Download
        /// </summary>
        [DataMember(Name="download", EmitDefaultValue=false)]
        public DownloadInfo Download { get; set; }

        /// <summary>
        /// Gets or Sets FailureReason
        /// </summary>
        [DataMember(Name="failureReason", EmitDefaultValue=false)]
        public ReportResponseFailureReason FailureReason { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReportResponse {\n");
            sb.Append("  ReportId: ").Append(ReportId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  StartedAt: ").Append(StartedAt).Append("\n");
            sb.Append("  FinishedAt: ").Append(FinishedAt).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ResultIds: ").Append(ResultIds).Append("\n");
            sb.Append("  ReportProperties: ").Append(ReportProperties).Append("\n");
            sb.Append("  Download: ").Append(Download).Append("\n");
            sb.Append("  FailureReason: ").Append(FailureReason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReportResponse);
        }

        /// <summary>
        /// Returns true if ReportResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ReportResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ReportId == input.ReportId ||
                    (this.ReportId != null &&
                    this.ReportId.Equals(input.ReportId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.StartedAt == input.StartedAt ||
                    (this.StartedAt != null &&
                    this.StartedAt.Equals(input.StartedAt))
                ) && 
                (
                    this.FinishedAt == input.FinishedAt ||
                    (this.FinishedAt != null &&
                    this.FinishedAt.Equals(input.FinishedAt))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.ResultIds == input.ResultIds ||
                    this.ResultIds != null &&
                    input.ResultIds != null &&
                    this.ResultIds.SequenceEqual(input.ResultIds)
                ) && 
                (
                    this.ReportProperties == input.ReportProperties ||
                    (this.ReportProperties != null &&
                    this.ReportProperties.Equals(input.ReportProperties))
                ) && 
                (
                    this.Download == input.Download ||
                    (this.Download != null &&
                    this.Download.Equals(input.Download))
                ) && 
                (
                    this.FailureReason == input.FailureReason ||
                    (this.FailureReason != null &&
                    this.FailureReason.Equals(input.FailureReason))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReportId != null)
                    hashCode = hashCode * 59 + this.ReportId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.StartedAt != null)
                    hashCode = hashCode * 59 + this.StartedAt.GetHashCode();
                if (this.FinishedAt != null)
                    hashCode = hashCode * 59 + this.FinishedAt.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.ResultIds != null)
                    hashCode = hashCode * 59 + this.ResultIds.GetHashCode();
                if (this.ReportProperties != null)
                    hashCode = hashCode * 59 + this.ReportProperties.GetHashCode();
                if (this.Download != null)
                    hashCode = hashCode * 59 + this.Download.GetHashCode();
                if (this.FailureReason != null)
                    hashCode = hashCode * 59 + this.FailureReason.GetHashCode();
                return hashCode;
            }
        }

    }

}
