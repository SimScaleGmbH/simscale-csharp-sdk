/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// FrequencyRange
    /// </summary>
    [DataContract]
    public partial class FrequencyRange : OneOfModalBaseControlEigenfrequencyScope, OneOfSolidSimulationControlEigenfrequencyScope, IEquatable<FrequencyRange>
    {
        /// <summary>
        /// Defines ParallelizationLevel
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ParallelizationLevelEnum
        {
            /// <summary>
            /// Enum COMPLETE for value: COMPLETE
            /// </summary>
            [EnumMember(Value = "COMPLETE")]
            COMPLETE = 1,

            /// <summary>
            /// Enum PARTIAL for value: PARTIAL
            /// </summary>
            [EnumMember(Value = "PARTIAL")]
            PARTIAL = 2

        }

        /// <summary>
        /// Gets or Sets ParallelizationLevel
        /// </summary>
        [DataMember(Name="parallelizationLevel", EmitDefaultValue=false)]
        public ParallelizationLevelEnum? ParallelizationLevel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FrequencyRange" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FrequencyRange() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FrequencyRange" /> class.
        /// </summary>
        /// <param name="type">Schema name: FrequencyRange (required) (default to &quot;RANGE&quot;).</param>
        /// <param name="startFrequency">startFrequency.</param>
        /// <param name="endFrequency">endFrequency.</param>
        /// <param name="numberOfSubBands">numberOfSubBands (default to 1).</param>
        /// <param name="parallelizationLevel">parallelizationLevel (default to ParallelizationLevelEnum.COMPLETE).</param>
        public FrequencyRange(string type = "RANGE", DimensionalFrequency startFrequency = default(DimensionalFrequency), DimensionalFrequency endFrequency = default(DimensionalFrequency), int? numberOfSubBands = default(int?), ParallelizationLevelEnum? parallelizationLevel = default(ParallelizationLevelEnum?))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for FrequencyRange and cannot be null");
            this.StartFrequency = startFrequency;
            this.EndFrequency = endFrequency;
            this.NumberOfSubBands = numberOfSubBands;
            this.ParallelizationLevel = parallelizationLevel;
        }
        
        /// <summary>
        /// Schema name: FrequencyRange
        /// </summary>
        /// <value>Schema name: FrequencyRange</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets StartFrequency
        /// </summary>
        [DataMember(Name="startFrequency", EmitDefaultValue=false)]
        public DimensionalFrequency StartFrequency { get; set; }

        /// <summary>
        /// Gets or Sets EndFrequency
        /// </summary>
        [DataMember(Name="endFrequency", EmitDefaultValue=false)]
        public DimensionalFrequency EndFrequency { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfSubBands
        /// </summary>
        [DataMember(Name="numberOfSubBands", EmitDefaultValue=false)]
        public int? NumberOfSubBands { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FrequencyRange {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  StartFrequency: ").Append(StartFrequency).Append("\n");
            sb.Append("  EndFrequency: ").Append(EndFrequency).Append("\n");
            sb.Append("  NumberOfSubBands: ").Append(NumberOfSubBands).Append("\n");
            sb.Append("  ParallelizationLevel: ").Append(ParallelizationLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FrequencyRange);
        }

        /// <summary>
        /// Returns true if FrequencyRange instances are equal
        /// </summary>
        /// <param name="input">Instance of FrequencyRange to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FrequencyRange input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.StartFrequency == input.StartFrequency ||
                    (this.StartFrequency != null &&
                    this.StartFrequency.Equals(input.StartFrequency))
                ) && 
                (
                    this.EndFrequency == input.EndFrequency ||
                    (this.EndFrequency != null &&
                    this.EndFrequency.Equals(input.EndFrequency))
                ) && 
                (
                    this.NumberOfSubBands == input.NumberOfSubBands ||
                    (this.NumberOfSubBands != null &&
                    this.NumberOfSubBands.Equals(input.NumberOfSubBands))
                ) && 
                (
                    this.ParallelizationLevel == input.ParallelizationLevel ||
                    this.ParallelizationLevel.Equals(input.ParallelizationLevel)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.StartFrequency != null)
                    hashCode = hashCode * 59 + this.StartFrequency.GetHashCode();
                if (this.EndFrequency != null)
                    hashCode = hashCode * 59 + this.EndFrequency.GetHashCode();
                if (this.NumberOfSubBands != null)
                    hashCode = hashCode * 59 + this.NumberOfSubBands.GetHashCode();
                hashCode = hashCode * 59 + this.ParallelizationLevel.GetHashCode();
                return hashCode;
            }
        }

    }

}
