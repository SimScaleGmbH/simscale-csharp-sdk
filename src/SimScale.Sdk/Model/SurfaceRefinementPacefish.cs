/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// SurfaceRefinementPacefish
    /// </summary>
    [DataContract]
    public partial class SurfaceRefinementPacefish : OneOfPacefishMeshLegacyRefinements, IEquatable<SurfaceRefinementPacefish>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SurfaceRefinementPacefish" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SurfaceRefinementPacefish() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SurfaceRefinementPacefish" /> class.
        /// </summary>
        /// <param name="type">Schema name: SurfaceRefinementPacefish (required) (default to &quot;SURFACE_PACEFISH&quot;).</param>
        /// <param name="name">name (default to &quot;Surface refinement&quot;).</param>
        /// <param name="targetResolution">targetResolution.</param>
        /// <param name="bufferCellsNoExtrude">Specify the minimum number of buffer cells between regions of different refinements. (default to 4).</param>
        /// <param name="additionalDirectionalCells">additionalDirectionalCells.</param>
        /// <param name="topologicalReference">topologicalReference.</param>
        public SurfaceRefinementPacefish(string type = "SURFACE_PACEFISH", string name = default(string), DimensionalLength targetResolution = default(DimensionalLength), int? bufferCellsNoExtrude = default(int?), AdditionalDirectionalCells additionalDirectionalCells = default(AdditionalDirectionalCells), TopologicalReference topologicalReference = default(TopologicalReference))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for SurfaceRefinementPacefish and cannot be null");
            this.Name = name;
            this.TargetResolution = targetResolution;
            this.BufferCellsNoExtrude = bufferCellsNoExtrude;
            this.AdditionalDirectionalCells = additionalDirectionalCells;
            this.TopologicalReference = topologicalReference;
        }
        
        /// <summary>
        /// Schema name: SurfaceRefinementPacefish
        /// </summary>
        /// <value>Schema name: SurfaceRefinementPacefish</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets TargetResolution
        /// </summary>
        [DataMember(Name="targetResolution", EmitDefaultValue=false)]
        public DimensionalLength TargetResolution { get; set; }

        /// <summary>
        /// Specify the minimum number of buffer cells between regions of different refinements.
        /// </summary>
        /// <value>Specify the minimum number of buffer cells between regions of different refinements.</value>
        [DataMember(Name="bufferCellsNoExtrude", EmitDefaultValue=false)]
        public int? BufferCellsNoExtrude { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalDirectionalCells
        /// </summary>
        [DataMember(Name="additionalDirectionalCells", EmitDefaultValue=false)]
        public AdditionalDirectionalCells AdditionalDirectionalCells { get; set; }

        /// <summary>
        /// Gets or Sets TopologicalReference
        /// </summary>
        [DataMember(Name="topologicalReference", EmitDefaultValue=false)]
        public TopologicalReference TopologicalReference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SurfaceRefinementPacefish {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  TargetResolution: ").Append(TargetResolution).Append("\n");
            sb.Append("  BufferCellsNoExtrude: ").Append(BufferCellsNoExtrude).Append("\n");
            sb.Append("  AdditionalDirectionalCells: ").Append(AdditionalDirectionalCells).Append("\n");
            sb.Append("  TopologicalReference: ").Append(TopologicalReference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SurfaceRefinementPacefish);
        }

        /// <summary>
        /// Returns true if SurfaceRefinementPacefish instances are equal
        /// </summary>
        /// <param name="input">Instance of SurfaceRefinementPacefish to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SurfaceRefinementPacefish input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.TargetResolution == input.TargetResolution ||
                    (this.TargetResolution != null &&
                    this.TargetResolution.Equals(input.TargetResolution))
                ) && 
                (
                    this.BufferCellsNoExtrude == input.BufferCellsNoExtrude ||
                    (this.BufferCellsNoExtrude != null &&
                    this.BufferCellsNoExtrude.Equals(input.BufferCellsNoExtrude))
                ) && 
                (
                    this.AdditionalDirectionalCells == input.AdditionalDirectionalCells ||
                    (this.AdditionalDirectionalCells != null &&
                    this.AdditionalDirectionalCells.Equals(input.AdditionalDirectionalCells))
                ) && 
                (
                    this.TopologicalReference == input.TopologicalReference ||
                    (this.TopologicalReference != null &&
                    this.TopologicalReference.Equals(input.TopologicalReference))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.TargetResolution != null)
                    hashCode = hashCode * 59 + this.TargetResolution.GetHashCode();
                if (this.BufferCellsNoExtrude != null)
                    hashCode = hashCode * 59 + this.BufferCellsNoExtrude.GetHashCode();
                if (this.AdditionalDirectionalCells != null)
                    hashCode = hashCode * 59 + this.AdditionalDirectionalCells.GetHashCode();
                if (this.TopologicalReference != null)
                    hashCode = hashCode * 59 + this.TopologicalReference.GetHashCode();
                return hashCode;
            }
        }

    }

}
