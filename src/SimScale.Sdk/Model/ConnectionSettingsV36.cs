/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// ConnectionSettingsV36
    /// </summary>
    [DataContract]
    public partial class ConnectionSettingsV36 : IEquatable<ConnectionSettingsV36>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectionSettingsV36" /> class.
        /// </summary>
        /// <param name="nonlinearityResolution">nonlinearityResolution.</param>
        /// <param name="friction">friction.</param>
        /// <param name="contactNonLinearityResolution">contactNonLinearityResolution.</param>
        /// <param name="convergenceStabilization">convergenceStabilization (default to true).</param>
        /// <param name="contactSmoothing">contactSmoothing (default to false).</param>
        /// <param name="stopIfInterpenetration">stopIfInterpenetration (default to false).</param>
        /// <param name="verifyNorms">verifyNorms (default to true).</param>
        public ConnectionSettingsV36(OneOfConnectionSettingsV36NonlinearityResolution nonlinearityResolution = default(OneOfConnectionSettingsV36NonlinearityResolution), OneOfConnectionSettingsV36Friction friction = default(OneOfConnectionSettingsV36Friction), OneOfConnectionSettingsV36ContactNonLinearityResolution contactNonLinearityResolution = default(OneOfConnectionSettingsV36ContactNonLinearityResolution), bool? convergenceStabilization = default(bool?), bool? contactSmoothing = default(bool?), bool? stopIfInterpenetration = default(bool?), bool? verifyNorms = default(bool?))
        {
            this.NonlinearityResolution = nonlinearityResolution;
            this.Friction = friction;
            this.ContactNonLinearityResolution = contactNonLinearityResolution;
            this.ConvergenceStabilization = convergenceStabilization;
            this.ContactSmoothing = contactSmoothing;
            this.StopIfInterpenetration = stopIfInterpenetration;
            this.VerifyNorms = verifyNorms;
        }
        
        /// <summary>
        /// Gets or Sets NonlinearityResolution
        /// </summary>
        [DataMember(Name="nonlinearityResolution", EmitDefaultValue=false)]
        public OneOfConnectionSettingsV36NonlinearityResolution NonlinearityResolution { get; set; }

        /// <summary>
        /// Gets or Sets Friction
        /// </summary>
        [DataMember(Name="friction", EmitDefaultValue=false)]
        public OneOfConnectionSettingsV36Friction Friction { get; set; }

        /// <summary>
        /// Gets or Sets ContactNonLinearityResolution
        /// </summary>
        [DataMember(Name="contactNonLinearityResolution", EmitDefaultValue=false)]
        public OneOfConnectionSettingsV36ContactNonLinearityResolution ContactNonLinearityResolution { get; set; }

        /// <summary>
        /// Gets or Sets ConvergenceStabilization
        /// </summary>
        [DataMember(Name="convergenceStabilization", EmitDefaultValue=false)]
        public bool? ConvergenceStabilization { get; set; }

        /// <summary>
        /// Gets or Sets ContactSmoothing
        /// </summary>
        [DataMember(Name="contactSmoothing", EmitDefaultValue=false)]
        public bool? ContactSmoothing { get; set; }

        /// <summary>
        /// Gets or Sets StopIfInterpenetration
        /// </summary>
        [DataMember(Name="stopIfInterpenetration", EmitDefaultValue=false)]
        public bool? StopIfInterpenetration { get; set; }

        /// <summary>
        /// Gets or Sets VerifyNorms
        /// </summary>
        [DataMember(Name="verifyNorms", EmitDefaultValue=false)]
        public bool? VerifyNorms { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConnectionSettingsV36 {\n");
            sb.Append("  NonlinearityResolution: ").Append(NonlinearityResolution).Append("\n");
            sb.Append("  Friction: ").Append(Friction).Append("\n");
            sb.Append("  ContactNonLinearityResolution: ").Append(ContactNonLinearityResolution).Append("\n");
            sb.Append("  ConvergenceStabilization: ").Append(ConvergenceStabilization).Append("\n");
            sb.Append("  ContactSmoothing: ").Append(ContactSmoothing).Append("\n");
            sb.Append("  StopIfInterpenetration: ").Append(StopIfInterpenetration).Append("\n");
            sb.Append("  VerifyNorms: ").Append(VerifyNorms).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConnectionSettingsV36);
        }

        /// <summary>
        /// Returns true if ConnectionSettingsV36 instances are equal
        /// </summary>
        /// <param name="input">Instance of ConnectionSettingsV36 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConnectionSettingsV36 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NonlinearityResolution == input.NonlinearityResolution ||
                    (this.NonlinearityResolution != null &&
                    this.NonlinearityResolution.Equals(input.NonlinearityResolution))
                ) && 
                (
                    this.Friction == input.Friction ||
                    (this.Friction != null &&
                    this.Friction.Equals(input.Friction))
                ) && 
                (
                    this.ContactNonLinearityResolution == input.ContactNonLinearityResolution ||
                    (this.ContactNonLinearityResolution != null &&
                    this.ContactNonLinearityResolution.Equals(input.ContactNonLinearityResolution))
                ) && 
                (
                    this.ConvergenceStabilization == input.ConvergenceStabilization ||
                    (this.ConvergenceStabilization != null &&
                    this.ConvergenceStabilization.Equals(input.ConvergenceStabilization))
                ) && 
                (
                    this.ContactSmoothing == input.ContactSmoothing ||
                    (this.ContactSmoothing != null &&
                    this.ContactSmoothing.Equals(input.ContactSmoothing))
                ) && 
                (
                    this.StopIfInterpenetration == input.StopIfInterpenetration ||
                    (this.StopIfInterpenetration != null &&
                    this.StopIfInterpenetration.Equals(input.StopIfInterpenetration))
                ) && 
                (
                    this.VerifyNorms == input.VerifyNorms ||
                    (this.VerifyNorms != null &&
                    this.VerifyNorms.Equals(input.VerifyNorms))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NonlinearityResolution != null)
                    hashCode = hashCode * 59 + this.NonlinearityResolution.GetHashCode();
                if (this.Friction != null)
                    hashCode = hashCode * 59 + this.Friction.GetHashCode();
                if (this.ContactNonLinearityResolution != null)
                    hashCode = hashCode * 59 + this.ContactNonLinearityResolution.GetHashCode();
                if (this.ConvergenceStabilization != null)
                    hashCode = hashCode * 59 + this.ConvergenceStabilization.GetHashCode();
                if (this.ContactSmoothing != null)
                    hashCode = hashCode * 59 + this.ContactSmoothing.GetHashCode();
                if (this.StopIfInterpenetration != null)
                    hashCode = hashCode * 59 + this.StopIfInterpenetration.GetHashCode();
                if (this.VerifyNorms != null)
                    hashCode = hashCode * 59 + this.VerifyNorms.GetHashCode();
                return hashCode;
            }
        }

    }

}
