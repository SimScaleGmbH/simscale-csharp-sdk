/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// LitzWireCoil
    /// </summary>
    [DataContract]
    public partial class LitzWireCoil : OneOfCoilCoilType, IEquatable<LitzWireCoil>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LitzWireCoil" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LitzWireCoil() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LitzWireCoil" /> class.
        /// </summary>
        /// <param name="type">Schema name: LitzWireCoil (required) (default to &quot;LITZ_WIRE_COIL&quot;).</param>
        /// <param name="strandCrossSectionType">strandCrossSectionType.</param>
        /// <param name="numberOfTurns">&lt;p&gt;The &lt;strong&gt;Number of Turns&lt;/strong&gt; option indicates the number of times the wire is wound around the coil&#39;s core to form loops. Each loop is a complete 360-degree winding of the wire around the core.&lt;/p&gt; (default to 1).</param>
        /// <param name="numberOfStrandsPerTurn">numberOfStrandsPerTurn (default to 1).</param>
        public LitzWireCoil(string type = "LITZ_WIRE_COIL", OneOfLitzWireCoilStrandCrossSectionType strandCrossSectionType = default(OneOfLitzWireCoilStrandCrossSectionType), int? numberOfTurns = default(int?), int? numberOfStrandsPerTurn = default(int?))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for LitzWireCoil and cannot be null");
            this.StrandCrossSectionType = strandCrossSectionType;
            this.NumberOfTurns = numberOfTurns;
            this.NumberOfStrandsPerTurn = numberOfStrandsPerTurn;
        }
        
        /// <summary>
        /// Schema name: LitzWireCoil
        /// </summary>
        /// <value>Schema name: LitzWireCoil</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets StrandCrossSectionType
        /// </summary>
        [DataMember(Name="strandCrossSectionType", EmitDefaultValue=false)]
        public OneOfLitzWireCoilStrandCrossSectionType StrandCrossSectionType { get; set; }

        /// <summary>
        /// &lt;p&gt;The &lt;strong&gt;Number of Turns&lt;/strong&gt; option indicates the number of times the wire is wound around the coil&#39;s core to form loops. Each loop is a complete 360-degree winding of the wire around the core.&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;The &lt;strong&gt;Number of Turns&lt;/strong&gt; option indicates the number of times the wire is wound around the coil&#39;s core to form loops. Each loop is a complete 360-degree winding of the wire around the core.&lt;/p&gt;</value>
        [DataMember(Name="numberOfTurns", EmitDefaultValue=false)]
        public int? NumberOfTurns { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfStrandsPerTurn
        /// </summary>
        [DataMember(Name="numberOfStrandsPerTurn", EmitDefaultValue=false)]
        public int? NumberOfStrandsPerTurn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LitzWireCoil {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  StrandCrossSectionType: ").Append(StrandCrossSectionType).Append("\n");
            sb.Append("  NumberOfTurns: ").Append(NumberOfTurns).Append("\n");
            sb.Append("  NumberOfStrandsPerTurn: ").Append(NumberOfStrandsPerTurn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LitzWireCoil);
        }

        /// <summary>
        /// Returns true if LitzWireCoil instances are equal
        /// </summary>
        /// <param name="input">Instance of LitzWireCoil to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LitzWireCoil input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.StrandCrossSectionType == input.StrandCrossSectionType ||
                    (this.StrandCrossSectionType != null &&
                    this.StrandCrossSectionType.Equals(input.StrandCrossSectionType))
                ) && 
                (
                    this.NumberOfTurns == input.NumberOfTurns ||
                    (this.NumberOfTurns != null &&
                    this.NumberOfTurns.Equals(input.NumberOfTurns))
                ) && 
                (
                    this.NumberOfStrandsPerTurn == input.NumberOfStrandsPerTurn ||
                    (this.NumberOfStrandsPerTurn != null &&
                    this.NumberOfStrandsPerTurn.Equals(input.NumberOfStrandsPerTurn))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.StrandCrossSectionType != null)
                    hashCode = hashCode * 59 + this.StrandCrossSectionType.GetHashCode();
                if (this.NumberOfTurns != null)
                    hashCode = hashCode * 59 + this.NumberOfTurns.GetHashCode();
                if (this.NumberOfStrandsPerTurn != null)
                    hashCode = hashCode * 59 + this.NumberOfStrandsPerTurn.GetHashCode();
                return hashCode;
            }
        }

    }

}
