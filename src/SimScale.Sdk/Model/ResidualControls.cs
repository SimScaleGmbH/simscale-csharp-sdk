/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// ResidualControls
    /// </summary>
    [DataContract]
    public partial class ResidualControls : IEquatable<ResidualControls>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResidualControls" /> class.
        /// </summary>
        /// <param name="velocity">velocity.</param>
        /// <param name="pressure">pressure.</param>
        /// <param name="pressureRgh">pressureRgh.</param>
        /// <param name="temperature">temperature.</param>
        /// <param name="turbulentKineticEnergy">turbulentKineticEnergy.</param>
        /// <param name="omegaDissipationRate">omegaDissipationRate.</param>
        /// <param name="epsilonDissipationRate">epsilonDissipationRate.</param>
        public ResidualControls(Tolerance velocity = default(Tolerance), Tolerance pressure = default(Tolerance), Tolerance pressureRgh = default(Tolerance), Tolerance temperature = default(Tolerance), Tolerance turbulentKineticEnergy = default(Tolerance), Tolerance omegaDissipationRate = default(Tolerance), Tolerance epsilonDissipationRate = default(Tolerance))
        {
            this.Velocity = velocity;
            this.Pressure = pressure;
            this.PressureRgh = pressureRgh;
            this.Temperature = temperature;
            this.TurbulentKineticEnergy = turbulentKineticEnergy;
            this.OmegaDissipationRate = omegaDissipationRate;
            this.EpsilonDissipationRate = epsilonDissipationRate;
        }
        
        /// <summary>
        /// Gets or Sets Velocity
        /// </summary>
        [DataMember(Name="velocity", EmitDefaultValue=false)]
        public Tolerance Velocity { get; set; }

        /// <summary>
        /// Gets or Sets Pressure
        /// </summary>
        [DataMember(Name="pressure", EmitDefaultValue=false)]
        public Tolerance Pressure { get; set; }

        /// <summary>
        /// Gets or Sets PressureRgh
        /// </summary>
        [DataMember(Name="pressureRgh", EmitDefaultValue=false)]
        public Tolerance PressureRgh { get; set; }

        /// <summary>
        /// Gets or Sets Temperature
        /// </summary>
        [DataMember(Name="temperature", EmitDefaultValue=false)]
        public Tolerance Temperature { get; set; }

        /// <summary>
        /// Gets or Sets TurbulentKineticEnergy
        /// </summary>
        [DataMember(Name="turbulentKineticEnergy", EmitDefaultValue=false)]
        public Tolerance TurbulentKineticEnergy { get; set; }

        /// <summary>
        /// Gets or Sets OmegaDissipationRate
        /// </summary>
        [DataMember(Name="omegaDissipationRate", EmitDefaultValue=false)]
        public Tolerance OmegaDissipationRate { get; set; }

        /// <summary>
        /// Gets or Sets EpsilonDissipationRate
        /// </summary>
        [DataMember(Name="epsilonDissipationRate", EmitDefaultValue=false)]
        public Tolerance EpsilonDissipationRate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResidualControls {\n");
            sb.Append("  Velocity: ").Append(Velocity).Append("\n");
            sb.Append("  Pressure: ").Append(Pressure).Append("\n");
            sb.Append("  PressureRgh: ").Append(PressureRgh).Append("\n");
            sb.Append("  Temperature: ").Append(Temperature).Append("\n");
            sb.Append("  TurbulentKineticEnergy: ").Append(TurbulentKineticEnergy).Append("\n");
            sb.Append("  OmegaDissipationRate: ").Append(OmegaDissipationRate).Append("\n");
            sb.Append("  EpsilonDissipationRate: ").Append(EpsilonDissipationRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResidualControls);
        }

        /// <summary>
        /// Returns true if ResidualControls instances are equal
        /// </summary>
        /// <param name="input">Instance of ResidualControls to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResidualControls input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Velocity == input.Velocity ||
                    (this.Velocity != null &&
                    this.Velocity.Equals(input.Velocity))
                ) && 
                (
                    this.Pressure == input.Pressure ||
                    (this.Pressure != null &&
                    this.Pressure.Equals(input.Pressure))
                ) && 
                (
                    this.PressureRgh == input.PressureRgh ||
                    (this.PressureRgh != null &&
                    this.PressureRgh.Equals(input.PressureRgh))
                ) && 
                (
                    this.Temperature == input.Temperature ||
                    (this.Temperature != null &&
                    this.Temperature.Equals(input.Temperature))
                ) && 
                (
                    this.TurbulentKineticEnergy == input.TurbulentKineticEnergy ||
                    (this.TurbulentKineticEnergy != null &&
                    this.TurbulentKineticEnergy.Equals(input.TurbulentKineticEnergy))
                ) && 
                (
                    this.OmegaDissipationRate == input.OmegaDissipationRate ||
                    (this.OmegaDissipationRate != null &&
                    this.OmegaDissipationRate.Equals(input.OmegaDissipationRate))
                ) && 
                (
                    this.EpsilonDissipationRate == input.EpsilonDissipationRate ||
                    (this.EpsilonDissipationRate != null &&
                    this.EpsilonDissipationRate.Equals(input.EpsilonDissipationRate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Velocity != null)
                    hashCode = hashCode * 59 + this.Velocity.GetHashCode();
                if (this.Pressure != null)
                    hashCode = hashCode * 59 + this.Pressure.GetHashCode();
                if (this.PressureRgh != null)
                    hashCode = hashCode * 59 + this.PressureRgh.GetHashCode();
                if (this.Temperature != null)
                    hashCode = hashCode * 59 + this.Temperature.GetHashCode();
                if (this.TurbulentKineticEnergy != null)
                    hashCode = hashCode * 59 + this.TurbulentKineticEnergy.GetHashCode();
                if (this.OmegaDissipationRate != null)
                    hashCode = hashCode * 59 + this.OmegaDissipationRate.GetHashCode();
                if (this.EpsilonDissipationRate != null)
                    hashCode = hashCode * 59 + this.EpsilonDissipationRate.GetHashCode();
                return hashCode;
            }
        }

    }

}
