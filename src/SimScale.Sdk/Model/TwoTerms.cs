/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// TwoTerms
    /// </summary>
    [DataContract]
    public partial class TwoTerms : OneOfOgdenHyperelasticModelMarcNumberOfTerms, IEquatable<TwoTerms>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TwoTerms" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TwoTerms() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TwoTerms" /> class.
        /// </summary>
        /// <param name="type">Schema name: TwoTerms (required) (default to &quot;TWO_TERMS&quot;).</param>
        /// <param name="modulus1">modulus1.</param>
        /// <param name="exponent1">exponent1 (default to 0M).</param>
        /// <param name="modulus2">modulus2.</param>
        /// <param name="exponent2">exponent2 (default to 0M).</param>
        public TwoTerms(string type = "TWO_TERMS", DimensionalPressure modulus1 = default(DimensionalPressure), decimal? exponent1 = default(decimal?), DimensionalPressure modulus2 = default(DimensionalPressure), decimal? exponent2 = default(decimal?))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for TwoTerms and cannot be null");
            this.Modulus1 = modulus1;
            this.Exponent1 = exponent1;
            this.Modulus2 = modulus2;
            this.Exponent2 = exponent2;
        }
        
        /// <summary>
        /// Schema name: TwoTerms
        /// </summary>
        /// <value>Schema name: TwoTerms</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Modulus1
        /// </summary>
        [DataMember(Name="modulus1", EmitDefaultValue=false)]
        public DimensionalPressure Modulus1 { get; set; }

        /// <summary>
        /// Gets or Sets Exponent1
        /// </summary>
        [DataMember(Name="exponent1", EmitDefaultValue=false)]
        public decimal? Exponent1 { get; set; }

        /// <summary>
        /// Gets or Sets Modulus2
        /// </summary>
        [DataMember(Name="modulus2", EmitDefaultValue=false)]
        public DimensionalPressure Modulus2 { get; set; }

        /// <summary>
        /// Gets or Sets Exponent2
        /// </summary>
        [DataMember(Name="exponent2", EmitDefaultValue=false)]
        public decimal? Exponent2 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TwoTerms {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Modulus1: ").Append(Modulus1).Append("\n");
            sb.Append("  Exponent1: ").Append(Exponent1).Append("\n");
            sb.Append("  Modulus2: ").Append(Modulus2).Append("\n");
            sb.Append("  Exponent2: ").Append(Exponent2).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TwoTerms);
        }

        /// <summary>
        /// Returns true if TwoTerms instances are equal
        /// </summary>
        /// <param name="input">Instance of TwoTerms to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TwoTerms input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Modulus1 == input.Modulus1 ||
                    (this.Modulus1 != null &&
                    this.Modulus1.Equals(input.Modulus1))
                ) && 
                (
                    this.Exponent1 == input.Exponent1 ||
                    (this.Exponent1 != null &&
                    this.Exponent1.Equals(input.Exponent1))
                ) && 
                (
                    this.Modulus2 == input.Modulus2 ||
                    (this.Modulus2 != null &&
                    this.Modulus2.Equals(input.Modulus2))
                ) && 
                (
                    this.Exponent2 == input.Exponent2 ||
                    (this.Exponent2 != null &&
                    this.Exponent2.Equals(input.Exponent2))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Modulus1 != null)
                    hashCode = hashCode * 59 + this.Modulus1.GetHashCode();
                if (this.Exponent1 != null)
                    hashCode = hashCode * 59 + this.Exponent1.GetHashCode();
                if (this.Modulus2 != null)
                    hashCode = hashCode * 59 + this.Modulus2.GetHashCode();
                if (this.Exponent2 != null)
                    hashCode = hashCode * 59 + this.Exponent2.GetHashCode();
                return hashCode;
            }
        }

    }

}
