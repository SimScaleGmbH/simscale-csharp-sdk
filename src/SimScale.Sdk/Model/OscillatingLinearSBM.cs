/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// OscillatingLinearSBM
    /// </summary>
    [DataContract]
    public partial class OscillatingLinearSBM : OneOfAdvancedConceptsSolidBodyMotions, IEquatable<OscillatingLinearSBM>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OscillatingLinearSBM" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OscillatingLinearSBM() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OscillatingLinearSBM" /> class.
        /// </summary>
        /// <param name="type">type (required) (default to &quot;OSCILLATING_LINEAR_MOTION&quot;).</param>
        /// <param name="name">name.</param>
        /// <param name="amplitude">amplitude.</param>
        /// <param name="angularVelocity">angularVelocity.</param>
        public OscillatingLinearSBM(string type = "OSCILLATING_LINEAR_MOTION", string name = default(string), DimensionalVectorLength amplitude = default(DimensionalVectorLength), DimensionalRotationSpeed angularVelocity = default(DimensionalRotationSpeed))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for OscillatingLinearSBM and cannot be null");
            this.Name = name;
            this.Amplitude = amplitude;
            this.AngularVelocity = angularVelocity;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Amplitude
        /// </summary>
        [DataMember(Name="amplitude", EmitDefaultValue=false)]
        public DimensionalVectorLength Amplitude { get; set; }

        /// <summary>
        /// Gets or Sets AngularVelocity
        /// </summary>
        [DataMember(Name="angularVelocity", EmitDefaultValue=false)]
        public DimensionalRotationSpeed AngularVelocity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OscillatingLinearSBM {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Amplitude: ").Append(Amplitude).Append("\n");
            sb.Append("  AngularVelocity: ").Append(AngularVelocity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OscillatingLinearSBM);
        }

        /// <summary>
        /// Returns true if OscillatingLinearSBM instances are equal
        /// </summary>
        /// <param name="input">Instance of OscillatingLinearSBM to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OscillatingLinearSBM input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Amplitude == input.Amplitude ||
                    (this.Amplitude != null &&
                    this.Amplitude.Equals(input.Amplitude))
                ) && 
                (
                    this.AngularVelocity == input.AngularVelocity ||
                    (this.AngularVelocity != null &&
                    this.AngularVelocity.Equals(input.AngularVelocity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Amplitude != null)
                    hashCode = hashCode * 59 + this.Amplitude.GetHashCode();
                if (this.AngularVelocity != null)
                    hashCode = hashCode * 59 + this.AngularVelocity.GetHashCode();
                return hashCode;
            }
        }

    }

}
