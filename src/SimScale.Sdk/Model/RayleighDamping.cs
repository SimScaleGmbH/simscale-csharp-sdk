/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// RayleighDamping
    /// </summary>
    [DataContract]
    public partial class RayleighDamping : OneOfLinearElasticMaterialBehaviorDamping, IEquatable<RayleighDamping>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RayleighDamping" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RayleighDamping() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RayleighDamping" /> class.
        /// </summary>
        /// <param name="type">Schema name: RayleighDamping (required) (default to &quot;RAYLEIGH&quot;).</param>
        /// <param name="alphaCoefficient">alphaCoefficient.</param>
        /// <param name="betaDamping">betaDamping.</param>
        public RayleighDamping(string type = "RAYLEIGH", DimensionalDampingCoefficient alphaCoefficient = default(DimensionalDampingCoefficient), DimensionalTime betaDamping = default(DimensionalTime))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for RayleighDamping and cannot be null");
            this.AlphaCoefficient = alphaCoefficient;
            this.BetaDamping = betaDamping;
        }
        
        /// <summary>
        /// Schema name: RayleighDamping
        /// </summary>
        /// <value>Schema name: RayleighDamping</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets AlphaCoefficient
        /// </summary>
        [DataMember(Name="alphaCoefficient", EmitDefaultValue=false)]
        public DimensionalDampingCoefficient AlphaCoefficient { get; set; }

        /// <summary>
        /// Gets or Sets BetaDamping
        /// </summary>
        [DataMember(Name="betaDamping", EmitDefaultValue=false)]
        public DimensionalTime BetaDamping { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RayleighDamping {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AlphaCoefficient: ").Append(AlphaCoefficient).Append("\n");
            sb.Append("  BetaDamping: ").Append(BetaDamping).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RayleighDamping);
        }

        /// <summary>
        /// Returns true if RayleighDamping instances are equal
        /// </summary>
        /// <param name="input">Instance of RayleighDamping to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RayleighDamping input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.AlphaCoefficient == input.AlphaCoefficient ||
                    (this.AlphaCoefficient != null &&
                    this.AlphaCoefficient.Equals(input.AlphaCoefficient))
                ) && 
                (
                    this.BetaDamping == input.BetaDamping ||
                    (this.BetaDamping != null &&
                    this.BetaDamping.Equals(input.BetaDamping))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.AlphaCoefficient != null)
                    hashCode = hashCode * 59 + this.AlphaCoefficient.GetHashCode();
                if (this.BetaDamping != null)
                    hashCode = hashCode * 59 + this.BetaDamping.GetHashCode();
                return hashCode;
            }
        }

    }

}
