/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// &lt;p&gt;Choose if damping effects should be considered. The supported damping types are:&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;Rayleigh Damping&lt;/b&gt; which is also known as &lt;i&gt;proportional viscous damping&lt;/i&gt;. This model assumes that the damping is proportional to the vibrating velocity.&lt;/p&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;Hysteretic Damping&lt;/b&gt;, also known as &lt;i&gt;structural damping&lt;/i&gt;. Here the damping is assumed to be proportional to the displacement.&lt;/p&gt;&lt;/ul&gt;&lt;br&gt;&lt;a href&#x3D; https://www.simscale.com/docs/simulation-setup/materials/damping/&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;. 
    /// </summary>
    [DataContract]
    public partial class RayleighDamping : OneOfLinearElasticMaterialBehaviorDamping, IEquatable<RayleighDamping>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RayleighDamping" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RayleighDamping() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RayleighDamping" /> class.
        /// </summary>
        /// <param name="type">&lt;p&gt;Choose if damping effects should be considered. The supported damping types are:&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;Rayleigh Damping&lt;/b&gt; which is also known as &lt;i&gt;proportional viscous damping&lt;/i&gt;. This model assumes that the damping is proportional to the vibrating velocity.&lt;/p&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;Hysteretic Damping&lt;/b&gt;, also known as &lt;i&gt;structural damping&lt;/i&gt;. Here the damping is assumed to be proportional to the displacement.&lt;/p&gt;&lt;/ul&gt;&lt;br&gt;&lt;a href&#x3D; https://www.simscale.com/docs/simulation-setup/materials/damping/&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.   Schema name: RayleighDamping (required) (default to &quot;RAYLEIGH&quot;).</param>
        /// <param name="stiffnessProportionalCoefficient">stiffnessProportionalCoefficient.</param>
        /// <param name="massProportionalCoefficient">massProportionalCoefficient.</param>
        public RayleighDamping(string type = "RAYLEIGH", DimensionalTime stiffnessProportionalCoefficient = default(DimensionalTime), DimensionalFrequency massProportionalCoefficient = default(DimensionalFrequency))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for RayleighDamping and cannot be null");
            this.StiffnessProportionalCoefficient = stiffnessProportionalCoefficient;
            this.MassProportionalCoefficient = massProportionalCoefficient;
        }
        
        /// <summary>
        /// &lt;p&gt;Choose if damping effects should be considered. The supported damping types are:&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;Rayleigh Damping&lt;/b&gt; which is also known as &lt;i&gt;proportional viscous damping&lt;/i&gt;. This model assumes that the damping is proportional to the vibrating velocity.&lt;/p&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;Hysteretic Damping&lt;/b&gt;, also known as &lt;i&gt;structural damping&lt;/i&gt;. Here the damping is assumed to be proportional to the displacement.&lt;/p&gt;&lt;/ul&gt;&lt;br&gt;&lt;a href&#x3D; https://www.simscale.com/docs/simulation-setup/materials/damping/&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.   Schema name: RayleighDamping
        /// </summary>
        /// <value>&lt;p&gt;Choose if damping effects should be considered. The supported damping types are:&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;Rayleigh Damping&lt;/b&gt; which is also known as &lt;i&gt;proportional viscous damping&lt;/i&gt;. This model assumes that the damping is proportional to the vibrating velocity.&lt;/p&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;Hysteretic Damping&lt;/b&gt;, also known as &lt;i&gt;structural damping&lt;/i&gt;. Here the damping is assumed to be proportional to the displacement.&lt;/p&gt;&lt;/ul&gt;&lt;br&gt;&lt;a href&#x3D; https://www.simscale.com/docs/simulation-setup/materials/damping/&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.   Schema name: RayleighDamping</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets StiffnessProportionalCoefficient
        /// </summary>
        [DataMember(Name="stiffnessProportionalCoefficient", EmitDefaultValue=false)]
        public DimensionalTime StiffnessProportionalCoefficient { get; set; }

        /// <summary>
        /// Gets or Sets MassProportionalCoefficient
        /// </summary>
        [DataMember(Name="massProportionalCoefficient", EmitDefaultValue=false)]
        public DimensionalFrequency MassProportionalCoefficient { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RayleighDamping {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  StiffnessProportionalCoefficient: ").Append(StiffnessProportionalCoefficient).Append("\n");
            sb.Append("  MassProportionalCoefficient: ").Append(MassProportionalCoefficient).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RayleighDamping);
        }

        /// <summary>
        /// Returns true if RayleighDamping instances are equal
        /// </summary>
        /// <param name="input">Instance of RayleighDamping to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RayleighDamping input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.StiffnessProportionalCoefficient == input.StiffnessProportionalCoefficient ||
                    (this.StiffnessProportionalCoefficient != null &&
                    this.StiffnessProportionalCoefficient.Equals(input.StiffnessProportionalCoefficient))
                ) && 
                (
                    this.MassProportionalCoefficient == input.MassProportionalCoefficient ||
                    (this.MassProportionalCoefficient != null &&
                    this.MassProportionalCoefficient.Equals(input.MassProportionalCoefficient))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.StiffnessProportionalCoefficient != null)
                    hashCode = hashCode * 59 + this.StiffnessProportionalCoefficient.GetHashCode();
                if (this.MassProportionalCoefficient != null)
                    hashCode = hashCode * 59 + this.MassProportionalCoefficient.GetHashCode();
                return hashCode;
            }
        }

    }

}
