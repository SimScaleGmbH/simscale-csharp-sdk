/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// ParameterWithValueGenerator
    /// </summary>
    [DataContract]
    public partial class ParameterWithValueGenerator : OneOfParameters, IEquatable<ParameterWithValueGenerator>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParameterWithValueGenerator" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ParameterWithValueGenerator() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ParameterWithValueGenerator" /> class.
        /// </summary>
        /// <param name="valueSource">Schema name: ParameterWithValueGenerator (required) (default to &quot;GENERATOR&quot;).</param>
        /// <param name="name">name.</param>
        /// <param name="path">path.</param>
        /// <param name="valueGenerator">valueGenerator.</param>
        public ParameterWithValueGenerator(string valueSource = "GENERATOR", string name = default(string), string path = default(string), NumericalSequenceParameterValueGenerator valueGenerator = default(NumericalSequenceParameterValueGenerator))
        {
            // to ensure "valueSource" is required (not null)
            this.ValueSource = valueSource ?? throw new ArgumentNullException("valueSource is a required property for ParameterWithValueGenerator and cannot be null");
            this.Name = name;
            this.Path = path;
            this.ValueGenerator = valueGenerator;
        }
        
        /// <summary>
        /// Schema name: ParameterWithValueGenerator
        /// </summary>
        /// <value>Schema name: ParameterWithValueGenerator</value>
        [DataMember(Name="valueSource", EmitDefaultValue=false)]
        public string ValueSource { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets ValueGenerator
        /// </summary>
        [DataMember(Name="valueGenerator", EmitDefaultValue=false)]
        public NumericalSequenceParameterValueGenerator ValueGenerator { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ParameterWithValueGenerator {\n");
            sb.Append("  ValueSource: ").Append(ValueSource).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  ValueGenerator: ").Append(ValueGenerator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ParameterWithValueGenerator);
        }

        /// <summary>
        /// Returns true if ParameterWithValueGenerator instances are equal
        /// </summary>
        /// <param name="input">Instance of ParameterWithValueGenerator to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParameterWithValueGenerator input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ValueSource == input.ValueSource ||
                    (this.ValueSource != null &&
                    this.ValueSource.Equals(input.ValueSource))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.ValueGenerator == input.ValueGenerator ||
                    (this.ValueGenerator != null &&
                    this.ValueGenerator.Equals(input.ValueGenerator))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ValueSource != null)
                    hashCode = hashCode * 59 + this.ValueSource.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.ValueGenerator != null)
                    hashCode = hashCode * 59 + this.ValueGenerator.GetHashCode();
                return hashCode;
            }
        }

    }

}
