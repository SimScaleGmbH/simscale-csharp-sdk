/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// This boundary condition allows the user to choose conditions for each physical variable separately. It provides full flexibility over the choice of boundary conditions to make advanced customization possible.
    /// </summary>
    [DataContract]
    public partial class CustomFluidBC : OneOfCompressibleBoundaryConditions, OneOfConjugateHeatTransferBoundaryConditions, OneOfConvectiveHeatTransferBoundaryConditions, OneOfIncompressibleBoundaryConditions, OneOfMultiphaseBoundaryConditions, IEquatable<CustomFluidBC>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomFluidBC" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomFluidBC() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomFluidBC" /> class.
        /// </summary>
        /// <param name="type">This boundary condition allows the user to choose conditions for each physical variable separately. It provides full flexibility over the choice of boundary conditions to make advanced customization possible.  Schema name: CustomFluidBC (required) (default to &quot;CUSTOM_V37&quot;).</param>
        /// <param name="name">name.</param>
        /// <param name="velocity">velocity.</param>
        /// <param name="pressure">pressure.</param>
        /// <param name="pressureRgh">pressureRgh.</param>
        /// <param name="gaugePressure">gaugePressure.</param>
        /// <param name="gaugePressureRgh">gaugePressureRgh.</param>
        /// <param name="temperature">temperature.</param>
        /// <param name="turbulentKineticEnergy">turbulentKineticEnergy.</param>
        /// <param name="omegaDissipationRate">omegaDissipationRate.</param>
        /// <param name="epsilonDissipationRate">epsilonDissipationRate.</param>
        /// <param name="eddyViscosity">eddyViscosity.</param>
        /// <param name="eddyViscosityCompressible">eddyViscosityCompressible.</param>
        /// <param name="nuTilda">nuTilda.</param>
        /// <param name="turbulentThermalDiffusivity">turbulentThermalDiffusivity.</param>
        /// <param name="turbulentThermalDiffusivityCompressible">turbulentThermalDiffusivityCompressible.</param>
        /// <param name="turbulentDynamicViscosity">turbulentDynamicViscosity.</param>
        /// <param name="passiveScalars">Please choose a boundary condition for passive scalar (T)..</param>
        /// <param name="phaseFraction">phaseFraction.</param>
        /// <param name="netRadiativeHeatFlux">netRadiativeHeatFlux.</param>
        /// <param name="topologicalReference">topologicalReference.</param>
        public CustomFluidBC(string type = "CUSTOM_V37", string name = default(string), OneOfCustomFluidBCVelocity velocity = default(OneOfCustomFluidBCVelocity), OneOfCustomFluidBCPressure pressure = default(OneOfCustomFluidBCPressure), OneOfCustomFluidBCPressureRgh pressureRgh = default(OneOfCustomFluidBCPressureRgh), OneOfCustomFluidBCGaugePressure gaugePressure = default(OneOfCustomFluidBCGaugePressure), OneOfCustomFluidBCGaugePressureRgh gaugePressureRgh = default(OneOfCustomFluidBCGaugePressureRgh), OneOfCustomFluidBCTemperature temperature = default(OneOfCustomFluidBCTemperature), OneOfCustomFluidBCTurbulentKineticEnergy turbulentKineticEnergy = default(OneOfCustomFluidBCTurbulentKineticEnergy), OneOfCustomFluidBCOmegaDissipationRate omegaDissipationRate = default(OneOfCustomFluidBCOmegaDissipationRate), OneOfCustomFluidBCEpsilonDissipationRate epsilonDissipationRate = default(OneOfCustomFluidBCEpsilonDissipationRate), OneOfCustomFluidBCEddyViscosity eddyViscosity = default(OneOfCustomFluidBCEddyViscosity), OneOfCustomFluidBCEddyViscosityCompressible eddyViscosityCompressible = default(OneOfCustomFluidBCEddyViscosityCompressible), OneOfCustomFluidBCNuTilda nuTilda = default(OneOfCustomFluidBCNuTilda), OneOfCustomFluidBCTurbulentThermalDiffusivity turbulentThermalDiffusivity = default(OneOfCustomFluidBCTurbulentThermalDiffusivity), OneOfCustomFluidBCTurbulentThermalDiffusivityCompressible turbulentThermalDiffusivityCompressible = default(OneOfCustomFluidBCTurbulentThermalDiffusivityCompressible), OneOfCustomFluidBCTurbulentDynamicViscosity turbulentDynamicViscosity = default(OneOfCustomFluidBCTurbulentDynamicViscosity), List<OneOfCustomFluidBCPassiveScalars> passiveScalars = default(List<OneOfCustomFluidBCPassiveScalars>), OneOfCustomFluidBCPhaseFraction phaseFraction = default(OneOfCustomFluidBCPhaseFraction), OneOfCustomFluidBCNetRadiativeHeatFlux netRadiativeHeatFlux = default(OneOfCustomFluidBCNetRadiativeHeatFlux), TopologicalReference topologicalReference = default(TopologicalReference))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for CustomFluidBC and cannot be null");
            this.Name = name;
            this.Velocity = velocity;
            this.Pressure = pressure;
            this.PressureRgh = pressureRgh;
            this.GaugePressure = gaugePressure;
            this.GaugePressureRgh = gaugePressureRgh;
            this.Temperature = temperature;
            this.TurbulentKineticEnergy = turbulentKineticEnergy;
            this.OmegaDissipationRate = omegaDissipationRate;
            this.EpsilonDissipationRate = epsilonDissipationRate;
            this.EddyViscosity = eddyViscosity;
            this.EddyViscosityCompressible = eddyViscosityCompressible;
            this.NuTilda = nuTilda;
            this.TurbulentThermalDiffusivity = turbulentThermalDiffusivity;
            this.TurbulentThermalDiffusivityCompressible = turbulentThermalDiffusivityCompressible;
            this.TurbulentDynamicViscosity = turbulentDynamicViscosity;
            this.PassiveScalars = passiveScalars;
            this.PhaseFraction = phaseFraction;
            this.NetRadiativeHeatFlux = netRadiativeHeatFlux;
            this.TopologicalReference = topologicalReference;
        }
        
        /// <summary>
        /// This boundary condition allows the user to choose conditions for each physical variable separately. It provides full flexibility over the choice of boundary conditions to make advanced customization possible.  Schema name: CustomFluidBC
        /// </summary>
        /// <value>This boundary condition allows the user to choose conditions for each physical variable separately. It provides full flexibility over the choice of boundary conditions to make advanced customization possible.  Schema name: CustomFluidBC</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Velocity
        /// </summary>
        [DataMember(Name="velocity", EmitDefaultValue=false)]
        public OneOfCustomFluidBCVelocity Velocity { get; set; }

        /// <summary>
        /// Gets or Sets Pressure
        /// </summary>
        [DataMember(Name="pressure", EmitDefaultValue=false)]
        public OneOfCustomFluidBCPressure Pressure { get; set; }

        /// <summary>
        /// Gets or Sets PressureRgh
        /// </summary>
        [DataMember(Name="pressureRgh", EmitDefaultValue=false)]
        public OneOfCustomFluidBCPressureRgh PressureRgh { get; set; }

        /// <summary>
        /// Gets or Sets GaugePressure
        /// </summary>
        [DataMember(Name="gaugePressure", EmitDefaultValue=false)]
        public OneOfCustomFluidBCGaugePressure GaugePressure { get; set; }

        /// <summary>
        /// Gets or Sets GaugePressureRgh
        /// </summary>
        [DataMember(Name="gaugePressureRgh", EmitDefaultValue=false)]
        public OneOfCustomFluidBCGaugePressureRgh GaugePressureRgh { get; set; }

        /// <summary>
        /// Gets or Sets Temperature
        /// </summary>
        [DataMember(Name="temperature", EmitDefaultValue=false)]
        public OneOfCustomFluidBCTemperature Temperature { get; set; }

        /// <summary>
        /// Gets or Sets TurbulentKineticEnergy
        /// </summary>
        [DataMember(Name="turbulentKineticEnergy", EmitDefaultValue=false)]
        public OneOfCustomFluidBCTurbulentKineticEnergy TurbulentKineticEnergy { get; set; }

        /// <summary>
        /// Gets or Sets OmegaDissipationRate
        /// </summary>
        [DataMember(Name="omegaDissipationRate", EmitDefaultValue=false)]
        public OneOfCustomFluidBCOmegaDissipationRate OmegaDissipationRate { get; set; }

        /// <summary>
        /// Gets or Sets EpsilonDissipationRate
        /// </summary>
        [DataMember(Name="epsilonDissipationRate", EmitDefaultValue=false)]
        public OneOfCustomFluidBCEpsilonDissipationRate EpsilonDissipationRate { get; set; }

        /// <summary>
        /// Gets or Sets EddyViscosity
        /// </summary>
        [DataMember(Name="eddyViscosity", EmitDefaultValue=false)]
        public OneOfCustomFluidBCEddyViscosity EddyViscosity { get; set; }

        /// <summary>
        /// Gets or Sets EddyViscosityCompressible
        /// </summary>
        [DataMember(Name="eddyViscosityCompressible", EmitDefaultValue=false)]
        public OneOfCustomFluidBCEddyViscosityCompressible EddyViscosityCompressible { get; set; }

        /// <summary>
        /// Gets or Sets NuTilda
        /// </summary>
        [DataMember(Name="nuTilda", EmitDefaultValue=false)]
        public OneOfCustomFluidBCNuTilda NuTilda { get; set; }

        /// <summary>
        /// Gets or Sets TurbulentThermalDiffusivity
        /// </summary>
        [DataMember(Name="turbulentThermalDiffusivity", EmitDefaultValue=false)]
        public OneOfCustomFluidBCTurbulentThermalDiffusivity TurbulentThermalDiffusivity { get; set; }

        /// <summary>
        /// Gets or Sets TurbulentThermalDiffusivityCompressible
        /// </summary>
        [DataMember(Name="turbulentThermalDiffusivityCompressible", EmitDefaultValue=false)]
        public OneOfCustomFluidBCTurbulentThermalDiffusivityCompressible TurbulentThermalDiffusivityCompressible { get; set; }

        /// <summary>
        /// Gets or Sets TurbulentDynamicViscosity
        /// </summary>
        [DataMember(Name="turbulentDynamicViscosity", EmitDefaultValue=false)]
        public OneOfCustomFluidBCTurbulentDynamicViscosity TurbulentDynamicViscosity { get; set; }

        /// <summary>
        /// Please choose a boundary condition for passive scalar (T).
        /// </summary>
        /// <value>Please choose a boundary condition for passive scalar (T).</value>
        [DataMember(Name="passiveScalars", EmitDefaultValue=false)]
        public List<OneOfCustomFluidBCPassiveScalars> PassiveScalars { get; set; }

        /// <summary>
        /// Gets or Sets PhaseFraction
        /// </summary>
        [DataMember(Name="phaseFraction", EmitDefaultValue=false)]
        public OneOfCustomFluidBCPhaseFraction PhaseFraction { get; set; }

        /// <summary>
        /// Gets or Sets NetRadiativeHeatFlux
        /// </summary>
        [DataMember(Name="netRadiativeHeatFlux", EmitDefaultValue=false)]
        public OneOfCustomFluidBCNetRadiativeHeatFlux NetRadiativeHeatFlux { get; set; }

        /// <summary>
        /// Gets or Sets TopologicalReference
        /// </summary>
        [DataMember(Name="topologicalReference", EmitDefaultValue=false)]
        public TopologicalReference TopologicalReference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomFluidBC {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Velocity: ").Append(Velocity).Append("\n");
            sb.Append("  Pressure: ").Append(Pressure).Append("\n");
            sb.Append("  PressureRgh: ").Append(PressureRgh).Append("\n");
            sb.Append("  GaugePressure: ").Append(GaugePressure).Append("\n");
            sb.Append("  GaugePressureRgh: ").Append(GaugePressureRgh).Append("\n");
            sb.Append("  Temperature: ").Append(Temperature).Append("\n");
            sb.Append("  TurbulentKineticEnergy: ").Append(TurbulentKineticEnergy).Append("\n");
            sb.Append("  OmegaDissipationRate: ").Append(OmegaDissipationRate).Append("\n");
            sb.Append("  EpsilonDissipationRate: ").Append(EpsilonDissipationRate).Append("\n");
            sb.Append("  EddyViscosity: ").Append(EddyViscosity).Append("\n");
            sb.Append("  EddyViscosityCompressible: ").Append(EddyViscosityCompressible).Append("\n");
            sb.Append("  NuTilda: ").Append(NuTilda).Append("\n");
            sb.Append("  TurbulentThermalDiffusivity: ").Append(TurbulentThermalDiffusivity).Append("\n");
            sb.Append("  TurbulentThermalDiffusivityCompressible: ").Append(TurbulentThermalDiffusivityCompressible).Append("\n");
            sb.Append("  TurbulentDynamicViscosity: ").Append(TurbulentDynamicViscosity).Append("\n");
            sb.Append("  PassiveScalars: ").Append(PassiveScalars).Append("\n");
            sb.Append("  PhaseFraction: ").Append(PhaseFraction).Append("\n");
            sb.Append("  NetRadiativeHeatFlux: ").Append(NetRadiativeHeatFlux).Append("\n");
            sb.Append("  TopologicalReference: ").Append(TopologicalReference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomFluidBC);
        }

        /// <summary>
        /// Returns true if CustomFluidBC instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomFluidBC to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomFluidBC input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Velocity == input.Velocity ||
                    (this.Velocity != null &&
                    this.Velocity.Equals(input.Velocity))
                ) && 
                (
                    this.Pressure == input.Pressure ||
                    (this.Pressure != null &&
                    this.Pressure.Equals(input.Pressure))
                ) && 
                (
                    this.PressureRgh == input.PressureRgh ||
                    (this.PressureRgh != null &&
                    this.PressureRgh.Equals(input.PressureRgh))
                ) && 
                (
                    this.GaugePressure == input.GaugePressure ||
                    (this.GaugePressure != null &&
                    this.GaugePressure.Equals(input.GaugePressure))
                ) && 
                (
                    this.GaugePressureRgh == input.GaugePressureRgh ||
                    (this.GaugePressureRgh != null &&
                    this.GaugePressureRgh.Equals(input.GaugePressureRgh))
                ) && 
                (
                    this.Temperature == input.Temperature ||
                    (this.Temperature != null &&
                    this.Temperature.Equals(input.Temperature))
                ) && 
                (
                    this.TurbulentKineticEnergy == input.TurbulentKineticEnergy ||
                    (this.TurbulentKineticEnergy != null &&
                    this.TurbulentKineticEnergy.Equals(input.TurbulentKineticEnergy))
                ) && 
                (
                    this.OmegaDissipationRate == input.OmegaDissipationRate ||
                    (this.OmegaDissipationRate != null &&
                    this.OmegaDissipationRate.Equals(input.OmegaDissipationRate))
                ) && 
                (
                    this.EpsilonDissipationRate == input.EpsilonDissipationRate ||
                    (this.EpsilonDissipationRate != null &&
                    this.EpsilonDissipationRate.Equals(input.EpsilonDissipationRate))
                ) && 
                (
                    this.EddyViscosity == input.EddyViscosity ||
                    (this.EddyViscosity != null &&
                    this.EddyViscosity.Equals(input.EddyViscosity))
                ) && 
                (
                    this.EddyViscosityCompressible == input.EddyViscosityCompressible ||
                    (this.EddyViscosityCompressible != null &&
                    this.EddyViscosityCompressible.Equals(input.EddyViscosityCompressible))
                ) && 
                (
                    this.NuTilda == input.NuTilda ||
                    (this.NuTilda != null &&
                    this.NuTilda.Equals(input.NuTilda))
                ) && 
                (
                    this.TurbulentThermalDiffusivity == input.TurbulentThermalDiffusivity ||
                    (this.TurbulentThermalDiffusivity != null &&
                    this.TurbulentThermalDiffusivity.Equals(input.TurbulentThermalDiffusivity))
                ) && 
                (
                    this.TurbulentThermalDiffusivityCompressible == input.TurbulentThermalDiffusivityCompressible ||
                    (this.TurbulentThermalDiffusivityCompressible != null &&
                    this.TurbulentThermalDiffusivityCompressible.Equals(input.TurbulentThermalDiffusivityCompressible))
                ) && 
                (
                    this.TurbulentDynamicViscosity == input.TurbulentDynamicViscosity ||
                    (this.TurbulentDynamicViscosity != null &&
                    this.TurbulentDynamicViscosity.Equals(input.TurbulentDynamicViscosity))
                ) && 
                (
                    this.PassiveScalars == input.PassiveScalars ||
                    this.PassiveScalars != null &&
                    input.PassiveScalars != null &&
                    this.PassiveScalars.SequenceEqual(input.PassiveScalars)
                ) && 
                (
                    this.PhaseFraction == input.PhaseFraction ||
                    (this.PhaseFraction != null &&
                    this.PhaseFraction.Equals(input.PhaseFraction))
                ) && 
                (
                    this.NetRadiativeHeatFlux == input.NetRadiativeHeatFlux ||
                    (this.NetRadiativeHeatFlux != null &&
                    this.NetRadiativeHeatFlux.Equals(input.NetRadiativeHeatFlux))
                ) && 
                (
                    this.TopologicalReference == input.TopologicalReference ||
                    (this.TopologicalReference != null &&
                    this.TopologicalReference.Equals(input.TopologicalReference))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Velocity != null)
                    hashCode = hashCode * 59 + this.Velocity.GetHashCode();
                if (this.Pressure != null)
                    hashCode = hashCode * 59 + this.Pressure.GetHashCode();
                if (this.PressureRgh != null)
                    hashCode = hashCode * 59 + this.PressureRgh.GetHashCode();
                if (this.GaugePressure != null)
                    hashCode = hashCode * 59 + this.GaugePressure.GetHashCode();
                if (this.GaugePressureRgh != null)
                    hashCode = hashCode * 59 + this.GaugePressureRgh.GetHashCode();
                if (this.Temperature != null)
                    hashCode = hashCode * 59 + this.Temperature.GetHashCode();
                if (this.TurbulentKineticEnergy != null)
                    hashCode = hashCode * 59 + this.TurbulentKineticEnergy.GetHashCode();
                if (this.OmegaDissipationRate != null)
                    hashCode = hashCode * 59 + this.OmegaDissipationRate.GetHashCode();
                if (this.EpsilonDissipationRate != null)
                    hashCode = hashCode * 59 + this.EpsilonDissipationRate.GetHashCode();
                if (this.EddyViscosity != null)
                    hashCode = hashCode * 59 + this.EddyViscosity.GetHashCode();
                if (this.EddyViscosityCompressible != null)
                    hashCode = hashCode * 59 + this.EddyViscosityCompressible.GetHashCode();
                if (this.NuTilda != null)
                    hashCode = hashCode * 59 + this.NuTilda.GetHashCode();
                if (this.TurbulentThermalDiffusivity != null)
                    hashCode = hashCode * 59 + this.TurbulentThermalDiffusivity.GetHashCode();
                if (this.TurbulentThermalDiffusivityCompressible != null)
                    hashCode = hashCode * 59 + this.TurbulentThermalDiffusivityCompressible.GetHashCode();
                if (this.TurbulentDynamicViscosity != null)
                    hashCode = hashCode * 59 + this.TurbulentDynamicViscosity.GetHashCode();
                if (this.PassiveScalars != null)
                    hashCode = hashCode * 59 + this.PassiveScalars.GetHashCode();
                if (this.PhaseFraction != null)
                    hashCode = hashCode * 59 + this.PhaseFraction.GetHashCode();
                if (this.NetRadiativeHeatFlux != null)
                    hashCode = hashCode * 59 + this.NetRadiativeHeatFlux.GetHashCode();
                if (this.TopologicalReference != null)
                    hashCode = hashCode * 59 + this.TopologicalReference.GetHashCode();
                return hashCode;
            }
        }

    }

}
