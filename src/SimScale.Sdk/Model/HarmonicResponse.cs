/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// HarmonicResponse
    /// </summary>
    [DataContract]
    public partial class HarmonicResponse : IEquatable<HarmonicResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HarmonicResponse" /> class.
        /// </summary>
        /// <param name="solver">solver.</param>
        public HarmonicResponse(OneOfHarmonicResponseSolver solver = default(OneOfHarmonicResponseSolver))
        {
            this.Solver = solver;
        }
        
        /// <summary>
        /// Gets or Sets Solver
        /// </summary>
        [DataMember(Name="solver", EmitDefaultValue=false)]
        public OneOfHarmonicResponseSolver Solver { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HarmonicResponse {\n");
            sb.Append("  Solver: ").Append(Solver).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HarmonicResponse);
        }

        /// <summary>
        /// Returns true if HarmonicResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of HarmonicResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HarmonicResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Solver == input.Solver ||
                    (this.Solver != null &&
                    this.Solver.Equals(input.Solver))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Solver != null)
                    hashCode = hashCode * 59 + this.Solver.GetHashCode();
                return hashCode;
            }
        }

    }

}
