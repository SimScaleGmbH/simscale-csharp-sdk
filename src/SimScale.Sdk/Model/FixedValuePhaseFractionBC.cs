/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// FixedValuePhaseFractionBC
    /// </summary>
    [DataContract]
    public partial class FixedValuePhaseFractionBC : IEquatable<FixedValuePhaseFractionBC>
    {
        /// <summary>
        /// Defines AssociatedPhase
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AssociatedPhaseEnum
        {
            /// <summary>
            /// Enum _0 for value: PHASE_0
            /// </summary>
            [EnumMember(Value = "PHASE_0")]
            _0 = 1,

            /// <summary>
            /// Enum _1 for value: PHASE_1
            /// </summary>
            [EnumMember(Value = "PHASE_1")]
            _1 = 2

        }

        /// <summary>
        /// Gets or Sets AssociatedPhase
        /// </summary>
        [DataMember(Name="associatedPhase", EmitDefaultValue=false)]
        public AssociatedPhaseEnum? AssociatedPhase { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FixedValuePhaseFractionBC" /> class.
        /// </summary>
        /// <param name="associatedPhase">associatedPhase (default to AssociatedPhaseEnum._0).</param>
        /// <param name="fractionValue">fractionValue (default to 0M).</param>
        public FixedValuePhaseFractionBC(AssociatedPhaseEnum? associatedPhase = default(AssociatedPhaseEnum?), decimal? fractionValue = default(decimal?))
        {
            this.AssociatedPhase = associatedPhase;
            this.FractionValue = fractionValue;
        }
        
        /// <summary>
        /// Gets or Sets FractionValue
        /// </summary>
        [DataMember(Name="fractionValue", EmitDefaultValue=false)]
        public decimal? FractionValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FixedValuePhaseFractionBC {\n");
            sb.Append("  AssociatedPhase: ").Append(AssociatedPhase).Append("\n");
            sb.Append("  FractionValue: ").Append(FractionValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FixedValuePhaseFractionBC);
        }

        /// <summary>
        /// Returns true if FixedValuePhaseFractionBC instances are equal
        /// </summary>
        /// <param name="input">Instance of FixedValuePhaseFractionBC to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FixedValuePhaseFractionBC input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AssociatedPhase == input.AssociatedPhase ||
                    this.AssociatedPhase.Equals(input.AssociatedPhase)
                ) && 
                (
                    this.FractionValue == input.FractionValue ||
                    (this.FractionValue != null &&
                    this.FractionValue.Equals(input.FractionValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.AssociatedPhase.GetHashCode();
                if (this.FractionValue != null)
                    hashCode = hashCode * 59 + this.FractionValue.GetHashCode();
                return hashCode;
            }
        }

    }

}
