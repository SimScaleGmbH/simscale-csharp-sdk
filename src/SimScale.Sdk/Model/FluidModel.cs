/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// FluidModel
    /// </summary>
    [DataContract]
    public partial class FluidModel : IEquatable<FluidModel>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FluidModel" /> class.
        /// </summary>
        /// <param name="turbulentSchmidtNumber">turbulentSchmidtNumber (default to 0.7M).</param>
        /// <param name="diffusionCoefficients">diffusionCoefficients.</param>
        /// <param name="deltaCoefficient">deltaCoefficient.</param>
        /// <param name="gravity">gravity.</param>
        /// <param name="surfaceTension">surfaceTension.</param>
        public FluidModel(decimal? turbulentSchmidtNumber = default(decimal?), List<DimensionalKinematicViscosity> diffusionCoefficients = default(List<DimensionalKinematicViscosity>), OneOfFluidModelDeltaCoefficient deltaCoefficient = default(OneOfFluidModelDeltaCoefficient), DimensionalVectorAcceleration gravity = default(DimensionalVectorAcceleration), DimensionalSurfaceTension surfaceTension = default(DimensionalSurfaceTension))
        {
            this.TurbulentSchmidtNumber = turbulentSchmidtNumber;
            this.DiffusionCoefficients = diffusionCoefficients;
            this.DeltaCoefficient = deltaCoefficient;
            this.Gravity = gravity;
            this.SurfaceTension = surfaceTension;
        }
        
        /// <summary>
        /// Gets or Sets TurbulentSchmidtNumber
        /// </summary>
        [DataMember(Name="turbulentSchmidtNumber", EmitDefaultValue=false)]
        public decimal? TurbulentSchmidtNumber { get; set; }

        /// <summary>
        /// Gets or Sets DiffusionCoefficients
        /// </summary>
        [DataMember(Name="diffusionCoefficients", EmitDefaultValue=false)]
        public List<DimensionalKinematicViscosity> DiffusionCoefficients { get; set; }

        /// <summary>
        /// Gets or Sets DeltaCoefficient
        /// </summary>
        [DataMember(Name="deltaCoefficient", EmitDefaultValue=false)]
        public OneOfFluidModelDeltaCoefficient DeltaCoefficient { get; set; }

        /// <summary>
        /// Gets or Sets Gravity
        /// </summary>
        [DataMember(Name="gravity", EmitDefaultValue=false)]
        public DimensionalVectorAcceleration Gravity { get; set; }

        /// <summary>
        /// Gets or Sets SurfaceTension
        /// </summary>
        [DataMember(Name="surfaceTension", EmitDefaultValue=false)]
        public DimensionalSurfaceTension SurfaceTension { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FluidModel {\n");
            sb.Append("  TurbulentSchmidtNumber: ").Append(TurbulentSchmidtNumber).Append("\n");
            sb.Append("  DiffusionCoefficients: ").Append(DiffusionCoefficients).Append("\n");
            sb.Append("  DeltaCoefficient: ").Append(DeltaCoefficient).Append("\n");
            sb.Append("  Gravity: ").Append(Gravity).Append("\n");
            sb.Append("  SurfaceTension: ").Append(SurfaceTension).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FluidModel);
        }

        /// <summary>
        /// Returns true if FluidModel instances are equal
        /// </summary>
        /// <param name="input">Instance of FluidModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FluidModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TurbulentSchmidtNumber == input.TurbulentSchmidtNumber ||
                    (this.TurbulentSchmidtNumber != null &&
                    this.TurbulentSchmidtNumber.Equals(input.TurbulentSchmidtNumber))
                ) && 
                (
                    this.DiffusionCoefficients == input.DiffusionCoefficients ||
                    this.DiffusionCoefficients != null &&
                    input.DiffusionCoefficients != null &&
                    this.DiffusionCoefficients.SequenceEqual(input.DiffusionCoefficients)
                ) && 
                (
                    this.DeltaCoefficient == input.DeltaCoefficient ||
                    (this.DeltaCoefficient != null &&
                    this.DeltaCoefficient.Equals(input.DeltaCoefficient))
                ) && 
                (
                    this.Gravity == input.Gravity ||
                    (this.Gravity != null &&
                    this.Gravity.Equals(input.Gravity))
                ) && 
                (
                    this.SurfaceTension == input.SurfaceTension ||
                    (this.SurfaceTension != null &&
                    this.SurfaceTension.Equals(input.SurfaceTension))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TurbulentSchmidtNumber != null)
                    hashCode = hashCode * 59 + this.TurbulentSchmidtNumber.GetHashCode();
                if (this.DiffusionCoefficients != null)
                    hashCode = hashCode * 59 + this.DiffusionCoefficients.GetHashCode();
                if (this.DeltaCoefficient != null)
                    hashCode = hashCode * 59 + this.DeltaCoefficient.GetHashCode();
                if (this.Gravity != null)
                    hashCode = hashCode * 59 + this.Gravity.GetHashCode();
                if (this.SurfaceTension != null)
                    hashCode = hashCode * 59 + this.SurfaceTension.GetHashCode();
                return hashCode;
            }
        }

    }

}
