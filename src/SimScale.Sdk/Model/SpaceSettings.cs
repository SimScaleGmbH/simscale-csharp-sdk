/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// SpaceSettings
    /// </summary>
    [DataContract]
    public partial class SpaceSettings : IEquatable<SpaceSettings>
    {
        /// <summary>
        /// Gets or Sets SharingControl
        /// </summary>
        [DataMember(Name="sharingControl", EmitDefaultValue=false)]
        public SharingControl SharingControl { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SpaceSettings" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SpaceSettings() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SpaceSettings" /> class.
        /// </summary>
        /// <param name="sharingControl">sharingControl (required).</param>
        public SpaceSettings(SharingControl sharingControl = default(SharingControl))
        {
            this.SharingControl = sharingControl;
        }
        
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SpaceSettings {\n");
            sb.Append("  SharingControl: ").Append(SharingControl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SpaceSettings);
        }

        /// <summary>
        /// Returns true if SpaceSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of SpaceSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SpaceSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SharingControl == input.SharingControl ||
                    this.SharingControl.Equals(input.SharingControl)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.SharingControl.GetHashCode();
                return hashCode;
            }
        }

    }

}
