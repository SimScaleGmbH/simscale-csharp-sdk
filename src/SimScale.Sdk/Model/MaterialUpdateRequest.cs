/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// Material update request schema
    /// </summary>
    [DataContract]
    public partial class MaterialUpdateRequest : IEquatable<MaterialUpdateRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MaterialUpdateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MaterialUpdateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MaterialUpdateRequest" /> class.
        /// </summary>
        /// <param name="operations">operations (required).</param>
        /// <param name="interpolationParameters">Parameters taken into account when some material property values need to be interpolated. When this object is part of a request, the parameters will be taken into account during interpolation, while when it&#39;s part of the response, the parameters show the values which were used (if any) during the interpolation. Note that the values used during interpolation might differ from what is requested. .</param>
        public MaterialUpdateRequest(List<MaterialUpdateOperation> operations = default(List<MaterialUpdateOperation>), Dictionary<string, Object> interpolationParameters = default(Dictionary<string, Object>))
        {
            // to ensure "operations" is required (not null)
            this.Operations = operations ?? throw new ArgumentNullException("operations is a required property for MaterialUpdateRequest and cannot be null");
            this.InterpolationParameters = interpolationParameters;
        }
        
        /// <summary>
        /// Gets or Sets Operations
        /// </summary>
        [DataMember(Name="operations", EmitDefaultValue=false)]
        public List<MaterialUpdateOperation> Operations { get; set; }

        /// <summary>
        /// Parameters taken into account when some material property values need to be interpolated. When this object is part of a request, the parameters will be taken into account during interpolation, while when it&#39;s part of the response, the parameters show the values which were used (if any) during the interpolation. Note that the values used during interpolation might differ from what is requested. 
        /// </summary>
        /// <value>Parameters taken into account when some material property values need to be interpolated. When this object is part of a request, the parameters will be taken into account during interpolation, while when it&#39;s part of the response, the parameters show the values which were used (if any) during the interpolation. Note that the values used during interpolation might differ from what is requested. </value>
        [DataMember(Name="interpolationParameters", EmitDefaultValue=false)]
        public Dictionary<string, Object> InterpolationParameters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MaterialUpdateRequest {\n");
            sb.Append("  Operations: ").Append(Operations).Append("\n");
            sb.Append("  InterpolationParameters: ").Append(InterpolationParameters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MaterialUpdateRequest);
        }

        /// <summary>
        /// Returns true if MaterialUpdateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of MaterialUpdateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MaterialUpdateRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Operations == input.Operations ||
                    this.Operations != null &&
                    input.Operations != null &&
                    this.Operations.SequenceEqual(input.Operations)
                ) && 
                (
                    this.InterpolationParameters == input.InterpolationParameters ||
                    this.InterpolationParameters != null &&
                    input.InterpolationParameters != null &&
                    this.InterpolationParameters.SequenceEqual(input.InterpolationParameters)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Operations != null)
                    hashCode = hashCode * 59 + this.Operations.GetHashCode();
                if (this.InterpolationParameters != null)
                    hashCode = hashCode * 59 + this.InterpolationParameters.GetHashCode();
                return hashCode;
            }
        }

    }

}
