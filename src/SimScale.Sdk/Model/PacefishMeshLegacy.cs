/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// &lt;p&gt;Choose between &lt;i&gt;Automatic&lt;/i&gt; and &lt;i&gt;Manual&lt;/i&gt; mesh settings. &lt;a href&#x3D;&#39;https://www.simscale.com/docs/analysis-types/incompressible-lbm/#mesh&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; Mesh fineness impacts the accuracy of your results as well as computing time and result size. A finer mesh will be more demanding in terms of machine size and memory but lead to more accurate results in most cases.&lt;/p&gt;
    /// </summary>
    [DataContract]
    public partial class PacefishMeshLegacy : OneOfIncompressiblePacefishMeshSettingsNew, IEquatable<PacefishMeshLegacy>
    {
        /// <summary>
        /// Defines Fineness
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FinenessEnum
        {
            /// <summary>
            /// Enum VERYCOARSE for value: VERY_COARSE
            /// </summary>
            [EnumMember(Value = "VERY_COARSE")]
            VERYCOARSE = 1,

            /// <summary>
            /// Enum COARSE for value: COARSE
            /// </summary>
            [EnumMember(Value = "COARSE")]
            COARSE = 2,

            /// <summary>
            /// Enum MODERATE for value: MODERATE
            /// </summary>
            [EnumMember(Value = "MODERATE")]
            MODERATE = 3,

            /// <summary>
            /// Enum FINE for value: FINE
            /// </summary>
            [EnumMember(Value = "FINE")]
            FINE = 4,

            /// <summary>
            /// Enum VERYFINE for value: VERY_FINE
            /// </summary>
            [EnumMember(Value = "VERY_FINE")]
            VERYFINE = 5

        }

        /// <summary>
        /// Gets or Sets Fineness
        /// </summary>
        [DataMember(Name="fineness", EmitDefaultValue=false)]
        public FinenessEnum? Fineness { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PacefishMeshLegacy" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PacefishMeshLegacy() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PacefishMeshLegacy" /> class.
        /// </summary>
        /// <param name="type">&lt;p&gt;Choose between &lt;i&gt;Automatic&lt;/i&gt; and &lt;i&gt;Manual&lt;/i&gt; mesh settings. &lt;a href&#x3D;&#39;https://www.simscale.com/docs/analysis-types/incompressible-lbm/#mesh&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; Mesh fineness impacts the accuracy of your results as well as computing time and result size. A finer mesh will be more demanding in terms of machine size and memory but lead to more accurate results in most cases.&lt;/p&gt;  Schema name: PacefishMeshLegacy (required) (default to &quot;PACEFISH_MESH_LEGACY&quot;).</param>
        /// <param name="fineness">fineness (default to FinenessEnum.COARSE).</param>
        /// <param name="referenceLength">referenceLength.</param>
        /// <param name="reynoldsScalingType">reynoldsScalingType.</param>
        /// <param name="refinements">refinements.</param>
        public PacefishMeshLegacy(string type = "PACEFISH_MESH_LEGACY", FinenessEnum? fineness = default(FinenessEnum?), DimensionalLength referenceLength = default(DimensionalLength), ManualReynoldsScaling reynoldsScalingType = default(ManualReynoldsScaling), List<OneOfPacefishMeshLegacyRefinements> refinements = default(List<OneOfPacefishMeshLegacyRefinements>))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for PacefishMeshLegacy and cannot be null");
            this.Fineness = fineness;
            this.ReferenceLength = referenceLength;
            this.ReynoldsScalingType = reynoldsScalingType;
            this.Refinements = refinements;
        }
        
        /// <summary>
        /// &lt;p&gt;Choose between &lt;i&gt;Automatic&lt;/i&gt; and &lt;i&gt;Manual&lt;/i&gt; mesh settings. &lt;a href&#x3D;&#39;https://www.simscale.com/docs/analysis-types/incompressible-lbm/#mesh&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; Mesh fineness impacts the accuracy of your results as well as computing time and result size. A finer mesh will be more demanding in terms of machine size and memory but lead to more accurate results in most cases.&lt;/p&gt;  Schema name: PacefishMeshLegacy
        /// </summary>
        /// <value>&lt;p&gt;Choose between &lt;i&gt;Automatic&lt;/i&gt; and &lt;i&gt;Manual&lt;/i&gt; mesh settings. &lt;a href&#x3D;&#39;https://www.simscale.com/docs/analysis-types/incompressible-lbm/#mesh&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; Mesh fineness impacts the accuracy of your results as well as computing time and result size. A finer mesh will be more demanding in terms of machine size and memory but lead to more accurate results in most cases.&lt;/p&gt;  Schema name: PacefishMeshLegacy</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceLength
        /// </summary>
        [DataMember(Name="referenceLength", EmitDefaultValue=false)]
        public DimensionalLength ReferenceLength { get; set; }

        /// <summary>
        /// Gets or Sets ReynoldsScalingType
        /// </summary>
        [DataMember(Name="reynoldsScalingType", EmitDefaultValue=false)]
        public ManualReynoldsScaling ReynoldsScalingType { get; set; }

        /// <summary>
        /// Gets or Sets Refinements
        /// </summary>
        [DataMember(Name="refinements", EmitDefaultValue=false)]
        public List<OneOfPacefishMeshLegacyRefinements> Refinements { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PacefishMeshLegacy {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Fineness: ").Append(Fineness).Append("\n");
            sb.Append("  ReferenceLength: ").Append(ReferenceLength).Append("\n");
            sb.Append("  ReynoldsScalingType: ").Append(ReynoldsScalingType).Append("\n");
            sb.Append("  Refinements: ").Append(Refinements).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PacefishMeshLegacy);
        }

        /// <summary>
        /// Returns true if PacefishMeshLegacy instances are equal
        /// </summary>
        /// <param name="input">Instance of PacefishMeshLegacy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PacefishMeshLegacy input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Fineness == input.Fineness ||
                    this.Fineness.Equals(input.Fineness)
                ) && 
                (
                    this.ReferenceLength == input.ReferenceLength ||
                    (this.ReferenceLength != null &&
                    this.ReferenceLength.Equals(input.ReferenceLength))
                ) && 
                (
                    this.ReynoldsScalingType == input.ReynoldsScalingType ||
                    (this.ReynoldsScalingType != null &&
                    this.ReynoldsScalingType.Equals(input.ReynoldsScalingType))
                ) && 
                (
                    this.Refinements == input.Refinements ||
                    this.Refinements != null &&
                    input.Refinements != null &&
                    this.Refinements.SequenceEqual(input.Refinements)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                hashCode = hashCode * 59 + this.Fineness.GetHashCode();
                if (this.ReferenceLength != null)
                    hashCode = hashCode * 59 + this.ReferenceLength.GetHashCode();
                if (this.ReynoldsScalingType != null)
                    hashCode = hashCode * 59 + this.ReynoldsScalingType.GetHashCode();
                if (this.Refinements != null)
                    hashCode = hashCode * 59 + this.Refinements.GetHashCode();
                return hashCode;
            }
        }

    }

}
