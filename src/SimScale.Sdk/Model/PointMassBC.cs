/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// &lt;p&gt;Define a &lt;b&gt;Point mass&lt;/b&gt; boundary condition in order to insert an additional mass on a specific location of the active model.&lt;/p&gt;
    /// </summary>
    [DataContract]
    public partial class PointMassBC : OneOfDynamicAnalysisBoundaryConditions, OneOfFrequencyAnalysisBoundaryConditions, OneOfHarmonicAnalysisBoundaryConditions, OneOfStaticAnalysisBoundaryConditions, OneOfThermalMechanicalBoundaryConditions, IEquatable<PointMassBC>
    {
        /// <summary>
        /// &lt;p&gt;Choose the deformation behavior of the entity which the point mass is connected to. If &lt;b&gt;deformable&lt;/b&gt; is selected, the entity is allowed to deform, selecting &lt;b&gt;undeformable&lt;/b&gt; leads to a rigid entity.&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;Choose the deformation behavior of the entity which the point mass is connected to. If &lt;b&gt;deformable&lt;/b&gt; is selected, the entity is allowed to deform, selecting &lt;b&gt;undeformable&lt;/b&gt; leads to a rigid entity.&lt;/p&gt;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DeformationBehaviorEnum
        {
            /// <summary>
            /// Enum DEFORMABLE for value: DEFORMABLE
            /// </summary>
            [EnumMember(Value = "DEFORMABLE")]
            DEFORMABLE = 1,

            /// <summary>
            /// Enum UNDEFORMABLE for value: UNDEFORMABLE
            /// </summary>
            [EnumMember(Value = "UNDEFORMABLE")]
            UNDEFORMABLE = 2

        }

        /// <summary>
        /// &lt;p&gt;Choose the deformation behavior of the entity which the point mass is connected to. If &lt;b&gt;deformable&lt;/b&gt; is selected, the entity is allowed to deform, selecting &lt;b&gt;undeformable&lt;/b&gt; leads to a rigid entity.&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;Choose the deformation behavior of the entity which the point mass is connected to. If &lt;b&gt;deformable&lt;/b&gt; is selected, the entity is allowed to deform, selecting &lt;b&gt;undeformable&lt;/b&gt; leads to a rigid entity.&lt;/p&gt;</value>
        [DataMember(Name="deformationBehavior", EmitDefaultValue=false)]
        public DeformationBehaviorEnum? DeformationBehavior { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PointMassBC" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PointMassBC() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PointMassBC" /> class.
        /// </summary>
        /// <param name="type">&lt;p&gt;Define a &lt;b&gt;Point mass&lt;/b&gt; boundary condition in order to insert an additional mass on a specific location of the active model.&lt;/p&gt;  Schema name: PointMassBC (required) (default to &quot;POINT_MASS&quot;).</param>
        /// <param name="name">name.</param>
        /// <param name="mass">mass.</param>
        /// <param name="massMomentOfInertia">massMomentOfInertia.</param>
        /// <param name="externalPoint">externalPoint.</param>
        /// <param name="deformationBehavior">&lt;p&gt;Choose the deformation behavior of the entity which the point mass is connected to. If &lt;b&gt;deformable&lt;/b&gt; is selected, the entity is allowed to deform, selecting &lt;b&gt;undeformable&lt;/b&gt; leads to a rigid entity.&lt;/p&gt; (default to DeformationBehaviorEnum.DEFORMABLE).</param>
        /// <param name="enableSearchRadius">enableSearchRadius (default to false).</param>
        /// <param name="searchRadius">searchRadius.</param>
        /// <param name="topologicalReference">topologicalReference.</param>
        public PointMassBC(string type = "POINT_MASS", string name = default(string), DimensionalMass mass = default(DimensionalMass), DimensionalVectorMomentOfInertia massMomentOfInertia = default(DimensionalVectorMomentOfInertia), DimensionalVectorLength externalPoint = default(DimensionalVectorLength), DeformationBehaviorEnum? deformationBehavior = default(DeformationBehaviorEnum?), bool? enableSearchRadius = default(bool?), DimensionalLength searchRadius = default(DimensionalLength), TopologicalReference topologicalReference = default(TopologicalReference))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for PointMassBC and cannot be null");
            this.Name = name;
            this.Mass = mass;
            this.MassMomentOfInertia = massMomentOfInertia;
            this.ExternalPoint = externalPoint;
            this.DeformationBehavior = deformationBehavior;
            this.EnableSearchRadius = enableSearchRadius;
            this.SearchRadius = searchRadius;
            this.TopologicalReference = topologicalReference;
        }
        
        /// <summary>
        /// &lt;p&gt;Define a &lt;b&gt;Point mass&lt;/b&gt; boundary condition in order to insert an additional mass on a specific location of the active model.&lt;/p&gt;  Schema name: PointMassBC
        /// </summary>
        /// <value>&lt;p&gt;Define a &lt;b&gt;Point mass&lt;/b&gt; boundary condition in order to insert an additional mass on a specific location of the active model.&lt;/p&gt;  Schema name: PointMassBC</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Mass
        /// </summary>
        [DataMember(Name="mass", EmitDefaultValue=false)]
        public DimensionalMass Mass { get; set; }

        /// <summary>
        /// Gets or Sets MassMomentOfInertia
        /// </summary>
        [DataMember(Name="massMomentOfInertia", EmitDefaultValue=false)]
        public DimensionalVectorMomentOfInertia MassMomentOfInertia { get; set; }

        /// <summary>
        /// Gets or Sets ExternalPoint
        /// </summary>
        [DataMember(Name="externalPoint", EmitDefaultValue=false)]
        public DimensionalVectorLength ExternalPoint { get; set; }

        /// <summary>
        /// Gets or Sets EnableSearchRadius
        /// </summary>
        [DataMember(Name="enableSearchRadius", EmitDefaultValue=false)]
        public bool? EnableSearchRadius { get; set; }

        /// <summary>
        /// Gets or Sets SearchRadius
        /// </summary>
        [DataMember(Name="searchRadius", EmitDefaultValue=false)]
        public DimensionalLength SearchRadius { get; set; }

        /// <summary>
        /// Gets or Sets TopologicalReference
        /// </summary>
        [DataMember(Name="topologicalReference", EmitDefaultValue=false)]
        public TopologicalReference TopologicalReference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PointMassBC {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Mass: ").Append(Mass).Append("\n");
            sb.Append("  MassMomentOfInertia: ").Append(MassMomentOfInertia).Append("\n");
            sb.Append("  ExternalPoint: ").Append(ExternalPoint).Append("\n");
            sb.Append("  DeformationBehavior: ").Append(DeformationBehavior).Append("\n");
            sb.Append("  EnableSearchRadius: ").Append(EnableSearchRadius).Append("\n");
            sb.Append("  SearchRadius: ").Append(SearchRadius).Append("\n");
            sb.Append("  TopologicalReference: ").Append(TopologicalReference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PointMassBC);
        }

        /// <summary>
        /// Returns true if PointMassBC instances are equal
        /// </summary>
        /// <param name="input">Instance of PointMassBC to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PointMassBC input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Mass == input.Mass ||
                    (this.Mass != null &&
                    this.Mass.Equals(input.Mass))
                ) && 
                (
                    this.MassMomentOfInertia == input.MassMomentOfInertia ||
                    (this.MassMomentOfInertia != null &&
                    this.MassMomentOfInertia.Equals(input.MassMomentOfInertia))
                ) && 
                (
                    this.ExternalPoint == input.ExternalPoint ||
                    (this.ExternalPoint != null &&
                    this.ExternalPoint.Equals(input.ExternalPoint))
                ) && 
                (
                    this.DeformationBehavior == input.DeformationBehavior ||
                    this.DeformationBehavior.Equals(input.DeformationBehavior)
                ) && 
                (
                    this.EnableSearchRadius == input.EnableSearchRadius ||
                    (this.EnableSearchRadius != null &&
                    this.EnableSearchRadius.Equals(input.EnableSearchRadius))
                ) && 
                (
                    this.SearchRadius == input.SearchRadius ||
                    (this.SearchRadius != null &&
                    this.SearchRadius.Equals(input.SearchRadius))
                ) && 
                (
                    this.TopologicalReference == input.TopologicalReference ||
                    (this.TopologicalReference != null &&
                    this.TopologicalReference.Equals(input.TopologicalReference))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Mass != null)
                    hashCode = hashCode * 59 + this.Mass.GetHashCode();
                if (this.MassMomentOfInertia != null)
                    hashCode = hashCode * 59 + this.MassMomentOfInertia.GetHashCode();
                if (this.ExternalPoint != null)
                    hashCode = hashCode * 59 + this.ExternalPoint.GetHashCode();
                hashCode = hashCode * 59 + this.DeformationBehavior.GetHashCode();
                if (this.EnableSearchRadius != null)
                    hashCode = hashCode * 59 + this.EnableSearchRadius.GetHashCode();
                if (this.SearchRadius != null)
                    hashCode = hashCode * 59 + this.SearchRadius.GetHashCode();
                if (this.TopologicalReference != null)
                    hashCode = hashCode * 59 + this.TopologicalReference.GetHashCode();
                return hashCode;
            }
        }

    }

}
