/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// SolidInitialConditions
    /// </summary>
    [DataContract]
    public partial class SolidInitialConditions : IEquatable<SolidInitialConditions>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SolidInitialConditions" /> class.
        /// </summary>
        /// <param name="displacement">displacement.</param>
        /// <param name="velocity">velocity.</param>
        /// <param name="acceleration">acceleration.</param>
        /// <param name="stress">stress.</param>
        /// <param name="temperature">temperature.</param>
        public SolidInitialConditions(DimensionalVectorFunctionInitialConditionWithDomainsLength displacement = default(DimensionalVectorFunctionInitialConditionWithDomainsLength), DimensionalVectorFunctionInitialConditionWithDomainsSpeed velocity = default(DimensionalVectorFunctionInitialConditionWithDomainsSpeed), DimensionalVectorFunctionInitialConditionWithDomainsAcceleration acceleration = default(DimensionalVectorFunctionInitialConditionWithDomainsAcceleration), StressInitialConditionDomains stress = default(StressInitialConditionDomains), DimensionalFunctionInitialConditionDomainsTemperature temperature = default(DimensionalFunctionInitialConditionDomainsTemperature))
        {
            this.Displacement = displacement;
            this.Velocity = velocity;
            this.Acceleration = acceleration;
            this.Stress = stress;
            this.Temperature = temperature;
        }
        
        /// <summary>
        /// Gets or Sets Displacement
        /// </summary>
        [DataMember(Name="displacement", EmitDefaultValue=false)]
        public DimensionalVectorFunctionInitialConditionWithDomainsLength Displacement { get; set; }

        /// <summary>
        /// Gets or Sets Velocity
        /// </summary>
        [DataMember(Name="velocity", EmitDefaultValue=false)]
        public DimensionalVectorFunctionInitialConditionWithDomainsSpeed Velocity { get; set; }

        /// <summary>
        /// Gets or Sets Acceleration
        /// </summary>
        [DataMember(Name="acceleration", EmitDefaultValue=false)]
        public DimensionalVectorFunctionInitialConditionWithDomainsAcceleration Acceleration { get; set; }

        /// <summary>
        /// Gets or Sets Stress
        /// </summary>
        [DataMember(Name="stress", EmitDefaultValue=false)]
        public StressInitialConditionDomains Stress { get; set; }

        /// <summary>
        /// Gets or Sets Temperature
        /// </summary>
        [DataMember(Name="temperature", EmitDefaultValue=false)]
        public DimensionalFunctionInitialConditionDomainsTemperature Temperature { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SolidInitialConditions {\n");
            sb.Append("  Displacement: ").Append(Displacement).Append("\n");
            sb.Append("  Velocity: ").Append(Velocity).Append("\n");
            sb.Append("  Acceleration: ").Append(Acceleration).Append("\n");
            sb.Append("  Stress: ").Append(Stress).Append("\n");
            sb.Append("  Temperature: ").Append(Temperature).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SolidInitialConditions);
        }

        /// <summary>
        /// Returns true if SolidInitialConditions instances are equal
        /// </summary>
        /// <param name="input">Instance of SolidInitialConditions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SolidInitialConditions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Displacement == input.Displacement ||
                    (this.Displacement != null &&
                    this.Displacement.Equals(input.Displacement))
                ) && 
                (
                    this.Velocity == input.Velocity ||
                    (this.Velocity != null &&
                    this.Velocity.Equals(input.Velocity))
                ) && 
                (
                    this.Acceleration == input.Acceleration ||
                    (this.Acceleration != null &&
                    this.Acceleration.Equals(input.Acceleration))
                ) && 
                (
                    this.Stress == input.Stress ||
                    (this.Stress != null &&
                    this.Stress.Equals(input.Stress))
                ) && 
                (
                    this.Temperature == input.Temperature ||
                    (this.Temperature != null &&
                    this.Temperature.Equals(input.Temperature))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Displacement != null)
                    hashCode = hashCode * 59 + this.Displacement.GetHashCode();
                if (this.Velocity != null)
                    hashCode = hashCode * 59 + this.Velocity.GetHashCode();
                if (this.Acceleration != null)
                    hashCode = hashCode * 59 + this.Acceleration.GetHashCode();
                if (this.Stress != null)
                    hashCode = hashCode * 59 + this.Stress.GetHashCode();
                if (this.Temperature != null)
                    hashCode = hashCode * 59 + this.Temperature.GetHashCode();
                return hashCode;
            }
        }

    }

}
