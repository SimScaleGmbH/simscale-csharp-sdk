/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// Spaces
    /// </summary>
    [DataContract]
    public partial class Spaces : IEquatable<Spaces>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Spaces" /> class.
        /// </summary>
        /// <param name="personalSpaces">personalSpaces.</param>
        /// <param name="teamSpaces">teamSpaces.</param>
        public Spaces(List<Space> personalSpaces = default(List<Space>), List<Space> teamSpaces = default(List<Space>))
        {
            this.PersonalSpaces = personalSpaces;
            this.TeamSpaces = teamSpaces;
        }
        
        /// <summary>
        /// Gets or Sets PersonalSpaces
        /// </summary>
        [DataMember(Name="personalSpaces", EmitDefaultValue=false)]
        public List<Space> PersonalSpaces { get; set; }

        /// <summary>
        /// Gets or Sets TeamSpaces
        /// </summary>
        [DataMember(Name="teamSpaces", EmitDefaultValue=false)]
        public List<Space> TeamSpaces { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Spaces {\n");
            sb.Append("  PersonalSpaces: ").Append(PersonalSpaces).Append("\n");
            sb.Append("  TeamSpaces: ").Append(TeamSpaces).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Spaces);
        }

        /// <summary>
        /// Returns true if Spaces instances are equal
        /// </summary>
        /// <param name="input">Instance of Spaces to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Spaces input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PersonalSpaces == input.PersonalSpaces ||
                    this.PersonalSpaces != null &&
                    input.PersonalSpaces != null &&
                    this.PersonalSpaces.SequenceEqual(input.PersonalSpaces)
                ) && 
                (
                    this.TeamSpaces == input.TeamSpaces ||
                    this.TeamSpaces != null &&
                    input.TeamSpaces != null &&
                    this.TeamSpaces.SequenceEqual(input.TeamSpaces)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PersonalSpaces != null)
                    hashCode = hashCode * 59 + this.PersonalSpaces.GetHashCode();
                if (this.TeamSpaces != null)
                    hashCode = hashCode * 59 + this.TeamSpaces.GetHashCode();
                return hashCode;
            }
        }

    }

}
