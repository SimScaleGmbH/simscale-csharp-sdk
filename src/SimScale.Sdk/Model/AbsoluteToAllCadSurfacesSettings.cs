/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// AbsoluteToAllCadSurfacesSettings
    /// </summary>
    [DataContract]
    public partial class AbsoluteToAllCadSurfacesSettings : OneOfManualSimericsMeshSettingsCellSizeSpecification, IEquatable<AbsoluteToAllCadSurfacesSettings>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AbsoluteToAllCadSurfacesSettings" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AbsoluteToAllCadSurfacesSettings() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AbsoluteToAllCadSurfacesSettings" /> class.
        /// </summary>
        /// <param name="type">Schema name: AbsoluteToAllCadSurfacesSettings (required) (default to &quot;ABSOLUTE_TO_ALL_CAD_SURFACES&quot;).</param>
        /// <param name="minimumCellSize">minimumCellSize.</param>
        /// <param name="maximumCellSize">maximumCellSize.</param>
        /// <param name="cellSizeOnSurfaces">cellSizeOnSurfaces.</param>
        /// <param name="enableGrowthRate">&lt;p&gt;&lt;b&gt;Specify growth rate&lt;/b&gt;: Define the cell size growth rate between interior cells and surface cells.&lt;/p&gt; (default to false).</param>
        /// <param name="growthRate">The &lt;i&gt;Growth rate&lt;/i&gt; defines the cell size ratio between interior cell size and surface cell size. It needs to be &lt;b&gt;a whole number&lt;/b&gt; always greater than 1 and smaller or equal to 8, such that the cell size increases towards the interior of the mesh. (default to 2).</param>
        public AbsoluteToAllCadSurfacesSettings(string type = "ABSOLUTE_TO_ALL_CAD_SURFACES", DimensionalLength minimumCellSize = default(DimensionalLength), DimensionalLength maximumCellSize = default(DimensionalLength), DimensionalLength cellSizeOnSurfaces = default(DimensionalLength), bool? enableGrowthRate = default(bool?), int? growthRate = default(int?))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for AbsoluteToAllCadSurfacesSettings and cannot be null");
            this.MinimumCellSize = minimumCellSize;
            this.MaximumCellSize = maximumCellSize;
            this.CellSizeOnSurfaces = cellSizeOnSurfaces;
            this.EnableGrowthRate = enableGrowthRate;
            this.GrowthRate = growthRate;
        }
        
        /// <summary>
        /// Schema name: AbsoluteToAllCadSurfacesSettings
        /// </summary>
        /// <value>Schema name: AbsoluteToAllCadSurfacesSettings</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets MinimumCellSize
        /// </summary>
        [DataMember(Name="minimumCellSize", EmitDefaultValue=false)]
        public DimensionalLength MinimumCellSize { get; set; }

        /// <summary>
        /// Gets or Sets MaximumCellSize
        /// </summary>
        [DataMember(Name="maximumCellSize", EmitDefaultValue=false)]
        public DimensionalLength MaximumCellSize { get; set; }

        /// <summary>
        /// Gets or Sets CellSizeOnSurfaces
        /// </summary>
        [DataMember(Name="cellSizeOnSurfaces", EmitDefaultValue=false)]
        public DimensionalLength CellSizeOnSurfaces { get; set; }

        /// <summary>
        /// &lt;p&gt;&lt;b&gt;Specify growth rate&lt;/b&gt;: Define the cell size growth rate between interior cells and surface cells.&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;&lt;b&gt;Specify growth rate&lt;/b&gt;: Define the cell size growth rate between interior cells and surface cells.&lt;/p&gt;</value>
        [DataMember(Name="enableGrowthRate", EmitDefaultValue=false)]
        public bool? EnableGrowthRate { get; set; }

        /// <summary>
        /// The &lt;i&gt;Growth rate&lt;/i&gt; defines the cell size ratio between interior cell size and surface cell size. It needs to be &lt;b&gt;a whole number&lt;/b&gt; always greater than 1 and smaller or equal to 8, such that the cell size increases towards the interior of the mesh.
        /// </summary>
        /// <value>The &lt;i&gt;Growth rate&lt;/i&gt; defines the cell size ratio between interior cell size and surface cell size. It needs to be &lt;b&gt;a whole number&lt;/b&gt; always greater than 1 and smaller or equal to 8, such that the cell size increases towards the interior of the mesh.</value>
        [DataMember(Name="growthRate", EmitDefaultValue=false)]
        public int? GrowthRate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AbsoluteToAllCadSurfacesSettings {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  MinimumCellSize: ").Append(MinimumCellSize).Append("\n");
            sb.Append("  MaximumCellSize: ").Append(MaximumCellSize).Append("\n");
            sb.Append("  CellSizeOnSurfaces: ").Append(CellSizeOnSurfaces).Append("\n");
            sb.Append("  EnableGrowthRate: ").Append(EnableGrowthRate).Append("\n");
            sb.Append("  GrowthRate: ").Append(GrowthRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AbsoluteToAllCadSurfacesSettings);
        }

        /// <summary>
        /// Returns true if AbsoluteToAllCadSurfacesSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of AbsoluteToAllCadSurfacesSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AbsoluteToAllCadSurfacesSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.MinimumCellSize == input.MinimumCellSize ||
                    (this.MinimumCellSize != null &&
                    this.MinimumCellSize.Equals(input.MinimumCellSize))
                ) && 
                (
                    this.MaximumCellSize == input.MaximumCellSize ||
                    (this.MaximumCellSize != null &&
                    this.MaximumCellSize.Equals(input.MaximumCellSize))
                ) && 
                (
                    this.CellSizeOnSurfaces == input.CellSizeOnSurfaces ||
                    (this.CellSizeOnSurfaces != null &&
                    this.CellSizeOnSurfaces.Equals(input.CellSizeOnSurfaces))
                ) && 
                (
                    this.EnableGrowthRate == input.EnableGrowthRate ||
                    (this.EnableGrowthRate != null &&
                    this.EnableGrowthRate.Equals(input.EnableGrowthRate))
                ) && 
                (
                    this.GrowthRate == input.GrowthRate ||
                    (this.GrowthRate != null &&
                    this.GrowthRate.Equals(input.GrowthRate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.MinimumCellSize != null)
                    hashCode = hashCode * 59 + this.MinimumCellSize.GetHashCode();
                if (this.MaximumCellSize != null)
                    hashCode = hashCode * 59 + this.MaximumCellSize.GetHashCode();
                if (this.CellSizeOnSurfaces != null)
                    hashCode = hashCode * 59 + this.CellSizeOnSurfaces.GetHashCode();
                if (this.EnableGrowthRate != null)
                    hashCode = hashCode * 59 + this.EnableGrowthRate.GetHashCode();
                if (this.GrowthRate != null)
                    hashCode = hashCode * 59 + this.GrowthRate.GetHashCode();
                return hashCode;
            }
        }

    }

}
