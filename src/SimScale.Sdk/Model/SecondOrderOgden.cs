/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// SecondOrderOgden
    /// </summary>
    [DataContract]
    public partial class SecondOrderOgden : OneOfOgdenHyperElasticModelOrder, IEquatable<SecondOrderOgden>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SecondOrderOgden" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SecondOrderOgden() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SecondOrderOgden" /> class.
        /// </summary>
        /// <param name="type">Schema name: SecondOrderOgden (required) (default to &quot;SECOND_ORDER_OGDEN&quot;).</param>
        /// <param name="mu1">mu1.</param>
        /// <param name="alpha1">&lt;p&gt;Provide a parameter value for the Ogden coefficient &lt;b&gt;&amp;alpha;&lt;sub&gt;1&lt;/sub&gt;&lt;/b&gt;. &lt;/p&gt;.</param>
        /// <param name="mu2">mu2.</param>
        /// <param name="alpha2">&lt;p&gt;Provide a parameter value for the Ogden coefficient &lt;b&gt;&amp;alpha;&lt;sub&gt;2&lt;/sub&gt;&lt;/b&gt;. &lt;/p&gt;.</param>
        public SecondOrderOgden(string type = "SECOND_ORDER_OGDEN", DimensionalPressure mu1 = default(DimensionalPressure), decimal? alpha1 = default(decimal?), DimensionalPressure mu2 = default(DimensionalPressure), decimal? alpha2 = default(decimal?))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for SecondOrderOgden and cannot be null");
            this.Mu1 = mu1;
            this.Alpha1 = alpha1;
            this.Mu2 = mu2;
            this.Alpha2 = alpha2;
        }
        
        /// <summary>
        /// Schema name: SecondOrderOgden
        /// </summary>
        /// <value>Schema name: SecondOrderOgden</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Mu1
        /// </summary>
        [DataMember(Name="mu1", EmitDefaultValue=false)]
        public DimensionalPressure Mu1 { get; set; }

        /// <summary>
        /// &lt;p&gt;Provide a parameter value for the Ogden coefficient &lt;b&gt;&amp;alpha;&lt;sub&gt;1&lt;/sub&gt;&lt;/b&gt;. &lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;Provide a parameter value for the Ogden coefficient &lt;b&gt;&amp;alpha;&lt;sub&gt;1&lt;/sub&gt;&lt;/b&gt;. &lt;/p&gt;</value>
        [DataMember(Name="alpha1", EmitDefaultValue=false)]
        public decimal? Alpha1 { get; set; }

        /// <summary>
        /// Gets or Sets Mu2
        /// </summary>
        [DataMember(Name="mu2", EmitDefaultValue=false)]
        public DimensionalPressure Mu2 { get; set; }

        /// <summary>
        /// &lt;p&gt;Provide a parameter value for the Ogden coefficient &lt;b&gt;&amp;alpha;&lt;sub&gt;2&lt;/sub&gt;&lt;/b&gt;. &lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;Provide a parameter value for the Ogden coefficient &lt;b&gt;&amp;alpha;&lt;sub&gt;2&lt;/sub&gt;&lt;/b&gt;. &lt;/p&gt;</value>
        [DataMember(Name="alpha2", EmitDefaultValue=false)]
        public decimal? Alpha2 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SecondOrderOgden {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Mu1: ").Append(Mu1).Append("\n");
            sb.Append("  Alpha1: ").Append(Alpha1).Append("\n");
            sb.Append("  Mu2: ").Append(Mu2).Append("\n");
            sb.Append("  Alpha2: ").Append(Alpha2).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SecondOrderOgden);
        }

        /// <summary>
        /// Returns true if SecondOrderOgden instances are equal
        /// </summary>
        /// <param name="input">Instance of SecondOrderOgden to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SecondOrderOgden input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Mu1 == input.Mu1 ||
                    (this.Mu1 != null &&
                    this.Mu1.Equals(input.Mu1))
                ) && 
                (
                    this.Alpha1 == input.Alpha1 ||
                    (this.Alpha1 != null &&
                    this.Alpha1.Equals(input.Alpha1))
                ) && 
                (
                    this.Mu2 == input.Mu2 ||
                    (this.Mu2 != null &&
                    this.Mu2.Equals(input.Mu2))
                ) && 
                (
                    this.Alpha2 == input.Alpha2 ||
                    (this.Alpha2 != null &&
                    this.Alpha2.Equals(input.Alpha2))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Mu1 != null)
                    hashCode = hashCode * 59 + this.Mu1.GetHashCode();
                if (this.Alpha1 != null)
                    hashCode = hashCode * 59 + this.Alpha1.GetHashCode();
                if (this.Mu2 != null)
                    hashCode = hashCode * 59 + this.Mu2.GetHashCode();
                if (this.Alpha2 != null)
                    hashCode = hashCode * 59 + this.Alpha2.GetHashCode();
                return hashCode;
            }
        }

    }

}
