/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// OrthotropicDirectionalDependency
    /// </summary>
    [DataContract]
    public partial class OrthotropicDirectionalDependency : OneOfLinearElasticMaterialBehaviorDirectionalDependency, IEquatable<OrthotropicDirectionalDependency>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrthotropicDirectionalDependency" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrthotropicDirectionalDependency() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrthotropicDirectionalDependency" /> class.
        /// </summary>
        /// <param name="type">Schema name: OrthotropicDirectionalDependency (required) (default to &quot;ORTHOTROPIC&quot;).</param>
        /// <param name="youngsModulusX">youngsModulusX.</param>
        /// <param name="youngsModulusY">youngsModulusY.</param>
        /// <param name="youngsModulusZ">youngsModulusZ.</param>
        /// <param name="poissonsRatioXY">poissonsRatioXY.</param>
        /// <param name="poissonsRatioYZ">poissonsRatioYZ.</param>
        /// <param name="poissonsRatioXZ">poissonsRatioXZ.</param>
        /// <param name="shearModulusXY">shearModulusXY.</param>
        /// <param name="shearModulusYZ">shearModulusYZ.</param>
        /// <param name="shearModulusXZ">shearModulusXZ.</param>
        /// <param name="expansionCoefficientX">expansionCoefficientX.</param>
        /// <param name="expansionCoefficientY">expansionCoefficientY.</param>
        /// <param name="expansionCoefficientZ">expansionCoefficientZ.</param>
        /// <param name="referenceTemperature">referenceTemperature.</param>
        public OrthotropicDirectionalDependency(string type = "ORTHOTROPIC", DimensionalFunctionPressure youngsModulusX = default(DimensionalFunctionPressure), DimensionalFunctionPressure youngsModulusY = default(DimensionalFunctionPressure), DimensionalFunctionPressure youngsModulusZ = default(DimensionalFunctionPressure), OneOfOrthotropicDirectionalDependencyPoissonsRatioXY poissonsRatioXY = default(OneOfOrthotropicDirectionalDependencyPoissonsRatioXY), OneOfOrthotropicDirectionalDependencyPoissonsRatioYZ poissonsRatioYZ = default(OneOfOrthotropicDirectionalDependencyPoissonsRatioYZ), OneOfOrthotropicDirectionalDependencyPoissonsRatioXZ poissonsRatioXZ = default(OneOfOrthotropicDirectionalDependencyPoissonsRatioXZ), DimensionalFunctionPressure shearModulusXY = default(DimensionalFunctionPressure), DimensionalFunctionPressure shearModulusYZ = default(DimensionalFunctionPressure), DimensionalFunctionPressure shearModulusXZ = default(DimensionalFunctionPressure), DimensionalFunctionThermalExpansionRate expansionCoefficientX = default(DimensionalFunctionThermalExpansionRate), DimensionalFunctionThermalExpansionRate expansionCoefficientY = default(DimensionalFunctionThermalExpansionRate), DimensionalFunctionThermalExpansionRate expansionCoefficientZ = default(DimensionalFunctionThermalExpansionRate), DimensionalTemperature referenceTemperature = default(DimensionalTemperature))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for OrthotropicDirectionalDependency and cannot be null");
            this.YoungsModulusX = youngsModulusX;
            this.YoungsModulusY = youngsModulusY;
            this.YoungsModulusZ = youngsModulusZ;
            this.PoissonsRatioXY = poissonsRatioXY;
            this.PoissonsRatioYZ = poissonsRatioYZ;
            this.PoissonsRatioXZ = poissonsRatioXZ;
            this.ShearModulusXY = shearModulusXY;
            this.ShearModulusYZ = shearModulusYZ;
            this.ShearModulusXZ = shearModulusXZ;
            this.ExpansionCoefficientX = expansionCoefficientX;
            this.ExpansionCoefficientY = expansionCoefficientY;
            this.ExpansionCoefficientZ = expansionCoefficientZ;
            this.ReferenceTemperature = referenceTemperature;
        }
        
        /// <summary>
        /// Schema name: OrthotropicDirectionalDependency
        /// </summary>
        /// <value>Schema name: OrthotropicDirectionalDependency</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets YoungsModulusX
        /// </summary>
        [DataMember(Name="youngsModulusX", EmitDefaultValue=false)]
        public DimensionalFunctionPressure YoungsModulusX { get; set; }

        /// <summary>
        /// Gets or Sets YoungsModulusY
        /// </summary>
        [DataMember(Name="youngsModulusY", EmitDefaultValue=false)]
        public DimensionalFunctionPressure YoungsModulusY { get; set; }

        /// <summary>
        /// Gets or Sets YoungsModulusZ
        /// </summary>
        [DataMember(Name="youngsModulusZ", EmitDefaultValue=false)]
        public DimensionalFunctionPressure YoungsModulusZ { get; set; }

        /// <summary>
        /// Gets or Sets PoissonsRatioXY
        /// </summary>
        [DataMember(Name="poissonsRatioXY", EmitDefaultValue=false)]
        public OneOfOrthotropicDirectionalDependencyPoissonsRatioXY PoissonsRatioXY { get; set; }

        /// <summary>
        /// Gets or Sets PoissonsRatioYZ
        /// </summary>
        [DataMember(Name="poissonsRatioYZ", EmitDefaultValue=false)]
        public OneOfOrthotropicDirectionalDependencyPoissonsRatioYZ PoissonsRatioYZ { get; set; }

        /// <summary>
        /// Gets or Sets PoissonsRatioXZ
        /// </summary>
        [DataMember(Name="poissonsRatioXZ", EmitDefaultValue=false)]
        public OneOfOrthotropicDirectionalDependencyPoissonsRatioXZ PoissonsRatioXZ { get; set; }

        /// <summary>
        /// Gets or Sets ShearModulusXY
        /// </summary>
        [DataMember(Name="shearModulusXY", EmitDefaultValue=false)]
        public DimensionalFunctionPressure ShearModulusXY { get; set; }

        /// <summary>
        /// Gets or Sets ShearModulusYZ
        /// </summary>
        [DataMember(Name="shearModulusYZ", EmitDefaultValue=false)]
        public DimensionalFunctionPressure ShearModulusYZ { get; set; }

        /// <summary>
        /// Gets or Sets ShearModulusXZ
        /// </summary>
        [DataMember(Name="shearModulusXZ", EmitDefaultValue=false)]
        public DimensionalFunctionPressure ShearModulusXZ { get; set; }

        /// <summary>
        /// Gets or Sets ExpansionCoefficientX
        /// </summary>
        [DataMember(Name="expansionCoefficientX", EmitDefaultValue=false)]
        public DimensionalFunctionThermalExpansionRate ExpansionCoefficientX { get; set; }

        /// <summary>
        /// Gets or Sets ExpansionCoefficientY
        /// </summary>
        [DataMember(Name="expansionCoefficientY", EmitDefaultValue=false)]
        public DimensionalFunctionThermalExpansionRate ExpansionCoefficientY { get; set; }

        /// <summary>
        /// Gets or Sets ExpansionCoefficientZ
        /// </summary>
        [DataMember(Name="expansionCoefficientZ", EmitDefaultValue=false)]
        public DimensionalFunctionThermalExpansionRate ExpansionCoefficientZ { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceTemperature
        /// </summary>
        [DataMember(Name="referenceTemperature", EmitDefaultValue=false)]
        public DimensionalTemperature ReferenceTemperature { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrthotropicDirectionalDependency {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  YoungsModulusX: ").Append(YoungsModulusX).Append("\n");
            sb.Append("  YoungsModulusY: ").Append(YoungsModulusY).Append("\n");
            sb.Append("  YoungsModulusZ: ").Append(YoungsModulusZ).Append("\n");
            sb.Append("  PoissonsRatioXY: ").Append(PoissonsRatioXY).Append("\n");
            sb.Append("  PoissonsRatioYZ: ").Append(PoissonsRatioYZ).Append("\n");
            sb.Append("  PoissonsRatioXZ: ").Append(PoissonsRatioXZ).Append("\n");
            sb.Append("  ShearModulusXY: ").Append(ShearModulusXY).Append("\n");
            sb.Append("  ShearModulusYZ: ").Append(ShearModulusYZ).Append("\n");
            sb.Append("  ShearModulusXZ: ").Append(ShearModulusXZ).Append("\n");
            sb.Append("  ExpansionCoefficientX: ").Append(ExpansionCoefficientX).Append("\n");
            sb.Append("  ExpansionCoefficientY: ").Append(ExpansionCoefficientY).Append("\n");
            sb.Append("  ExpansionCoefficientZ: ").Append(ExpansionCoefficientZ).Append("\n");
            sb.Append("  ReferenceTemperature: ").Append(ReferenceTemperature).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrthotropicDirectionalDependency);
        }

        /// <summary>
        /// Returns true if OrthotropicDirectionalDependency instances are equal
        /// </summary>
        /// <param name="input">Instance of OrthotropicDirectionalDependency to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrthotropicDirectionalDependency input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.YoungsModulusX == input.YoungsModulusX ||
                    (this.YoungsModulusX != null &&
                    this.YoungsModulusX.Equals(input.YoungsModulusX))
                ) && 
                (
                    this.YoungsModulusY == input.YoungsModulusY ||
                    (this.YoungsModulusY != null &&
                    this.YoungsModulusY.Equals(input.YoungsModulusY))
                ) && 
                (
                    this.YoungsModulusZ == input.YoungsModulusZ ||
                    (this.YoungsModulusZ != null &&
                    this.YoungsModulusZ.Equals(input.YoungsModulusZ))
                ) && 
                (
                    this.PoissonsRatioXY == input.PoissonsRatioXY ||
                    (this.PoissonsRatioXY != null &&
                    this.PoissonsRatioXY.Equals(input.PoissonsRatioXY))
                ) && 
                (
                    this.PoissonsRatioYZ == input.PoissonsRatioYZ ||
                    (this.PoissonsRatioYZ != null &&
                    this.PoissonsRatioYZ.Equals(input.PoissonsRatioYZ))
                ) && 
                (
                    this.PoissonsRatioXZ == input.PoissonsRatioXZ ||
                    (this.PoissonsRatioXZ != null &&
                    this.PoissonsRatioXZ.Equals(input.PoissonsRatioXZ))
                ) && 
                (
                    this.ShearModulusXY == input.ShearModulusXY ||
                    (this.ShearModulusXY != null &&
                    this.ShearModulusXY.Equals(input.ShearModulusXY))
                ) && 
                (
                    this.ShearModulusYZ == input.ShearModulusYZ ||
                    (this.ShearModulusYZ != null &&
                    this.ShearModulusYZ.Equals(input.ShearModulusYZ))
                ) && 
                (
                    this.ShearModulusXZ == input.ShearModulusXZ ||
                    (this.ShearModulusXZ != null &&
                    this.ShearModulusXZ.Equals(input.ShearModulusXZ))
                ) && 
                (
                    this.ExpansionCoefficientX == input.ExpansionCoefficientX ||
                    (this.ExpansionCoefficientX != null &&
                    this.ExpansionCoefficientX.Equals(input.ExpansionCoefficientX))
                ) && 
                (
                    this.ExpansionCoefficientY == input.ExpansionCoefficientY ||
                    (this.ExpansionCoefficientY != null &&
                    this.ExpansionCoefficientY.Equals(input.ExpansionCoefficientY))
                ) && 
                (
                    this.ExpansionCoefficientZ == input.ExpansionCoefficientZ ||
                    (this.ExpansionCoefficientZ != null &&
                    this.ExpansionCoefficientZ.Equals(input.ExpansionCoefficientZ))
                ) && 
                (
                    this.ReferenceTemperature == input.ReferenceTemperature ||
                    (this.ReferenceTemperature != null &&
                    this.ReferenceTemperature.Equals(input.ReferenceTemperature))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.YoungsModulusX != null)
                    hashCode = hashCode * 59 + this.YoungsModulusX.GetHashCode();
                if (this.YoungsModulusY != null)
                    hashCode = hashCode * 59 + this.YoungsModulusY.GetHashCode();
                if (this.YoungsModulusZ != null)
                    hashCode = hashCode * 59 + this.YoungsModulusZ.GetHashCode();
                if (this.PoissonsRatioXY != null)
                    hashCode = hashCode * 59 + this.PoissonsRatioXY.GetHashCode();
                if (this.PoissonsRatioYZ != null)
                    hashCode = hashCode * 59 + this.PoissonsRatioYZ.GetHashCode();
                if (this.PoissonsRatioXZ != null)
                    hashCode = hashCode * 59 + this.PoissonsRatioXZ.GetHashCode();
                if (this.ShearModulusXY != null)
                    hashCode = hashCode * 59 + this.ShearModulusXY.GetHashCode();
                if (this.ShearModulusYZ != null)
                    hashCode = hashCode * 59 + this.ShearModulusYZ.GetHashCode();
                if (this.ShearModulusXZ != null)
                    hashCode = hashCode * 59 + this.ShearModulusXZ.GetHashCode();
                if (this.ExpansionCoefficientX != null)
                    hashCode = hashCode * 59 + this.ExpansionCoefficientX.GetHashCode();
                if (this.ExpansionCoefficientY != null)
                    hashCode = hashCode * 59 + this.ExpansionCoefficientY.GetHashCode();
                if (this.ExpansionCoefficientZ != null)
                    hashCode = hashCode * 59 + this.ExpansionCoefficientZ.GetHashCode();
                if (this.ReferenceTemperature != null)
                    hashCode = hashCode * 59 + this.ReferenceTemperature.GetHashCode();
                return hashCode;
            }
        }

    }

}
