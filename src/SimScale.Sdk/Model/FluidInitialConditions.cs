/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// FluidInitialConditions
    /// </summary>
    [DataContract]
    public partial class FluidInitialConditions : IEquatable<FluidInitialConditions>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FluidInitialConditions" /> class.
        /// </summary>
        /// <param name="pressure">pressure.</param>
        /// <param name="pressureRgh">pressureRgh.</param>
        /// <param name="gaugePressure">gaugePressure.</param>
        /// <param name="gaugePressureRgh">gaugePressureRgh.</param>
        /// <param name="velocity">velocity.</param>
        /// <param name="temperature">temperature.</param>
        /// <param name="turbulentKineticEnergy">turbulentKineticEnergy.</param>
        /// <param name="omegaDissipationRate">omegaDissipationRate.</param>
        /// <param name="epsilonDissipationRate">epsilonDissipationRate.</param>
        /// <param name="eddyViscosity">eddyViscosity.</param>
        /// <param name="eddyViscosityMultiphase">eddyViscosityMultiphase.</param>
        /// <param name="eddyViscosityCompressible">eddyViscosityCompressible.</param>
        /// <param name="nuTilda">nuTilda.</param>
        /// <param name="turbulentThermalDiffusivity">turbulentThermalDiffusivity.</param>
        /// <param name="turbulentThermalDiffusivityCompressible">turbulentThermalDiffusivityCompressible.</param>
        /// <param name="turbulentDynamicViscosity">turbulentDynamicViscosity.</param>
        /// <param name="passiveScalars">passiveScalars.</param>
        /// <param name="phaseFraction">phaseFraction.</param>
        /// <param name="phaseFractions">phaseFractions.</param>
        /// <param name="relativeHumidity">relativeHumidity.</param>
        public FluidInitialConditions(DimensionalInitialConditionDomainsPressure pressure = default(DimensionalInitialConditionDomainsPressure), DimensionalInitialConditionDomainsPressure pressureRgh = default(DimensionalInitialConditionDomainsPressure), DimensionalInitialConditionDomainsPressure gaugePressure = default(DimensionalInitialConditionDomainsPressure), DimensionalInitialConditionDomainsPressure gaugePressureRgh = default(DimensionalInitialConditionDomainsPressure), DimensionalVectorInitialConditionDomainsSpeed velocity = default(DimensionalVectorInitialConditionDomainsSpeed), DimensionalInitialConditionDomainsTemperature temperature = default(DimensionalInitialConditionDomainsTemperature), DimensionalInitialConditionDomainsTurbulenceKineticEnergy turbulentKineticEnergy = default(DimensionalInitialConditionDomainsTurbulenceKineticEnergy), DimensionalInitialConditionDomainsSpecificTurbulenceDissipationRate omegaDissipationRate = default(DimensionalInitialConditionDomainsSpecificTurbulenceDissipationRate), DimensionalInitialConditionDomainsTurbulentDissipation epsilonDissipationRate = default(DimensionalInitialConditionDomainsTurbulentDissipation), DimensionalInitialConditionDomainsDynamicViscosity eddyViscosity = default(DimensionalInitialConditionDomainsDynamicViscosity), DimensionalInitialConditionDomainsKinematicViscosity eddyViscosityMultiphase = default(DimensionalInitialConditionDomainsKinematicViscosity), DimensionalInitialConditionDomainsDynamicViscosity eddyViscosityCompressible = default(DimensionalInitialConditionDomainsDynamicViscosity), DimensionalInitialConditionDomainsKinematicViscosity nuTilda = default(DimensionalInitialConditionDomainsKinematicViscosity), DimensionalInitialConditionDomainsDynamicViscosity turbulentThermalDiffusivity = default(DimensionalInitialConditionDomainsDynamicViscosity), DimensionalInitialConditionDomainsDynamicViscosity turbulentThermalDiffusivityCompressible = default(DimensionalInitialConditionDomainsDynamicViscosity), DimensionalInitialConditionDomainsDynamicViscosity turbulentDynamicViscosity = default(DimensionalInitialConditionDomainsDynamicViscosity), List<DimensionalInitialConditionDomainsDimensionless> passiveScalars = default(List<DimensionalInitialConditionDomainsDimensionless>), DimensionalInitialConditionDomainsDimensionless phaseFraction = default(DimensionalInitialConditionDomainsDimensionless), DimensionlessInitialConditionDomains phaseFractions = default(DimensionlessInitialConditionDomains), DimensionalInitialConditionDomainsDimensionless relativeHumidity = default(DimensionalInitialConditionDomainsDimensionless))
        {
            this.Pressure = pressure;
            this.PressureRgh = pressureRgh;
            this.GaugePressure = gaugePressure;
            this.GaugePressureRgh = gaugePressureRgh;
            this.Velocity = velocity;
            this.Temperature = temperature;
            this.TurbulentKineticEnergy = turbulentKineticEnergy;
            this.OmegaDissipationRate = omegaDissipationRate;
            this.EpsilonDissipationRate = epsilonDissipationRate;
            this.EddyViscosity = eddyViscosity;
            this.EddyViscosityMultiphase = eddyViscosityMultiphase;
            this.EddyViscosityCompressible = eddyViscosityCompressible;
            this.NuTilda = nuTilda;
            this.TurbulentThermalDiffusivity = turbulentThermalDiffusivity;
            this.TurbulentThermalDiffusivityCompressible = turbulentThermalDiffusivityCompressible;
            this.TurbulentDynamicViscosity = turbulentDynamicViscosity;
            this.PassiveScalars = passiveScalars;
            this.PhaseFraction = phaseFraction;
            this.PhaseFractions = phaseFractions;
            this.RelativeHumidity = relativeHumidity;
        }
        
        /// <summary>
        /// Gets or Sets Pressure
        /// </summary>
        [DataMember(Name="pressure", EmitDefaultValue=false)]
        public DimensionalInitialConditionDomainsPressure Pressure { get; set; }

        /// <summary>
        /// Gets or Sets PressureRgh
        /// </summary>
        [DataMember(Name="pressureRgh", EmitDefaultValue=false)]
        public DimensionalInitialConditionDomainsPressure PressureRgh { get; set; }

        /// <summary>
        /// Gets or Sets GaugePressure
        /// </summary>
        [DataMember(Name="gaugePressure", EmitDefaultValue=false)]
        public DimensionalInitialConditionDomainsPressure GaugePressure { get; set; }

        /// <summary>
        /// Gets or Sets GaugePressureRgh
        /// </summary>
        [DataMember(Name="gaugePressureRgh", EmitDefaultValue=false)]
        public DimensionalInitialConditionDomainsPressure GaugePressureRgh { get; set; }

        /// <summary>
        /// Gets or Sets Velocity
        /// </summary>
        [DataMember(Name="velocity", EmitDefaultValue=false)]
        public DimensionalVectorInitialConditionDomainsSpeed Velocity { get; set; }

        /// <summary>
        /// Gets or Sets Temperature
        /// </summary>
        [DataMember(Name="temperature", EmitDefaultValue=false)]
        public DimensionalInitialConditionDomainsTemperature Temperature { get; set; }

        /// <summary>
        /// Gets or Sets TurbulentKineticEnergy
        /// </summary>
        [DataMember(Name="turbulentKineticEnergy", EmitDefaultValue=false)]
        public DimensionalInitialConditionDomainsTurbulenceKineticEnergy TurbulentKineticEnergy { get; set; }

        /// <summary>
        /// Gets or Sets OmegaDissipationRate
        /// </summary>
        [DataMember(Name="omegaDissipationRate", EmitDefaultValue=false)]
        public DimensionalInitialConditionDomainsSpecificTurbulenceDissipationRate OmegaDissipationRate { get; set; }

        /// <summary>
        /// Gets or Sets EpsilonDissipationRate
        /// </summary>
        [DataMember(Name="epsilonDissipationRate", EmitDefaultValue=false)]
        public DimensionalInitialConditionDomainsTurbulentDissipation EpsilonDissipationRate { get; set; }

        /// <summary>
        /// Gets or Sets EddyViscosity
        /// </summary>
        [DataMember(Name="eddyViscosity", EmitDefaultValue=false)]
        public DimensionalInitialConditionDomainsDynamicViscosity EddyViscosity { get; set; }

        /// <summary>
        /// Gets or Sets EddyViscosityMultiphase
        /// </summary>
        [DataMember(Name="eddyViscosityMultiphase", EmitDefaultValue=false)]
        public DimensionalInitialConditionDomainsKinematicViscosity EddyViscosityMultiphase { get; set; }

        /// <summary>
        /// Gets or Sets EddyViscosityCompressible
        /// </summary>
        [DataMember(Name="eddyViscosityCompressible", EmitDefaultValue=false)]
        public DimensionalInitialConditionDomainsDynamicViscosity EddyViscosityCompressible { get; set; }

        /// <summary>
        /// Gets or Sets NuTilda
        /// </summary>
        [DataMember(Name="nuTilda", EmitDefaultValue=false)]
        public DimensionalInitialConditionDomainsKinematicViscosity NuTilda { get; set; }

        /// <summary>
        /// Gets or Sets TurbulentThermalDiffusivity
        /// </summary>
        [DataMember(Name="turbulentThermalDiffusivity", EmitDefaultValue=false)]
        public DimensionalInitialConditionDomainsDynamicViscosity TurbulentThermalDiffusivity { get; set; }

        /// <summary>
        /// Gets or Sets TurbulentThermalDiffusivityCompressible
        /// </summary>
        [DataMember(Name="turbulentThermalDiffusivityCompressible", EmitDefaultValue=false)]
        public DimensionalInitialConditionDomainsDynamicViscosity TurbulentThermalDiffusivityCompressible { get; set; }

        /// <summary>
        /// Gets or Sets TurbulentDynamicViscosity
        /// </summary>
        [DataMember(Name="turbulentDynamicViscosity", EmitDefaultValue=false)]
        public DimensionalInitialConditionDomainsDynamicViscosity TurbulentDynamicViscosity { get; set; }

        /// <summary>
        /// Gets or Sets PassiveScalars
        /// </summary>
        [DataMember(Name="passiveScalars", EmitDefaultValue=false)]
        public List<DimensionalInitialConditionDomainsDimensionless> PassiveScalars { get; set; }

        /// <summary>
        /// Gets or Sets PhaseFraction
        /// </summary>
        [DataMember(Name="phaseFraction", EmitDefaultValue=false)]
        public DimensionalInitialConditionDomainsDimensionless PhaseFraction { get; set; }

        /// <summary>
        /// Gets or Sets PhaseFractions
        /// </summary>
        [DataMember(Name="phaseFractions", EmitDefaultValue=false)]
        public DimensionlessInitialConditionDomains PhaseFractions { get; set; }

        /// <summary>
        /// Gets or Sets RelativeHumidity
        /// </summary>
        [DataMember(Name="relativeHumidity", EmitDefaultValue=false)]
        public DimensionalInitialConditionDomainsDimensionless RelativeHumidity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FluidInitialConditions {\n");
            sb.Append("  Pressure: ").Append(Pressure).Append("\n");
            sb.Append("  PressureRgh: ").Append(PressureRgh).Append("\n");
            sb.Append("  GaugePressure: ").Append(GaugePressure).Append("\n");
            sb.Append("  GaugePressureRgh: ").Append(GaugePressureRgh).Append("\n");
            sb.Append("  Velocity: ").Append(Velocity).Append("\n");
            sb.Append("  Temperature: ").Append(Temperature).Append("\n");
            sb.Append("  TurbulentKineticEnergy: ").Append(TurbulentKineticEnergy).Append("\n");
            sb.Append("  OmegaDissipationRate: ").Append(OmegaDissipationRate).Append("\n");
            sb.Append("  EpsilonDissipationRate: ").Append(EpsilonDissipationRate).Append("\n");
            sb.Append("  EddyViscosity: ").Append(EddyViscosity).Append("\n");
            sb.Append("  EddyViscosityMultiphase: ").Append(EddyViscosityMultiphase).Append("\n");
            sb.Append("  EddyViscosityCompressible: ").Append(EddyViscosityCompressible).Append("\n");
            sb.Append("  NuTilda: ").Append(NuTilda).Append("\n");
            sb.Append("  TurbulentThermalDiffusivity: ").Append(TurbulentThermalDiffusivity).Append("\n");
            sb.Append("  TurbulentThermalDiffusivityCompressible: ").Append(TurbulentThermalDiffusivityCompressible).Append("\n");
            sb.Append("  TurbulentDynamicViscosity: ").Append(TurbulentDynamicViscosity).Append("\n");
            sb.Append("  PassiveScalars: ").Append(PassiveScalars).Append("\n");
            sb.Append("  PhaseFraction: ").Append(PhaseFraction).Append("\n");
            sb.Append("  PhaseFractions: ").Append(PhaseFractions).Append("\n");
            sb.Append("  RelativeHumidity: ").Append(RelativeHumidity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FluidInitialConditions);
        }

        /// <summary>
        /// Returns true if FluidInitialConditions instances are equal
        /// </summary>
        /// <param name="input">Instance of FluidInitialConditions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FluidInitialConditions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Pressure == input.Pressure ||
                    (this.Pressure != null &&
                    this.Pressure.Equals(input.Pressure))
                ) && 
                (
                    this.PressureRgh == input.PressureRgh ||
                    (this.PressureRgh != null &&
                    this.PressureRgh.Equals(input.PressureRgh))
                ) && 
                (
                    this.GaugePressure == input.GaugePressure ||
                    (this.GaugePressure != null &&
                    this.GaugePressure.Equals(input.GaugePressure))
                ) && 
                (
                    this.GaugePressureRgh == input.GaugePressureRgh ||
                    (this.GaugePressureRgh != null &&
                    this.GaugePressureRgh.Equals(input.GaugePressureRgh))
                ) && 
                (
                    this.Velocity == input.Velocity ||
                    (this.Velocity != null &&
                    this.Velocity.Equals(input.Velocity))
                ) && 
                (
                    this.Temperature == input.Temperature ||
                    (this.Temperature != null &&
                    this.Temperature.Equals(input.Temperature))
                ) && 
                (
                    this.TurbulentKineticEnergy == input.TurbulentKineticEnergy ||
                    (this.TurbulentKineticEnergy != null &&
                    this.TurbulentKineticEnergy.Equals(input.TurbulentKineticEnergy))
                ) && 
                (
                    this.OmegaDissipationRate == input.OmegaDissipationRate ||
                    (this.OmegaDissipationRate != null &&
                    this.OmegaDissipationRate.Equals(input.OmegaDissipationRate))
                ) && 
                (
                    this.EpsilonDissipationRate == input.EpsilonDissipationRate ||
                    (this.EpsilonDissipationRate != null &&
                    this.EpsilonDissipationRate.Equals(input.EpsilonDissipationRate))
                ) && 
                (
                    this.EddyViscosity == input.EddyViscosity ||
                    (this.EddyViscosity != null &&
                    this.EddyViscosity.Equals(input.EddyViscosity))
                ) && 
                (
                    this.EddyViscosityMultiphase == input.EddyViscosityMultiphase ||
                    (this.EddyViscosityMultiphase != null &&
                    this.EddyViscosityMultiphase.Equals(input.EddyViscosityMultiphase))
                ) && 
                (
                    this.EddyViscosityCompressible == input.EddyViscosityCompressible ||
                    (this.EddyViscosityCompressible != null &&
                    this.EddyViscosityCompressible.Equals(input.EddyViscosityCompressible))
                ) && 
                (
                    this.NuTilda == input.NuTilda ||
                    (this.NuTilda != null &&
                    this.NuTilda.Equals(input.NuTilda))
                ) && 
                (
                    this.TurbulentThermalDiffusivity == input.TurbulentThermalDiffusivity ||
                    (this.TurbulentThermalDiffusivity != null &&
                    this.TurbulentThermalDiffusivity.Equals(input.TurbulentThermalDiffusivity))
                ) && 
                (
                    this.TurbulentThermalDiffusivityCompressible == input.TurbulentThermalDiffusivityCompressible ||
                    (this.TurbulentThermalDiffusivityCompressible != null &&
                    this.TurbulentThermalDiffusivityCompressible.Equals(input.TurbulentThermalDiffusivityCompressible))
                ) && 
                (
                    this.TurbulentDynamicViscosity == input.TurbulentDynamicViscosity ||
                    (this.TurbulentDynamicViscosity != null &&
                    this.TurbulentDynamicViscosity.Equals(input.TurbulentDynamicViscosity))
                ) && 
                (
                    this.PassiveScalars == input.PassiveScalars ||
                    this.PassiveScalars != null &&
                    input.PassiveScalars != null &&
                    this.PassiveScalars.SequenceEqual(input.PassiveScalars)
                ) && 
                (
                    this.PhaseFraction == input.PhaseFraction ||
                    (this.PhaseFraction != null &&
                    this.PhaseFraction.Equals(input.PhaseFraction))
                ) && 
                (
                    this.PhaseFractions == input.PhaseFractions ||
                    (this.PhaseFractions != null &&
                    this.PhaseFractions.Equals(input.PhaseFractions))
                ) && 
                (
                    this.RelativeHumidity == input.RelativeHumidity ||
                    (this.RelativeHumidity != null &&
                    this.RelativeHumidity.Equals(input.RelativeHumidity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Pressure != null)
                    hashCode = hashCode * 59 + this.Pressure.GetHashCode();
                if (this.PressureRgh != null)
                    hashCode = hashCode * 59 + this.PressureRgh.GetHashCode();
                if (this.GaugePressure != null)
                    hashCode = hashCode * 59 + this.GaugePressure.GetHashCode();
                if (this.GaugePressureRgh != null)
                    hashCode = hashCode * 59 + this.GaugePressureRgh.GetHashCode();
                if (this.Velocity != null)
                    hashCode = hashCode * 59 + this.Velocity.GetHashCode();
                if (this.Temperature != null)
                    hashCode = hashCode * 59 + this.Temperature.GetHashCode();
                if (this.TurbulentKineticEnergy != null)
                    hashCode = hashCode * 59 + this.TurbulentKineticEnergy.GetHashCode();
                if (this.OmegaDissipationRate != null)
                    hashCode = hashCode * 59 + this.OmegaDissipationRate.GetHashCode();
                if (this.EpsilonDissipationRate != null)
                    hashCode = hashCode * 59 + this.EpsilonDissipationRate.GetHashCode();
                if (this.EddyViscosity != null)
                    hashCode = hashCode * 59 + this.EddyViscosity.GetHashCode();
                if (this.EddyViscosityMultiphase != null)
                    hashCode = hashCode * 59 + this.EddyViscosityMultiphase.GetHashCode();
                if (this.EddyViscosityCompressible != null)
                    hashCode = hashCode * 59 + this.EddyViscosityCompressible.GetHashCode();
                if (this.NuTilda != null)
                    hashCode = hashCode * 59 + this.NuTilda.GetHashCode();
                if (this.TurbulentThermalDiffusivity != null)
                    hashCode = hashCode * 59 + this.TurbulentThermalDiffusivity.GetHashCode();
                if (this.TurbulentThermalDiffusivityCompressible != null)
                    hashCode = hashCode * 59 + this.TurbulentThermalDiffusivityCompressible.GetHashCode();
                if (this.TurbulentDynamicViscosity != null)
                    hashCode = hashCode * 59 + this.TurbulentDynamicViscosity.GetHashCode();
                if (this.PassiveScalars != null)
                    hashCode = hashCode * 59 + this.PassiveScalars.GetHashCode();
                if (this.PhaseFraction != null)
                    hashCode = hashCode * 59 + this.PhaseFraction.GetHashCode();
                if (this.PhaseFractions != null)
                    hashCode = hashCode * 59 + this.PhaseFractions.GetHashCode();
                if (this.RelativeHumidity != null)
                    hashCode = hashCode * 59 + this.RelativeHumidity.GetHashCode();
                return hashCode;
            }
        }

    }

}
