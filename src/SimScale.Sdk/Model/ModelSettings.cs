/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// ModelSettings
    /// </summary>
    [DataContract]
    public partial class ModelSettings : IEquatable<ModelSettings>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelSettings" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModelSettings() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelSettings" /> class.
        /// </summary>
        /// <param name="parts">The parts to show or hide in the report (see hideSelectedParts)..</param>
        /// <param name="hideSelectedParts">If set to true, the parts array indicates the hidden parts, while the rest of the model parts are visible (blacklist). On the other hand, if set to false, then the parts array indicate the visible parts while the rest of the model parts are hidden (whitelist). If the parts array is empty, then setting this value to true will hide all the model parts, while setting it to false will show all the model parts. (required) (default to false).</param>
        /// <param name="showVolumes">If set to false, then volumes will be hidden unless they are mentioned explicitly, i.e. when a volume is included in the parts array, and hideSelectedParts is set to false. (default to false).</param>
        /// <param name="scalarField">scalarField.</param>
        /// <param name="scalarSettings">scalarSettings.</param>
        /// <param name="vectorSettings">The settings for the different vectors of the model..</param>
        public ModelSettings(List<Part> parts = default(List<Part>), bool? hideSelectedParts = false, bool? showVolumes = default(bool?), ScalarField scalarField = default(ScalarField), List<ScalarSettings> scalarSettings = default(List<ScalarSettings>), List<VectorSettings> vectorSettings = default(List<VectorSettings>))
        {
            // to ensure "hideSelectedParts" is required (not null)
            this.HideSelectedParts = hideSelectedParts ?? throw new ArgumentNullException("hideSelectedParts is a required property for ModelSettings and cannot be null");
            this.Parts = parts;
            this.ShowVolumes = showVolumes;
            this.ScalarField = scalarField;
            this.ScalarSettings = scalarSettings;
            this.VectorSettings = vectorSettings;
        }
        
        /// <summary>
        /// The parts to show or hide in the report (see hideSelectedParts).
        /// </summary>
        /// <value>The parts to show or hide in the report (see hideSelectedParts).</value>
        [DataMember(Name="parts", EmitDefaultValue=false)]
        public List<Part> Parts { get; set; }

        /// <summary>
        /// If set to true, the parts array indicates the hidden parts, while the rest of the model parts are visible (blacklist). On the other hand, if set to false, then the parts array indicate the visible parts while the rest of the model parts are hidden (whitelist). If the parts array is empty, then setting this value to true will hide all the model parts, while setting it to false will show all the model parts.
        /// </summary>
        /// <value>If set to true, the parts array indicates the hidden parts, while the rest of the model parts are visible (blacklist). On the other hand, if set to false, then the parts array indicate the visible parts while the rest of the model parts are hidden (whitelist). If the parts array is empty, then setting this value to true will hide all the model parts, while setting it to false will show all the model parts.</value>
        [DataMember(Name="hideSelectedParts", EmitDefaultValue=false)]
        public bool? HideSelectedParts { get; set; }

        /// <summary>
        /// If set to false, then volumes will be hidden unless they are mentioned explicitly, i.e. when a volume is included in the parts array, and hideSelectedParts is set to false.
        /// </summary>
        /// <value>If set to false, then volumes will be hidden unless they are mentioned explicitly, i.e. when a volume is included in the parts array, and hideSelectedParts is set to false.</value>
        [DataMember(Name="showVolumes", EmitDefaultValue=false)]
        public bool? ShowVolumes { get; set; }

        /// <summary>
        /// Gets or Sets ScalarField
        /// </summary>
        [DataMember(Name="scalarField", EmitDefaultValue=false)]
        public ScalarField ScalarField { get; set; }

        /// <summary>
        /// Gets or Sets ScalarSettings
        /// </summary>
        [DataMember(Name="scalarSettings", EmitDefaultValue=false)]
        public List<ScalarSettings> ScalarSettings { get; set; }

        /// <summary>
        /// The settings for the different vectors of the model.
        /// </summary>
        /// <value>The settings for the different vectors of the model.</value>
        [DataMember(Name="vectorSettings", EmitDefaultValue=false)]
        public List<VectorSettings> VectorSettings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelSettings {\n");
            sb.Append("  Parts: ").Append(Parts).Append("\n");
            sb.Append("  HideSelectedParts: ").Append(HideSelectedParts).Append("\n");
            sb.Append("  ShowVolumes: ").Append(ShowVolumes).Append("\n");
            sb.Append("  ScalarField: ").Append(ScalarField).Append("\n");
            sb.Append("  ScalarSettings: ").Append(ScalarSettings).Append("\n");
            sb.Append("  VectorSettings: ").Append(VectorSettings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelSettings);
        }

        /// <summary>
        /// Returns true if ModelSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Parts == input.Parts ||
                    this.Parts != null &&
                    input.Parts != null &&
                    this.Parts.SequenceEqual(input.Parts)
                ) && 
                (
                    this.HideSelectedParts == input.HideSelectedParts ||
                    (this.HideSelectedParts != null &&
                    this.HideSelectedParts.Equals(input.HideSelectedParts))
                ) && 
                (
                    this.ShowVolumes == input.ShowVolumes ||
                    (this.ShowVolumes != null &&
                    this.ShowVolumes.Equals(input.ShowVolumes))
                ) && 
                (
                    this.ScalarField == input.ScalarField ||
                    (this.ScalarField != null &&
                    this.ScalarField.Equals(input.ScalarField))
                ) && 
                (
                    this.ScalarSettings == input.ScalarSettings ||
                    this.ScalarSettings != null &&
                    input.ScalarSettings != null &&
                    this.ScalarSettings.SequenceEqual(input.ScalarSettings)
                ) && 
                (
                    this.VectorSettings == input.VectorSettings ||
                    this.VectorSettings != null &&
                    input.VectorSettings != null &&
                    this.VectorSettings.SequenceEqual(input.VectorSettings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Parts != null)
                    hashCode = hashCode * 59 + this.Parts.GetHashCode();
                if (this.HideSelectedParts != null)
                    hashCode = hashCode * 59 + this.HideSelectedParts.GetHashCode();
                if (this.ShowVolumes != null)
                    hashCode = hashCode * 59 + this.ShowVolumes.GetHashCode();
                if (this.ScalarField != null)
                    hashCode = hashCode * 59 + this.ScalarField.GetHashCode();
                if (this.ScalarSettings != null)
                    hashCode = hashCode * 59 + this.ScalarSettings.GetHashCode();
                if (this.VectorSettings != null)
                    hashCode = hashCode * 59 + this.VectorSettings.GetHashCode();
                return hashCode;
            }
        }

    }

}
