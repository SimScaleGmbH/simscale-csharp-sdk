/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// Project
    /// </summary>
    [DataContract]
    public partial class Project : IEquatable<Project>
    {
        /// <summary>
        /// The measurement system of the project. Can&#39;t be modifed.
        /// </summary>
        /// <value>The measurement system of the project. Can&#39;t be modifed.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MeasurementSystemEnum
        {
            /// <summary>
            /// Enum SI for value: SI
            /// </summary>
            [EnumMember(Value = "SI")]
            SI = 1,

            /// <summary>
            /// Enum USCUSTOMARY for value: US_CUSTOMARY
            /// </summary>
            [EnumMember(Value = "US_CUSTOMARY")]
            USCUSTOMARY = 2

        }

        /// <summary>
        /// The measurement system of the project. Can&#39;t be modifed.
        /// </summary>
        /// <value>The measurement system of the project. Can&#39;t be modifed.</value>
        [DataMember(Name="measurementSystem", EmitDefaultValue=false)]
        public MeasurementSystemEnum MeasurementSystem { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Project" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Project() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Project" /> class.
        /// </summary>
        /// <param name="spaceId">Always returned by the backend. Optional at project creation. If missing, the project will be created in the Personal Space of the user..</param>
        /// <param name="parentFolderId">If missing, the project is located at the root level of the Space..</param>
        /// <param name="name">The project title should contain the application you want to analyze as well as the simulation method you want to use, e.g. &#39;Heat exchanger - CHT simulation&#39;.  (required).</param>
        /// <param name="description">A meaningful description of the project. (required).</param>
        /// <param name="measurementSystem">The measurement system of the project. Can&#39;t be modifed. (required) (default to MeasurementSystemEnum.SI).</param>
        /// <param name="tags">tags.</param>
        public Project(Guid? spaceId = default(Guid?), Guid? parentFolderId = default(Guid?), string name = default(string), string description = default(string), MeasurementSystemEnum measurementSystem = MeasurementSystemEnum.SI, List<string> tags = default(List<string>))
        {
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for Project and cannot be null");
            // to ensure "description" is required (not null)
            this.Description = description ?? throw new ArgumentNullException("description is a required property for Project and cannot be null");
            this.MeasurementSystem = measurementSystem;
            this.SpaceId = spaceId;
            this.ParentFolderId = parentFolderId;
            this.Tags = tags;
        }
        
        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        [DataMember(Name="projectId", EmitDefaultValue=false)]
        public string ProjectId { get; private set; }

        /// <summary>
        /// Always returned by the backend. Optional at project creation. If missing, the project will be created in the Personal Space of the user.
        /// </summary>
        /// <value>Always returned by the backend. Optional at project creation. If missing, the project will be created in the Personal Space of the user.</value>
        [DataMember(Name="spaceId", EmitDefaultValue=false)]
        public Guid? SpaceId { get; set; }

        /// <summary>
        /// If missing, the project is located at the root level of the Space.
        /// </summary>
        /// <value>If missing, the project is located at the root level of the Space.</value>
        [DataMember(Name="parentFolderId", EmitDefaultValue=false)]
        public Guid? ParentFolderId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public DateTimeOffset? CreatedAt { get; private set; }

        /// <summary>
        /// The project title should contain the application you want to analyze as well as the simulation method you want to use, e.g. &#39;Heat exchanger - CHT simulation&#39;. 
        /// </summary>
        /// <value>The project title should contain the application you want to analyze as well as the simulation method you want to use, e.g. &#39;Heat exchanger - CHT simulation&#39;. </value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// A meaningful description of the project.
        /// </summary>
        /// <value>A meaningful description of the project.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Project {\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  SpaceId: ").Append(SpaceId).Append("\n");
            sb.Append("  ParentFolderId: ").Append(ParentFolderId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  MeasurementSystem: ").Append(MeasurementSystem).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Project);
        }

        /// <summary>
        /// Returns true if Project instances are equal
        /// </summary>
        /// <param name="input">Instance of Project to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Project input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProjectId == input.ProjectId ||
                    (this.ProjectId != null &&
                    this.ProjectId.Equals(input.ProjectId))
                ) && 
                (
                    this.SpaceId == input.SpaceId ||
                    (this.SpaceId != null &&
                    this.SpaceId.Equals(input.SpaceId))
                ) && 
                (
                    this.ParentFolderId == input.ParentFolderId ||
                    (this.ParentFolderId != null &&
                    this.ParentFolderId.Equals(input.ParentFolderId))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.MeasurementSystem == input.MeasurementSystem ||
                    this.MeasurementSystem.Equals(input.MeasurementSystem)
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProjectId != null)
                    hashCode = hashCode * 59 + this.ProjectId.GetHashCode();
                if (this.SpaceId != null)
                    hashCode = hashCode * 59 + this.SpaceId.GetHashCode();
                if (this.ParentFolderId != null)
                    hashCode = hashCode * 59 + this.ParentFolderId.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                hashCode = hashCode * 59 + this.MeasurementSystem.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                return hashCode;
            }
        }

    }

}
