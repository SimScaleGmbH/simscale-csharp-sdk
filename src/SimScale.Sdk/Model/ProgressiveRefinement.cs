/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// ProgressiveRefinement
    /// </summary>
    [DataContract]
    public partial class ProgressiveRefinement : IEquatable<ProgressiveRefinement>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProgressiveRefinement" /> class.
        /// </summary>
        /// <param name="enableProgressiveRefinement">enableProgressiveRefinement (default to true).</param>
        /// <param name="baseRefinementFraction">baseRefinementFraction (default to 0.4M).</param>
        /// <param name="fullRefinementFraction">fullRefinementFraction (default to 0.3M).</param>
        public ProgressiveRefinement(bool? enableProgressiveRefinement = default(bool?), decimal? baseRefinementFraction = default(decimal?), decimal? fullRefinementFraction = default(decimal?))
        {
            this.EnableProgressiveRefinement = enableProgressiveRefinement;
            this.BaseRefinementFraction = baseRefinementFraction;
            this.FullRefinementFraction = fullRefinementFraction;
        }
        
        /// <summary>
        /// Gets or Sets EnableProgressiveRefinement
        /// </summary>
        [DataMember(Name="enableProgressiveRefinement", EmitDefaultValue=false)]
        public bool? EnableProgressiveRefinement { get; set; }

        /// <summary>
        /// Gets or Sets BaseRefinementFraction
        /// </summary>
        [DataMember(Name="baseRefinementFraction", EmitDefaultValue=false)]
        public decimal? BaseRefinementFraction { get; set; }

        /// <summary>
        /// Gets or Sets FullRefinementFraction
        /// </summary>
        [DataMember(Name="fullRefinementFraction", EmitDefaultValue=false)]
        public decimal? FullRefinementFraction { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProgressiveRefinement {\n");
            sb.Append("  EnableProgressiveRefinement: ").Append(EnableProgressiveRefinement).Append("\n");
            sb.Append("  BaseRefinementFraction: ").Append(BaseRefinementFraction).Append("\n");
            sb.Append("  FullRefinementFraction: ").Append(FullRefinementFraction).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProgressiveRefinement);
        }

        /// <summary>
        /// Returns true if ProgressiveRefinement instances are equal
        /// </summary>
        /// <param name="input">Instance of ProgressiveRefinement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProgressiveRefinement input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EnableProgressiveRefinement == input.EnableProgressiveRefinement ||
                    (this.EnableProgressiveRefinement != null &&
                    this.EnableProgressiveRefinement.Equals(input.EnableProgressiveRefinement))
                ) && 
                (
                    this.BaseRefinementFraction == input.BaseRefinementFraction ||
                    (this.BaseRefinementFraction != null &&
                    this.BaseRefinementFraction.Equals(input.BaseRefinementFraction))
                ) && 
                (
                    this.FullRefinementFraction == input.FullRefinementFraction ||
                    (this.FullRefinementFraction != null &&
                    this.FullRefinementFraction.Equals(input.FullRefinementFraction))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EnableProgressiveRefinement != null)
                    hashCode = hashCode * 59 + this.EnableProgressiveRefinement.GetHashCode();
                if (this.BaseRefinementFraction != null)
                    hashCode = hashCode * 59 + this.BaseRefinementFraction.GetHashCode();
                if (this.FullRefinementFraction != null)
                    hashCode = hashCode * 59 + this.FullRefinementFraction.GetHashCode();
                return hashCode;
            }
        }

    }

}
