/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// DeprecatedSimmetrixBoundaryLayerRefinement
    /// </summary>
    [DataContract]
    public partial class DeprecatedSimmetrixBoundaryLayerRefinement : IEquatable<DeprecatedSimmetrixBoundaryLayerRefinement>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeprecatedSimmetrixBoundaryLayerRefinement" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DeprecatedSimmetrixBoundaryLayerRefinement() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeprecatedSimmetrixBoundaryLayerRefinement" /> class.
        /// </summary>
        /// <param name="type">type (required) (default to &quot;SIMMETRIX_BOUNDARY_LAYER_V8&quot;).</param>
        /// <param name="name">name (default to &quot;Inflate boundary layer&quot;).</param>
        /// <param name="numberOfLayers">numberOfLayers (default to 3).</param>
        /// <param name="relativeSize">relativeSize.</param>
        /// <param name="growthRate">growthRate (default to 1.5M).</param>
        /// <param name="topologicalReference">topologicalReference.</param>
        public DeprecatedSimmetrixBoundaryLayerRefinement(string type = "SIMMETRIX_BOUNDARY_LAYER_V8", string name = default(string), int? numberOfLayers = default(int?), OneOfDeprecatedSimmetrixBoundaryLayerRefinementRelativeSize relativeSize = default(OneOfDeprecatedSimmetrixBoundaryLayerRefinementRelativeSize), decimal? growthRate = default(decimal?), TopologicalReference topologicalReference = default(TopologicalReference))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for DeprecatedSimmetrixBoundaryLayerRefinement and cannot be null");
            this.Name = name;
            this.NumberOfLayers = numberOfLayers;
            this.RelativeSize = relativeSize;
            this.GrowthRate = growthRate;
            this.TopologicalReference = topologicalReference;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfLayers
        /// </summary>
        [DataMember(Name="numberOfLayers", EmitDefaultValue=false)]
        public int? NumberOfLayers { get; set; }

        /// <summary>
        /// Gets or Sets RelativeSize
        /// </summary>
        [DataMember(Name="relativeSize", EmitDefaultValue=false)]
        public OneOfDeprecatedSimmetrixBoundaryLayerRefinementRelativeSize RelativeSize { get; set; }

        /// <summary>
        /// Gets or Sets GrowthRate
        /// </summary>
        [DataMember(Name="growthRate", EmitDefaultValue=false)]
        public decimal? GrowthRate { get; set; }

        /// <summary>
        /// Gets or Sets TopologicalReference
        /// </summary>
        [DataMember(Name="topologicalReference", EmitDefaultValue=false)]
        public TopologicalReference TopologicalReference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeprecatedSimmetrixBoundaryLayerRefinement {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NumberOfLayers: ").Append(NumberOfLayers).Append("\n");
            sb.Append("  RelativeSize: ").Append(RelativeSize).Append("\n");
            sb.Append("  GrowthRate: ").Append(GrowthRate).Append("\n");
            sb.Append("  TopologicalReference: ").Append(TopologicalReference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeprecatedSimmetrixBoundaryLayerRefinement);
        }

        /// <summary>
        /// Returns true if DeprecatedSimmetrixBoundaryLayerRefinement instances are equal
        /// </summary>
        /// <param name="input">Instance of DeprecatedSimmetrixBoundaryLayerRefinement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeprecatedSimmetrixBoundaryLayerRefinement input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.NumberOfLayers == input.NumberOfLayers ||
                    (this.NumberOfLayers != null &&
                    this.NumberOfLayers.Equals(input.NumberOfLayers))
                ) && 
                (
                    this.RelativeSize == input.RelativeSize ||
                    (this.RelativeSize != null &&
                    this.RelativeSize.Equals(input.RelativeSize))
                ) && 
                (
                    this.GrowthRate == input.GrowthRate ||
                    (this.GrowthRate != null &&
                    this.GrowthRate.Equals(input.GrowthRate))
                ) && 
                (
                    this.TopologicalReference == input.TopologicalReference ||
                    (this.TopologicalReference != null &&
                    this.TopologicalReference.Equals(input.TopologicalReference))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.NumberOfLayers != null)
                    hashCode = hashCode * 59 + this.NumberOfLayers.GetHashCode();
                if (this.RelativeSize != null)
                    hashCode = hashCode * 59 + this.RelativeSize.GetHashCode();
                if (this.GrowthRate != null)
                    hashCode = hashCode * 59 + this.GrowthRate.GetHashCode();
                if (this.TopologicalReference != null)
                    hashCode = hashCode * 59 + this.TopologicalReference.GetHashCode();
                return hashCode;
            }
        }

    }

}
