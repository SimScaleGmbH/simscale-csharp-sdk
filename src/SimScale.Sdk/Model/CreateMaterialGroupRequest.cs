/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// CreateMaterialGroupRequest
    /// </summary>
    [DataContract]
    public partial class CreateMaterialGroupRequest : IEquatable<CreateMaterialGroupRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateMaterialGroupRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateMaterialGroupRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateMaterialGroupRequest" /> class.
        /// </summary>
        /// <param name="name">The name of the material group. (required).</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="_public">_public (default to false).</param>
        /// <param name="ownerGroupId">The material group will be assigned to this owner group. This field can only be used by support group members..</param>
        public CreateMaterialGroupRequest(string name = default(string), Object metadata = default(Object), bool? _public = default(bool?), int? ownerGroupId = default(int?))
        {
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for CreateMaterialGroupRequest and cannot be null");
            this.Metadata = metadata;
            this.Public = _public;
            this.OwnerGroupId = ownerGroupId;
        }
        
        /// <summary>
        /// The name of the material group.
        /// </summary>
        /// <value>The name of the material group.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Object Metadata { get; set; }

        /// <summary>
        /// Gets or Sets Public
        /// </summary>
        [DataMember(Name="public", EmitDefaultValue=false)]
        public bool? Public { get; set; }

        /// <summary>
        /// The material group will be assigned to this owner group. This field can only be used by support group members.
        /// </summary>
        /// <value>The material group will be assigned to this owner group. This field can only be used by support group members.</value>
        [DataMember(Name="ownerGroupId", EmitDefaultValue=false)]
        public int? OwnerGroupId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateMaterialGroupRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Public: ").Append(Public).Append("\n");
            sb.Append("  OwnerGroupId: ").Append(OwnerGroupId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateMaterialGroupRequest);
        }

        /// <summary>
        /// Returns true if CreateMaterialGroupRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateMaterialGroupRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateMaterialGroupRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.Public == input.Public ||
                    (this.Public != null &&
                    this.Public.Equals(input.Public))
                ) && 
                (
                    this.OwnerGroupId == input.OwnerGroupId ||
                    (this.OwnerGroupId != null &&
                    this.OwnerGroupId.Equals(input.OwnerGroupId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.Public != null)
                    hashCode = hashCode * 59 + this.Public.GetHashCode();
                if (this.OwnerGroupId != null)
                    hashCode = hashCode * 59 + this.OwnerGroupId.GetHashCode();
                return hashCode;
            }
        }

    }

}
