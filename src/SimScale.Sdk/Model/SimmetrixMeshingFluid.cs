/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// SimmetrixMeshingFluid
    /// </summary>
    [DataContract]
    public partial class SimmetrixMeshingFluid : Algorithm, IEquatable<SimmetrixMeshingFluid>
    {
        /// <summary>
        /// &lt;p&gt;Selecting more processor cores might speed up the meshing process. Choosing a smaller computation instance will save core hours. &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/meshing/#number-of-processors&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;Selecting more processor cores might speed up the meshing process. Choosing a smaller computation instance will save core hours. &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/meshing/#number-of-processors&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.&lt;/p&gt;</value>
        public enum NumOfProcessorsEnum
        {
            /// <summary>
            /// Enum NUMBER_MINUS_1 for value: -1
            /// </summary>
            NUMBER_MINUS_1 = -1,

            /// <summary>
            /// Enum NUMBER_4 for value: 4
            /// </summary>
            NUMBER_4 = 4,

            /// <summary>
            /// Enum NUMBER_8 for value: 8
            /// </summary>
            NUMBER_8 = 8,

            /// <summary>
            /// Enum NUMBER_16 for value: 16
            /// </summary>
            NUMBER_16 = 16,

            /// <summary>
            /// Enum NUMBER_32 for value: 32
            /// </summary>
            NUMBER_32 = 32,

            /// <summary>
            /// Enum NUMBER_64 for value: 64
            /// </summary>
            NUMBER_64 = 64,

            /// <summary>
            /// Enum NUMBER_96 for value: 96
            /// </summary>
            NUMBER_96 = 96

        }

        /// <summary>
        /// &lt;p&gt;Selecting more processor cores might speed up the meshing process. Choosing a smaller computation instance will save core hours. &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/meshing/#number-of-processors&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;Selecting more processor cores might speed up the meshing process. Choosing a smaller computation instance will save core hours. &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/meshing/#number-of-processors&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.&lt;/p&gt;</value>
        [DataMember(Name="numOfProcessors", EmitDefaultValue=false)]
        public NumOfProcessorsEnum? NumOfProcessors { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SimmetrixMeshingFluid" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SimmetrixMeshingFluid() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SimmetrixMeshingFluid" /> class.
        /// </summary>
        /// <param name="type">type (required) (default to &quot;SIMMETRIX_MESHING_FLUID_V16&quot;).</param>
        /// <param name="sizing">sizing.</param>
        /// <param name="refinements">refinements.</param>
        /// <param name="cellZones">cellZones.</param>
        /// <param name="automaticLayerSettings">automaticLayerSettings.</param>
        /// <param name="physicsBasedMeshing">Physics-based meshing takes setup information like materials, boundary conditions, and source terms into account to size the mesh accordingly. When enabled, the following adaptations will be made:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Refinements on inlets and outlets&lt;/li&gt;&lt;li&gt;Boundary layer addition on walls&lt;/li&gt;&lt;/ul&gt; &lt;br&gt;When toggled on users don’t have to worry about creating a &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/simulation-control/&#39; target&#x3D;&#39;_blank&#39;&gt;separate cell zone&lt;/a&gt;. (default to true).</param>
        /// <param name="hexCore">&lt;p&gt;If &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/meshing/standard/#hexcore&#39; target&#x3D;&#39;_blank&#39;&gt;&lt;b&gt;Hex element core&lt;/b&gt;&lt;/a&gt; is activated, the interior of the mesh gets covered by &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/meshing/standard/#hexcore&#39; target&#x3D;&#39;_blank&#39;&gt;&lt;b&gt;hexahedral elements&lt;/b&gt;&lt;/a&gt;. The transition to the triangulated surface mesh is covered by tetrahedral and pyramid elements.&lt;img src&#x3D;\&quot;/spec/resources/help/imgs/simmetrix-hexcore.png\&quot; class&#x3D;\&quot;helpPopupImage\&quot;/&gt;Meshclip through a hex-core mesh.&lt;/p&gt; (default to true).</param>
        /// <param name="numOfProcessors">&lt;p&gt;Selecting more processor cores might speed up the meshing process. Choosing a smaller computation instance will save core hours. &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/meshing/#number-of-processors&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.&lt;/p&gt; (default to NumOfProcessorsEnum.NUMBER_MINUS_1).</param>
        /// <param name="advancedSimmetrixSettings">advancedSimmetrixSettings.</param>
        public SimmetrixMeshingFluid(string type = "SIMMETRIX_MESHING_FLUID_V16", OneOfSimmetrixMeshingFluidSizing sizing = default(OneOfSimmetrixMeshingFluidSizing), List<OneOfSimmetrixMeshingFluidRefinements> refinements = default(List<OneOfSimmetrixMeshingFluidRefinements>), List<SimmetrixCellZones> cellZones = default(List<SimmetrixCellZones>), OneOfSimmetrixMeshingFluidAutomaticLayerSettings automaticLayerSettings = default(OneOfSimmetrixMeshingFluidAutomaticLayerSettings), bool? physicsBasedMeshing = default(bool?), bool? hexCore = default(bool?), NumOfProcessorsEnum? numOfProcessors = default(NumOfProcessorsEnum?), AdvancedSimmetrixFluidSettings advancedSimmetrixSettings = default(AdvancedSimmetrixFluidSettings))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for SimmetrixMeshingFluid and cannot be null");
            this.Sizing = sizing;
            this.Refinements = refinements;
            this.CellZones = cellZones;
            this.AutomaticLayerSettings = automaticLayerSettings;
            this.PhysicsBasedMeshing = physicsBasedMeshing;
            this.HexCore = hexCore;
            this.NumOfProcessors = numOfProcessors;
            this.AdvancedSimmetrixSettings = advancedSimmetrixSettings;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Sizing
        /// </summary>
        [DataMember(Name="sizing", EmitDefaultValue=false)]
        public OneOfSimmetrixMeshingFluidSizing Sizing { get; set; }

        /// <summary>
        /// Gets or Sets Refinements
        /// </summary>
        [DataMember(Name="refinements", EmitDefaultValue=false)]
        public List<OneOfSimmetrixMeshingFluidRefinements> Refinements { get; set; }

        /// <summary>
        /// Gets or Sets CellZones
        /// </summary>
        [DataMember(Name="cellZones", EmitDefaultValue=false)]
        public List<SimmetrixCellZones> CellZones { get; set; }

        /// <summary>
        /// Gets or Sets AutomaticLayerSettings
        /// </summary>
        [DataMember(Name="automaticLayerSettings", EmitDefaultValue=false)]
        public OneOfSimmetrixMeshingFluidAutomaticLayerSettings AutomaticLayerSettings { get; set; }

        /// <summary>
        /// Physics-based meshing takes setup information like materials, boundary conditions, and source terms into account to size the mesh accordingly. When enabled, the following adaptations will be made:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Refinements on inlets and outlets&lt;/li&gt;&lt;li&gt;Boundary layer addition on walls&lt;/li&gt;&lt;/ul&gt; &lt;br&gt;When toggled on users don’t have to worry about creating a &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/simulation-control/&#39; target&#x3D;&#39;_blank&#39;&gt;separate cell zone&lt;/a&gt;.
        /// </summary>
        /// <value>Physics-based meshing takes setup information like materials, boundary conditions, and source terms into account to size the mesh accordingly. When enabled, the following adaptations will be made:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Refinements on inlets and outlets&lt;/li&gt;&lt;li&gt;Boundary layer addition on walls&lt;/li&gt;&lt;/ul&gt; &lt;br&gt;When toggled on users don’t have to worry about creating a &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/simulation-control/&#39; target&#x3D;&#39;_blank&#39;&gt;separate cell zone&lt;/a&gt;.</value>
        [DataMember(Name="physicsBasedMeshing", EmitDefaultValue=false)]
        public bool? PhysicsBasedMeshing { get; set; }

        /// <summary>
        /// &lt;p&gt;If &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/meshing/standard/#hexcore&#39; target&#x3D;&#39;_blank&#39;&gt;&lt;b&gt;Hex element core&lt;/b&gt;&lt;/a&gt; is activated, the interior of the mesh gets covered by &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/meshing/standard/#hexcore&#39; target&#x3D;&#39;_blank&#39;&gt;&lt;b&gt;hexahedral elements&lt;/b&gt;&lt;/a&gt;. The transition to the triangulated surface mesh is covered by tetrahedral and pyramid elements.&lt;img src&#x3D;\&quot;/spec/resources/help/imgs/simmetrix-hexcore.png\&quot; class&#x3D;\&quot;helpPopupImage\&quot;/&gt;Meshclip through a hex-core mesh.&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;If &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/meshing/standard/#hexcore&#39; target&#x3D;&#39;_blank&#39;&gt;&lt;b&gt;Hex element core&lt;/b&gt;&lt;/a&gt; is activated, the interior of the mesh gets covered by &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/meshing/standard/#hexcore&#39; target&#x3D;&#39;_blank&#39;&gt;&lt;b&gt;hexahedral elements&lt;/b&gt;&lt;/a&gt;. The transition to the triangulated surface mesh is covered by tetrahedral and pyramid elements.&lt;img src&#x3D;\&quot;/spec/resources/help/imgs/simmetrix-hexcore.png\&quot; class&#x3D;\&quot;helpPopupImage\&quot;/&gt;Meshclip through a hex-core mesh.&lt;/p&gt;</value>
        [DataMember(Name="hexCore", EmitDefaultValue=false)]
        public bool? HexCore { get; set; }

        /// <summary>
        /// Gets or Sets AdvancedSimmetrixSettings
        /// </summary>
        [DataMember(Name="advancedSimmetrixSettings", EmitDefaultValue=false)]
        public AdvancedSimmetrixFluidSettings AdvancedSimmetrixSettings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SimmetrixMeshingFluid {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Sizing: ").Append(Sizing).Append("\n");
            sb.Append("  Refinements: ").Append(Refinements).Append("\n");
            sb.Append("  CellZones: ").Append(CellZones).Append("\n");
            sb.Append("  AutomaticLayerSettings: ").Append(AutomaticLayerSettings).Append("\n");
            sb.Append("  PhysicsBasedMeshing: ").Append(PhysicsBasedMeshing).Append("\n");
            sb.Append("  HexCore: ").Append(HexCore).Append("\n");
            sb.Append("  NumOfProcessors: ").Append(NumOfProcessors).Append("\n");
            sb.Append("  AdvancedSimmetrixSettings: ").Append(AdvancedSimmetrixSettings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SimmetrixMeshingFluid);
        }

        /// <summary>
        /// Returns true if SimmetrixMeshingFluid instances are equal
        /// </summary>
        /// <param name="input">Instance of SimmetrixMeshingFluid to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SimmetrixMeshingFluid input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Sizing == input.Sizing ||
                    (this.Sizing != null &&
                    this.Sizing.Equals(input.Sizing))
                ) && 
                (
                    this.Refinements == input.Refinements ||
                    this.Refinements != null &&
                    input.Refinements != null &&
                    this.Refinements.SequenceEqual(input.Refinements)
                ) && 
                (
                    this.CellZones == input.CellZones ||
                    this.CellZones != null &&
                    input.CellZones != null &&
                    this.CellZones.SequenceEqual(input.CellZones)
                ) && 
                (
                    this.AutomaticLayerSettings == input.AutomaticLayerSettings ||
                    (this.AutomaticLayerSettings != null &&
                    this.AutomaticLayerSettings.Equals(input.AutomaticLayerSettings))
                ) && 
                (
                    this.PhysicsBasedMeshing == input.PhysicsBasedMeshing ||
                    (this.PhysicsBasedMeshing != null &&
                    this.PhysicsBasedMeshing.Equals(input.PhysicsBasedMeshing))
                ) && 
                (
                    this.HexCore == input.HexCore ||
                    (this.HexCore != null &&
                    this.HexCore.Equals(input.HexCore))
                ) && 
                (
                    this.NumOfProcessors == input.NumOfProcessors ||
                    this.NumOfProcessors.Equals(input.NumOfProcessors)
                ) && 
                (
                    this.AdvancedSimmetrixSettings == input.AdvancedSimmetrixSettings ||
                    (this.AdvancedSimmetrixSettings != null &&
                    this.AdvancedSimmetrixSettings.Equals(input.AdvancedSimmetrixSettings))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Sizing != null)
                    hashCode = hashCode * 59 + this.Sizing.GetHashCode();
                if (this.Refinements != null)
                    hashCode = hashCode * 59 + this.Refinements.GetHashCode();
                if (this.CellZones != null)
                    hashCode = hashCode * 59 + this.CellZones.GetHashCode();
                if (this.AutomaticLayerSettings != null)
                    hashCode = hashCode * 59 + this.AutomaticLayerSettings.GetHashCode();
                if (this.PhysicsBasedMeshing != null)
                    hashCode = hashCode * 59 + this.PhysicsBasedMeshing.GetHashCode();
                if (this.HexCore != null)
                    hashCode = hashCode * 59 + this.HexCore.GetHashCode();
                hashCode = hashCode * 59 + this.NumOfProcessors.GetHashCode();
                if (this.AdvancedSimmetrixSettings != null)
                    hashCode = hashCode * 59 + this.AdvancedSimmetrixSettings.GetHashCode();
                return hashCode;
            }
        }

    }

}
