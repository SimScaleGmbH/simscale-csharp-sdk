/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// CreateAiPredictionResponse
    /// </summary>
    [DataContract]
    public partial class CreateAiPredictionResponse : IEquatable<CreateAiPredictionResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAiPredictionResponse" /> class.
        /// </summary>
        /// <param name="predictionId">predictionId.</param>
        /// <param name="availableFields">availableFields.</param>
        /// <param name="confidenceScore">confidenceScore.</param>
        /// <param name="globalOutputs">globalOutputs.</param>
        public CreateAiPredictionResponse(Guid? predictionId = default(Guid?), List<CreateAiPredictionResponseAvailableFields> availableFields = default(List<CreateAiPredictionResponseAvailableFields>), double? confidenceScore = default(double?), List<CreateAiPredictionResponseGlobalOutputs> globalOutputs = default(List<CreateAiPredictionResponseGlobalOutputs>))
        {
            this.PredictionId = predictionId;
            this.AvailableFields = availableFields;
            this.ConfidenceScore = confidenceScore;
            this.GlobalOutputs = globalOutputs;
        }
        
        /// <summary>
        /// Gets or Sets PredictionId
        /// </summary>
        [DataMember(Name="predictionId", EmitDefaultValue=false)]
        public Guid? PredictionId { get; set; }

        /// <summary>
        /// Gets or Sets AvailableFields
        /// </summary>
        [DataMember(Name="availableFields", EmitDefaultValue=false)]
        public List<CreateAiPredictionResponseAvailableFields> AvailableFields { get; set; }

        /// <summary>
        /// Gets or Sets ConfidenceScore
        /// </summary>
        [DataMember(Name="confidenceScore", EmitDefaultValue=false)]
        public double? ConfidenceScore { get; set; }

        /// <summary>
        /// Gets or Sets GlobalOutputs
        /// </summary>
        [DataMember(Name="globalOutputs", EmitDefaultValue=false)]
        public List<CreateAiPredictionResponseGlobalOutputs> GlobalOutputs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateAiPredictionResponse {\n");
            sb.Append("  PredictionId: ").Append(PredictionId).Append("\n");
            sb.Append("  AvailableFields: ").Append(AvailableFields).Append("\n");
            sb.Append("  ConfidenceScore: ").Append(ConfidenceScore).Append("\n");
            sb.Append("  GlobalOutputs: ").Append(GlobalOutputs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateAiPredictionResponse);
        }

        /// <summary>
        /// Returns true if CreateAiPredictionResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateAiPredictionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateAiPredictionResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PredictionId == input.PredictionId ||
                    (this.PredictionId != null &&
                    this.PredictionId.Equals(input.PredictionId))
                ) && 
                (
                    this.AvailableFields == input.AvailableFields ||
                    this.AvailableFields != null &&
                    input.AvailableFields != null &&
                    this.AvailableFields.SequenceEqual(input.AvailableFields)
                ) && 
                (
                    this.ConfidenceScore == input.ConfidenceScore ||
                    (this.ConfidenceScore != null &&
                    this.ConfidenceScore.Equals(input.ConfidenceScore))
                ) && 
                (
                    this.GlobalOutputs == input.GlobalOutputs ||
                    this.GlobalOutputs != null &&
                    input.GlobalOutputs != null &&
                    this.GlobalOutputs.SequenceEqual(input.GlobalOutputs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PredictionId != null)
                    hashCode = hashCode * 59 + this.PredictionId.GetHashCode();
                if (this.AvailableFields != null)
                    hashCode = hashCode * 59 + this.AvailableFields.GetHashCode();
                if (this.ConfidenceScore != null)
                    hashCode = hashCode * 59 + this.ConfidenceScore.GetHashCode();
                if (this.GlobalOutputs != null)
                    hashCode = hashCode * 59 + this.GlobalOutputs.GetHashCode();
                return hashCode;
            }
        }

    }

}
