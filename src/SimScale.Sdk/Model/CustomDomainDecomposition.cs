/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// CustomDomainDecomposition
    /// </summary>
    [DataContract]
    public partial class CustomDomainDecomposition : OneOfComputingCoreDomainDecomposition, IEquatable<CustomDomainDecomposition>
    {
        /// <summary>
        /// Defines Partitioner
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PartitionerEnum
        {
            /// <summary>
            /// Enum METIS for value: METIS
            /// </summary>
            [EnumMember(Value = "METIS")]
            METIS = 1,

            /// <summary>
            /// Enum SCOTCH for value: SCOTCH
            /// </summary>
            [EnumMember(Value = "SCOTCH")]
            SCOTCH = 2

        }

        /// <summary>
        /// Gets or Sets Partitioner
        /// </summary>
        [DataMember(Name="partitioner", EmitDefaultValue=false)]
        public PartitionerEnum? Partitioner { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomDomainDecomposition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomDomainDecomposition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomDomainDecomposition" /> class.
        /// </summary>
        /// <param name="type">Schema name: CustomDomainDecomposition (required) (default to &quot;CUSTOM&quot;).</param>
        /// <param name="numPartitions">numPartitions (default to 1).</param>
        /// <param name="partitioner">partitioner (default to PartitionerEnum.METIS).</param>
        public CustomDomainDecomposition(string type = "CUSTOM", int? numPartitions = default(int?), PartitionerEnum? partitioner = default(PartitionerEnum?))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for CustomDomainDecomposition and cannot be null");
            this.NumPartitions = numPartitions;
            this.Partitioner = partitioner;
        }
        
        /// <summary>
        /// Schema name: CustomDomainDecomposition
        /// </summary>
        /// <value>Schema name: CustomDomainDecomposition</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets NumPartitions
        /// </summary>
        [DataMember(Name="numPartitions", EmitDefaultValue=false)]
        public int? NumPartitions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomDomainDecomposition {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  NumPartitions: ").Append(NumPartitions).Append("\n");
            sb.Append("  Partitioner: ").Append(Partitioner).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomDomainDecomposition);
        }

        /// <summary>
        /// Returns true if CustomDomainDecomposition instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomDomainDecomposition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomDomainDecomposition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.NumPartitions == input.NumPartitions ||
                    (this.NumPartitions != null &&
                    this.NumPartitions.Equals(input.NumPartitions))
                ) && 
                (
                    this.Partitioner == input.Partitioner ||
                    this.Partitioner.Equals(input.Partitioner)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.NumPartitions != null)
                    hashCode = hashCode * 59 + this.NumPartitions.GetHashCode();
                hashCode = hashCode * 59 + this.Partitioner.GetHashCode();
                return hashCode;
            }
        }

    }

}
