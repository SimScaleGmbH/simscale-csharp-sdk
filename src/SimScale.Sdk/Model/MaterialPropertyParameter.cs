/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// MaterialPropertyParameter
    /// </summary>
    [DataContract]
    public partial class MaterialPropertyParameter : IEquatable<MaterialPropertyParameter>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MaterialPropertyParameter" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MaterialPropertyParameter() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MaterialPropertyParameter" /> class.
        /// </summary>
        /// <param name="key">The unique identifier of the parameter, meaningful from the physics/business perspective (required).</param>
        /// <param name="name">Optional user facing name or label key for human identification.</param>
        /// <param name="unit">The parameter unit.</param>
        public MaterialPropertyParameter(string key = default(string), string name = default(string), string unit = default(string))
        {
            // to ensure "key" is required (not null)
            this.Key = key ?? throw new ArgumentNullException("key is a required property for MaterialPropertyParameter and cannot be null");
            this.Name = name;
            this.Unit = unit;
        }
        
        /// <summary>
        /// The unique identifier of the parameter, meaningful from the physics/business perspective
        /// </summary>
        /// <value>The unique identifier of the parameter, meaningful from the physics/business perspective</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// Optional user facing name or label key for human identification
        /// </summary>
        /// <value>Optional user facing name or label key for human identification</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The parameter unit
        /// </summary>
        /// <value>The parameter unit</value>
        [DataMember(Name="unit", EmitDefaultValue=false)]
        public string Unit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MaterialPropertyParameter {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MaterialPropertyParameter);
        }

        /// <summary>
        /// Returns true if MaterialPropertyParameter instances are equal
        /// </summary>
        /// <param name="input">Instance of MaterialPropertyParameter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MaterialPropertyParameter input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Unit == input.Unit ||
                    (this.Unit != null &&
                    this.Unit.Equals(input.Unit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Unit != null)
                    hashCode = hashCode * 59 + this.Unit.GetHashCode();
                return hashCode;
            }
        }

    }

}
