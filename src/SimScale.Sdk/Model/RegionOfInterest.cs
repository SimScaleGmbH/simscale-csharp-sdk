/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// RegionOfInterest
    /// </summary>
    [DataContract]
    public partial class RegionOfInterest : IEquatable<RegionOfInterest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RegionOfInterest" /> class.
        /// </summary>
        /// <param name="discRadius">discRadius.</param>
        /// <param name="centerPoint">centerPoint.</param>
        /// <param name="groundHeight">groundHeight.</param>
        /// <param name="northAngle">northAngle.</param>
        /// <param name="advancedSettings">advancedSettings.</param>
        public RegionOfInterest(DimensionalLength discRadius = default(DimensionalLength), DimensionalVector2dLength centerPoint = default(DimensionalVector2dLength), DimensionalLength groundHeight = default(DimensionalLength), DimensionalAngle northAngle = default(DimensionalAngle), AdvancedROISettings advancedSettings = default(AdvancedROISettings))
        {
            this.DiscRadius = discRadius;
            this.CenterPoint = centerPoint;
            this.GroundHeight = groundHeight;
            this.NorthAngle = northAngle;
            this.AdvancedSettings = advancedSettings;
        }
        
        /// <summary>
        /// Gets or Sets DiscRadius
        /// </summary>
        [DataMember(Name="discRadius", EmitDefaultValue=false)]
        public DimensionalLength DiscRadius { get; set; }

        /// <summary>
        /// Gets or Sets CenterPoint
        /// </summary>
        [DataMember(Name="centerPoint", EmitDefaultValue=false)]
        public DimensionalVector2dLength CenterPoint { get; set; }

        /// <summary>
        /// Gets or Sets GroundHeight
        /// </summary>
        [DataMember(Name="groundHeight", EmitDefaultValue=false)]
        public DimensionalLength GroundHeight { get; set; }

        /// <summary>
        /// Gets or Sets NorthAngle
        /// </summary>
        [DataMember(Name="northAngle", EmitDefaultValue=false)]
        public DimensionalAngle NorthAngle { get; set; }

        /// <summary>
        /// Gets or Sets AdvancedSettings
        /// </summary>
        [DataMember(Name="advancedSettings", EmitDefaultValue=false)]
        public AdvancedROISettings AdvancedSettings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RegionOfInterest {\n");
            sb.Append("  DiscRadius: ").Append(DiscRadius).Append("\n");
            sb.Append("  CenterPoint: ").Append(CenterPoint).Append("\n");
            sb.Append("  GroundHeight: ").Append(GroundHeight).Append("\n");
            sb.Append("  NorthAngle: ").Append(NorthAngle).Append("\n");
            sb.Append("  AdvancedSettings: ").Append(AdvancedSettings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RegionOfInterest);
        }

        /// <summary>
        /// Returns true if RegionOfInterest instances are equal
        /// </summary>
        /// <param name="input">Instance of RegionOfInterest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RegionOfInterest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DiscRadius == input.DiscRadius ||
                    (this.DiscRadius != null &&
                    this.DiscRadius.Equals(input.DiscRadius))
                ) && 
                (
                    this.CenterPoint == input.CenterPoint ||
                    (this.CenterPoint != null &&
                    this.CenterPoint.Equals(input.CenterPoint))
                ) && 
                (
                    this.GroundHeight == input.GroundHeight ||
                    (this.GroundHeight != null &&
                    this.GroundHeight.Equals(input.GroundHeight))
                ) && 
                (
                    this.NorthAngle == input.NorthAngle ||
                    (this.NorthAngle != null &&
                    this.NorthAngle.Equals(input.NorthAngle))
                ) && 
                (
                    this.AdvancedSettings == input.AdvancedSettings ||
                    (this.AdvancedSettings != null &&
                    this.AdvancedSettings.Equals(input.AdvancedSettings))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DiscRadius != null)
                    hashCode = hashCode * 59 + this.DiscRadius.GetHashCode();
                if (this.CenterPoint != null)
                    hashCode = hashCode * 59 + this.CenterPoint.GetHashCode();
                if (this.GroundHeight != null)
                    hashCode = hashCode * 59 + this.GroundHeight.GetHashCode();
                if (this.NorthAngle != null)
                    hashCode = hashCode * 59 + this.NorthAngle.GetHashCode();
                if (this.AdvancedSettings != null)
                    hashCode = hashCode * 59 + this.AdvancedSettings.GetHashCode();
                return hashCode;
            }
        }

    }

}
