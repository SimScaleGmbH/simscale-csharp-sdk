/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// DownloadInfo
    /// </summary>
    [DataContract]
    public partial class DownloadInfo : IEquatable<DownloadInfo>
    {
        /// <summary>
        /// The compression used for the report result download archive.
        /// </summary>
        /// <value>The compression used for the report result download archive.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CompressionEnum
        {
            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 1,

            /// <summary>
            /// Enum ZIP64 for value: ZIP64
            /// </summary>
            [EnumMember(Value = "ZIP64")]
            ZIP64 = 2

        }

        /// <summary>
        /// The compression used for the report result download archive.
        /// </summary>
        /// <value>The compression used for the report result download archive.</value>
        [DataMember(Name="compression", EmitDefaultValue=false)]
        public CompressionEnum? Compression { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DownloadInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public DownloadInfo()
        {
        }
        
        /// <summary>
        /// The result format.
        /// </summary>
        /// <value>The result format.</value>
        [DataMember(Name="format", EmitDefaultValue=false)]
        public string Format { get; private set; }

        /// <summary>
        /// The uncompressed size of the report result content.
        /// </summary>
        /// <value>The uncompressed size of the report result content.</value>
        [DataMember(Name="uncompressedSizeInBytes", EmitDefaultValue=false)]
        public long? UncompressedSizeInBytes { get; private set; }

        /// <summary>
        /// URL for downloading the report result content.
        /// </summary>
        /// <value>URL for downloading the report result content.</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DownloadInfo {\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  UncompressedSizeInBytes: ").Append(UncompressedSizeInBytes).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Compression: ").Append(Compression).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DownloadInfo);
        }

        /// <summary>
        /// Returns true if DownloadInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of DownloadInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DownloadInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Format == input.Format ||
                    (this.Format != null &&
                    this.Format.Equals(input.Format))
                ) && 
                (
                    this.UncompressedSizeInBytes == input.UncompressedSizeInBytes ||
                    (this.UncompressedSizeInBytes != null &&
                    this.UncompressedSizeInBytes.Equals(input.UncompressedSizeInBytes))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Compression == input.Compression ||
                    this.Compression.Equals(input.Compression)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Format != null)
                    hashCode = hashCode * 59 + this.Format.GetHashCode();
                if (this.UncompressedSizeInBytes != null)
                    hashCode = hashCode * 59 + this.UncompressedSizeInBytes.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                hashCode = hashCode * 59 + this.Compression.GetHashCode();
                return hashCode;
            }
        }

    }

}
