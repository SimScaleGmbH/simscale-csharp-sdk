/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// ElectromagneticMaterial
    /// </summary>
    [DataContract]
    public partial class ElectromagneticMaterial : IEquatable<ElectromagneticMaterial>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ElectromagneticMaterial" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="materialBehavior">materialBehavior.</param>
        /// <param name="electricConductivityType">electricConductivityType.</param>
        /// <param name="magneticPermeabilityType">magneticPermeabilityType.</param>
        /// <param name="coreLossesType">coreLossesType.</param>
        /// <param name="electricPermittivityType">electricPermittivityType.</param>
        /// <param name="topologicalReference">topologicalReference.</param>
        /// <param name="builtInMaterial">builtInMaterial.</param>
        /// <param name="materialLibraryReference">materialLibraryReference.</param>
        public ElectromagneticMaterial(string name = default(string), OneOfElectromagneticMaterialMaterialBehavior materialBehavior = default(OneOfElectromagneticMaterialMaterialBehavior), LinearIsotropicConductivityMethod electricConductivityType = default(LinearIsotropicConductivityMethod), OneOfElectromagneticMaterialMagneticPermeabilityType magneticPermeabilityType = default(OneOfElectromagneticMaterialMagneticPermeabilityType), OneOfElectromagneticMaterialCoreLossesType coreLossesType = default(OneOfElectromagneticMaterialCoreLossesType), LinearIsotropicPermittivityMethod electricPermittivityType = default(LinearIsotropicPermittivityMethod), TopologicalReference topologicalReference = default(TopologicalReference), string builtInMaterial = default(string), MaterialLibraryReference materialLibraryReference = default(MaterialLibraryReference))
        {
            this.Name = name;
            this.MaterialBehavior = materialBehavior;
            this.ElectricConductivityType = electricConductivityType;
            this.MagneticPermeabilityType = magneticPermeabilityType;
            this.CoreLossesType = coreLossesType;
            this.ElectricPermittivityType = electricPermittivityType;
            this.TopologicalReference = topologicalReference;
            this.BuiltInMaterial = builtInMaterial;
            this.MaterialLibraryReference = materialLibraryReference;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets MaterialBehavior
        /// </summary>
        [DataMember(Name="materialBehavior", EmitDefaultValue=false)]
        public OneOfElectromagneticMaterialMaterialBehavior MaterialBehavior { get; set; }

        /// <summary>
        /// Gets or Sets ElectricConductivityType
        /// </summary>
        [DataMember(Name="electricConductivityType", EmitDefaultValue=false)]
        public LinearIsotropicConductivityMethod ElectricConductivityType { get; set; }

        /// <summary>
        /// Gets or Sets MagneticPermeabilityType
        /// </summary>
        [DataMember(Name="magneticPermeabilityType", EmitDefaultValue=false)]
        public OneOfElectromagneticMaterialMagneticPermeabilityType MagneticPermeabilityType { get; set; }

        /// <summary>
        /// Gets or Sets CoreLossesType
        /// </summary>
        [DataMember(Name="coreLossesType", EmitDefaultValue=false)]
        public OneOfElectromagneticMaterialCoreLossesType CoreLossesType { get; set; }

        /// <summary>
        /// Gets or Sets ElectricPermittivityType
        /// </summary>
        [DataMember(Name="electricPermittivityType", EmitDefaultValue=false)]
        public LinearIsotropicPermittivityMethod ElectricPermittivityType { get; set; }

        /// <summary>
        /// Gets or Sets TopologicalReference
        /// </summary>
        [DataMember(Name="topologicalReference", EmitDefaultValue=false)]
        public TopologicalReference TopologicalReference { get; set; }

        /// <summary>
        /// Gets or Sets BuiltInMaterial
        /// </summary>
        [DataMember(Name="builtInMaterial", EmitDefaultValue=false)]
        public string BuiltInMaterial { get; set; }

        /// <summary>
        /// Gets or Sets MaterialLibraryReference
        /// </summary>
        [DataMember(Name="materialLibraryReference", EmitDefaultValue=false)]
        public MaterialLibraryReference MaterialLibraryReference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ElectromagneticMaterial {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  MaterialBehavior: ").Append(MaterialBehavior).Append("\n");
            sb.Append("  ElectricConductivityType: ").Append(ElectricConductivityType).Append("\n");
            sb.Append("  MagneticPermeabilityType: ").Append(MagneticPermeabilityType).Append("\n");
            sb.Append("  CoreLossesType: ").Append(CoreLossesType).Append("\n");
            sb.Append("  ElectricPermittivityType: ").Append(ElectricPermittivityType).Append("\n");
            sb.Append("  TopologicalReference: ").Append(TopologicalReference).Append("\n");
            sb.Append("  BuiltInMaterial: ").Append(BuiltInMaterial).Append("\n");
            sb.Append("  MaterialLibraryReference: ").Append(MaterialLibraryReference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ElectromagneticMaterial);
        }

        /// <summary>
        /// Returns true if ElectromagneticMaterial instances are equal
        /// </summary>
        /// <param name="input">Instance of ElectromagneticMaterial to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ElectromagneticMaterial input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.MaterialBehavior == input.MaterialBehavior ||
                    (this.MaterialBehavior != null &&
                    this.MaterialBehavior.Equals(input.MaterialBehavior))
                ) && 
                (
                    this.ElectricConductivityType == input.ElectricConductivityType ||
                    (this.ElectricConductivityType != null &&
                    this.ElectricConductivityType.Equals(input.ElectricConductivityType))
                ) && 
                (
                    this.MagneticPermeabilityType == input.MagneticPermeabilityType ||
                    (this.MagneticPermeabilityType != null &&
                    this.MagneticPermeabilityType.Equals(input.MagneticPermeabilityType))
                ) && 
                (
                    this.CoreLossesType == input.CoreLossesType ||
                    (this.CoreLossesType != null &&
                    this.CoreLossesType.Equals(input.CoreLossesType))
                ) && 
                (
                    this.ElectricPermittivityType == input.ElectricPermittivityType ||
                    (this.ElectricPermittivityType != null &&
                    this.ElectricPermittivityType.Equals(input.ElectricPermittivityType))
                ) && 
                (
                    this.TopologicalReference == input.TopologicalReference ||
                    (this.TopologicalReference != null &&
                    this.TopologicalReference.Equals(input.TopologicalReference))
                ) && 
                (
                    this.BuiltInMaterial == input.BuiltInMaterial ||
                    (this.BuiltInMaterial != null &&
                    this.BuiltInMaterial.Equals(input.BuiltInMaterial))
                ) && 
                (
                    this.MaterialLibraryReference == input.MaterialLibraryReference ||
                    (this.MaterialLibraryReference != null &&
                    this.MaterialLibraryReference.Equals(input.MaterialLibraryReference))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.MaterialBehavior != null)
                    hashCode = hashCode * 59 + this.MaterialBehavior.GetHashCode();
                if (this.ElectricConductivityType != null)
                    hashCode = hashCode * 59 + this.ElectricConductivityType.GetHashCode();
                if (this.MagneticPermeabilityType != null)
                    hashCode = hashCode * 59 + this.MagneticPermeabilityType.GetHashCode();
                if (this.CoreLossesType != null)
                    hashCode = hashCode * 59 + this.CoreLossesType.GetHashCode();
                if (this.ElectricPermittivityType != null)
                    hashCode = hashCode * 59 + this.ElectricPermittivityType.GetHashCode();
                if (this.TopologicalReference != null)
                    hashCode = hashCode * 59 + this.TopologicalReference.GetHashCode();
                if (this.BuiltInMaterial != null)
                    hashCode = hashCode * 59 + this.BuiltInMaterial.GetHashCode();
                if (this.MaterialLibraryReference != null)
                    hashCode = hashCode * 59 + this.MaterialLibraryReference.GetHashCode();
                return hashCode;
            }
        }

    }

}
