/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// &lt;p&gt;Choose the hyperelastic material model that should be used. All models derive the stress-strain relation from a strain energy function defined by the material model parameters.&lt;/p&gt;
    /// </summary>
    [DataContract]
    public partial class MooneyRivlinHyperElasticModel : OneOfHyperElasticMaterialBehaviorHyperElasticModel, IEquatable<MooneyRivlinHyperElasticModel>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MooneyRivlinHyperElasticModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MooneyRivlinHyperElasticModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MooneyRivlinHyperElasticModel" /> class.
        /// </summary>
        /// <param name="type">&lt;p&gt;Choose the hyperelastic material model that should be used. All models derive the stress-strain relation from a strain energy function defined by the material model parameters.&lt;/p&gt;  Schema name: MooneyRivlinHyperElasticModel (required) (default to &quot;MOONEY_RIVLIN&quot;).</param>
        /// <param name="c10">c10.</param>
        /// <param name="c01">c01.</param>
        /// <param name="d1">d1.</param>
        public MooneyRivlinHyperElasticModel(string type = "MOONEY_RIVLIN", DimensionalPressure c10 = default(DimensionalPressure), DimensionalPressure c01 = default(DimensionalPressure), DimensionalInvPressure d1 = default(DimensionalInvPressure))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for MooneyRivlinHyperElasticModel and cannot be null");
            this.C10 = c10;
            this.C01 = c01;
            this.D1 = d1;
        }
        
        /// <summary>
        /// &lt;p&gt;Choose the hyperelastic material model that should be used. All models derive the stress-strain relation from a strain energy function defined by the material model parameters.&lt;/p&gt;  Schema name: MooneyRivlinHyperElasticModel
        /// </summary>
        /// <value>&lt;p&gt;Choose the hyperelastic material model that should be used. All models derive the stress-strain relation from a strain energy function defined by the material model parameters.&lt;/p&gt;  Schema name: MooneyRivlinHyperElasticModel</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets C10
        /// </summary>
        [DataMember(Name="c10", EmitDefaultValue=false)]
        public DimensionalPressure C10 { get; set; }

        /// <summary>
        /// Gets or Sets C01
        /// </summary>
        [DataMember(Name="c01", EmitDefaultValue=false)]
        public DimensionalPressure C01 { get; set; }

        /// <summary>
        /// Gets or Sets D1
        /// </summary>
        [DataMember(Name="d1", EmitDefaultValue=false)]
        public DimensionalInvPressure D1 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MooneyRivlinHyperElasticModel {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  C10: ").Append(C10).Append("\n");
            sb.Append("  C01: ").Append(C01).Append("\n");
            sb.Append("  D1: ").Append(D1).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MooneyRivlinHyperElasticModel);
        }

        /// <summary>
        /// Returns true if MooneyRivlinHyperElasticModel instances are equal
        /// </summary>
        /// <param name="input">Instance of MooneyRivlinHyperElasticModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MooneyRivlinHyperElasticModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.C10 == input.C10 ||
                    (this.C10 != null &&
                    this.C10.Equals(input.C10))
                ) && 
                (
                    this.C01 == input.C01 ||
                    (this.C01 != null &&
                    this.C01.Equals(input.C01))
                ) && 
                (
                    this.D1 == input.D1 ||
                    (this.D1 != null &&
                    this.D1.Equals(input.D1))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.C10 != null)
                    hashCode = hashCode * 59 + this.C10.GetHashCode();
                if (this.C01 != null)
                    hashCode = hashCode * 59 + this.C01.GetHashCode();
                if (this.D1 != null)
                    hashCode = hashCode * 59 + this.D1.GetHashCode();
                return hashCode;
            }
        }

    }

}
