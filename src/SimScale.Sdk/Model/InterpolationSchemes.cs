/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// InterpolationSchemes
    /// </summary>
    [DataContract]
    public partial class InterpolationSchemes : IEquatable<InterpolationSchemes>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InterpolationSchemes" /> class.
        /// </summary>
        /// <param name="forDefault">forDefault.</param>
        /// <param name="interpolateHbyA">interpolateHbyA.</param>
        /// <param name="interpolateVelocity">interpolateVelocity.</param>
        /// <param name="interpolateKappa">interpolateKappa.</param>
        /// <param name="interpolateRho">interpolateRho.</param>
        /// <param name="interpolateThermoRhoCp">interpolateThermoRhoCp.</param>
        /// <param name="interpolateMapKappa">interpolateMapKappa.</param>
        /// <param name="interpolateRhoHbya">interpolateRhoHbya.</param>
        /// <param name="interpolateRho0Velocity0">interpolateRho0Velocity0.</param>
        /// <param name="interpolateGradEnthalpy">interpolateGradEnthalpy.</param>
        /// <param name="interpolateRhoRAU">interpolateRhoRAU.</param>
        /// <param name="interpolateRAU">interpolateRAU.</param>
        /// <param name="interpolateVelocity0">interpolateVelocity0.</param>
        /// <param name="reconstructVelocity">reconstructVelocity.</param>
        /// <param name="reconstructTemperature">reconstructTemperature.</param>
        /// <param name="reconstructRho">reconstructRho.</param>
        public InterpolationSchemes(OneOfInterpolationSchemesForDefault forDefault = default(OneOfInterpolationSchemesForDefault), OneOfInterpolationSchemesInterpolateHbyA interpolateHbyA = default(OneOfInterpolationSchemesInterpolateHbyA), OneOfInterpolationSchemesInterpolateVelocity interpolateVelocity = default(OneOfInterpolationSchemesInterpolateVelocity), OneOfInterpolationSchemesInterpolateKappa interpolateKappa = default(OneOfInterpolationSchemesInterpolateKappa), OneOfInterpolationSchemesInterpolateRho interpolateRho = default(OneOfInterpolationSchemesInterpolateRho), OneOfInterpolationSchemesInterpolateThermoRhoCp interpolateThermoRhoCp = default(OneOfInterpolationSchemesInterpolateThermoRhoCp), OneOfInterpolationSchemesInterpolateMapKappa interpolateMapKappa = default(OneOfInterpolationSchemesInterpolateMapKappa), OneOfInterpolationSchemesInterpolateRhoHbya interpolateRhoHbya = default(OneOfInterpolationSchemesInterpolateRhoHbya), OneOfInterpolationSchemesInterpolateRho0Velocity0 interpolateRho0Velocity0 = default(OneOfInterpolationSchemesInterpolateRho0Velocity0), OneOfInterpolationSchemesInterpolateGradEnthalpy interpolateGradEnthalpy = default(OneOfInterpolationSchemesInterpolateGradEnthalpy), OneOfInterpolationSchemesInterpolateRhoRAU interpolateRhoRAU = default(OneOfInterpolationSchemesInterpolateRhoRAU), OneOfInterpolationSchemesInterpolateRAU interpolateRAU = default(OneOfInterpolationSchemesInterpolateRAU), OneOfInterpolationSchemesInterpolateVelocity0 interpolateVelocity0 = default(OneOfInterpolationSchemesInterpolateVelocity0), OneOfInterpolationSchemesReconstructVelocity reconstructVelocity = default(OneOfInterpolationSchemesReconstructVelocity), OneOfInterpolationSchemesReconstructTemperature reconstructTemperature = default(OneOfInterpolationSchemesReconstructTemperature), OneOfInterpolationSchemesReconstructRho reconstructRho = default(OneOfInterpolationSchemesReconstructRho))
        {
            this.ForDefault = forDefault;
            this.InterpolateHbyA = interpolateHbyA;
            this.InterpolateVelocity = interpolateVelocity;
            this.InterpolateKappa = interpolateKappa;
            this.InterpolateRho = interpolateRho;
            this.InterpolateThermoRhoCp = interpolateThermoRhoCp;
            this.InterpolateMapKappa = interpolateMapKappa;
            this.InterpolateRhoHbya = interpolateRhoHbya;
            this.InterpolateRho0Velocity0 = interpolateRho0Velocity0;
            this.InterpolateGradEnthalpy = interpolateGradEnthalpy;
            this.InterpolateRhoRAU = interpolateRhoRAU;
            this.InterpolateRAU = interpolateRAU;
            this.InterpolateVelocity0 = interpolateVelocity0;
            this.ReconstructVelocity = reconstructVelocity;
            this.ReconstructTemperature = reconstructTemperature;
            this.ReconstructRho = reconstructRho;
        }
        
        /// <summary>
        /// Gets or Sets ForDefault
        /// </summary>
        [DataMember(Name="forDefault", EmitDefaultValue=false)]
        public OneOfInterpolationSchemesForDefault ForDefault { get; set; }

        /// <summary>
        /// Gets or Sets InterpolateHbyA
        /// </summary>
        [DataMember(Name="interpolate_HbyA", EmitDefaultValue=false)]
        public OneOfInterpolationSchemesInterpolateHbyA InterpolateHbyA { get; set; }

        /// <summary>
        /// Gets or Sets InterpolateVelocity
        /// </summary>
        [DataMember(Name="interpolate_velocity", EmitDefaultValue=false)]
        public OneOfInterpolationSchemesInterpolateVelocity InterpolateVelocity { get; set; }

        /// <summary>
        /// Gets or Sets InterpolateKappa
        /// </summary>
        [DataMember(Name="interpolate_kappa", EmitDefaultValue=false)]
        public OneOfInterpolationSchemesInterpolateKappa InterpolateKappa { get; set; }

        /// <summary>
        /// Gets or Sets InterpolateRho
        /// </summary>
        [DataMember(Name="interpolate_rho", EmitDefaultValue=false)]
        public OneOfInterpolationSchemesInterpolateRho InterpolateRho { get; set; }

        /// <summary>
        /// Gets or Sets InterpolateThermoRhoCp
        /// </summary>
        [DataMember(Name="interpolate_thermo_rho_Cp", EmitDefaultValue=false)]
        public OneOfInterpolationSchemesInterpolateThermoRhoCp InterpolateThermoRhoCp { get; set; }

        /// <summary>
        /// Gets or Sets InterpolateMapKappa
        /// </summary>
        [DataMember(Name="interpolate_map_Kappa", EmitDefaultValue=false)]
        public OneOfInterpolationSchemesInterpolateMapKappa InterpolateMapKappa { get; set; }

        /// <summary>
        /// Gets or Sets InterpolateRhoHbya
        /// </summary>
        [DataMember(Name="interpolate_rho_Hbya", EmitDefaultValue=false)]
        public OneOfInterpolationSchemesInterpolateRhoHbya InterpolateRhoHbya { get; set; }

        /// <summary>
        /// Gets or Sets InterpolateRho0Velocity0
        /// </summary>
        [DataMember(Name="interpolate_rho_0_velocity0", EmitDefaultValue=false)]
        public OneOfInterpolationSchemesInterpolateRho0Velocity0 InterpolateRho0Velocity0 { get; set; }

        /// <summary>
        /// Gets or Sets InterpolateGradEnthalpy
        /// </summary>
        [DataMember(Name="interpolate_grad_enthalpy", EmitDefaultValue=false)]
        public OneOfInterpolationSchemesInterpolateGradEnthalpy InterpolateGradEnthalpy { get; set; }

        /// <summary>
        /// Gets or Sets InterpolateRhoRAU
        /// </summary>
        [DataMember(Name="interpolate_rho_rAU", EmitDefaultValue=false)]
        public OneOfInterpolationSchemesInterpolateRhoRAU InterpolateRhoRAU { get; set; }

        /// <summary>
        /// Gets or Sets InterpolateRAU
        /// </summary>
        [DataMember(Name="interpolate_rAU", EmitDefaultValue=false)]
        public OneOfInterpolationSchemesInterpolateRAU InterpolateRAU { get; set; }

        /// <summary>
        /// Gets or Sets InterpolateVelocity0
        /// </summary>
        [DataMember(Name="interpolate_velocity0", EmitDefaultValue=false)]
        public OneOfInterpolationSchemesInterpolateVelocity0 InterpolateVelocity0 { get; set; }

        /// <summary>
        /// Gets or Sets ReconstructVelocity
        /// </summary>
        [DataMember(Name="reconstruct_velocity", EmitDefaultValue=false)]
        public OneOfInterpolationSchemesReconstructVelocity ReconstructVelocity { get; set; }

        /// <summary>
        /// Gets or Sets ReconstructTemperature
        /// </summary>
        [DataMember(Name="reconstruct_temperature", EmitDefaultValue=false)]
        public OneOfInterpolationSchemesReconstructTemperature ReconstructTemperature { get; set; }

        /// <summary>
        /// Gets or Sets ReconstructRho
        /// </summary>
        [DataMember(Name="reconstruct_rho", EmitDefaultValue=false)]
        public OneOfInterpolationSchemesReconstructRho ReconstructRho { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InterpolationSchemes {\n");
            sb.Append("  ForDefault: ").Append(ForDefault).Append("\n");
            sb.Append("  InterpolateHbyA: ").Append(InterpolateHbyA).Append("\n");
            sb.Append("  InterpolateVelocity: ").Append(InterpolateVelocity).Append("\n");
            sb.Append("  InterpolateKappa: ").Append(InterpolateKappa).Append("\n");
            sb.Append("  InterpolateRho: ").Append(InterpolateRho).Append("\n");
            sb.Append("  InterpolateThermoRhoCp: ").Append(InterpolateThermoRhoCp).Append("\n");
            sb.Append("  InterpolateMapKappa: ").Append(InterpolateMapKappa).Append("\n");
            sb.Append("  InterpolateRhoHbya: ").Append(InterpolateRhoHbya).Append("\n");
            sb.Append("  InterpolateRho0Velocity0: ").Append(InterpolateRho0Velocity0).Append("\n");
            sb.Append("  InterpolateGradEnthalpy: ").Append(InterpolateGradEnthalpy).Append("\n");
            sb.Append("  InterpolateRhoRAU: ").Append(InterpolateRhoRAU).Append("\n");
            sb.Append("  InterpolateRAU: ").Append(InterpolateRAU).Append("\n");
            sb.Append("  InterpolateVelocity0: ").Append(InterpolateVelocity0).Append("\n");
            sb.Append("  ReconstructVelocity: ").Append(ReconstructVelocity).Append("\n");
            sb.Append("  ReconstructTemperature: ").Append(ReconstructTemperature).Append("\n");
            sb.Append("  ReconstructRho: ").Append(ReconstructRho).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InterpolationSchemes);
        }

        /// <summary>
        /// Returns true if InterpolationSchemes instances are equal
        /// </summary>
        /// <param name="input">Instance of InterpolationSchemes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InterpolationSchemes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ForDefault == input.ForDefault ||
                    (this.ForDefault != null &&
                    this.ForDefault.Equals(input.ForDefault))
                ) && 
                (
                    this.InterpolateHbyA == input.InterpolateHbyA ||
                    (this.InterpolateHbyA != null &&
                    this.InterpolateHbyA.Equals(input.InterpolateHbyA))
                ) && 
                (
                    this.InterpolateVelocity == input.InterpolateVelocity ||
                    (this.InterpolateVelocity != null &&
                    this.InterpolateVelocity.Equals(input.InterpolateVelocity))
                ) && 
                (
                    this.InterpolateKappa == input.InterpolateKappa ||
                    (this.InterpolateKappa != null &&
                    this.InterpolateKappa.Equals(input.InterpolateKappa))
                ) && 
                (
                    this.InterpolateRho == input.InterpolateRho ||
                    (this.InterpolateRho != null &&
                    this.InterpolateRho.Equals(input.InterpolateRho))
                ) && 
                (
                    this.InterpolateThermoRhoCp == input.InterpolateThermoRhoCp ||
                    (this.InterpolateThermoRhoCp != null &&
                    this.InterpolateThermoRhoCp.Equals(input.InterpolateThermoRhoCp))
                ) && 
                (
                    this.InterpolateMapKappa == input.InterpolateMapKappa ||
                    (this.InterpolateMapKappa != null &&
                    this.InterpolateMapKappa.Equals(input.InterpolateMapKappa))
                ) && 
                (
                    this.InterpolateRhoHbya == input.InterpolateRhoHbya ||
                    (this.InterpolateRhoHbya != null &&
                    this.InterpolateRhoHbya.Equals(input.InterpolateRhoHbya))
                ) && 
                (
                    this.InterpolateRho0Velocity0 == input.InterpolateRho0Velocity0 ||
                    (this.InterpolateRho0Velocity0 != null &&
                    this.InterpolateRho0Velocity0.Equals(input.InterpolateRho0Velocity0))
                ) && 
                (
                    this.InterpolateGradEnthalpy == input.InterpolateGradEnthalpy ||
                    (this.InterpolateGradEnthalpy != null &&
                    this.InterpolateGradEnthalpy.Equals(input.InterpolateGradEnthalpy))
                ) && 
                (
                    this.InterpolateRhoRAU == input.InterpolateRhoRAU ||
                    (this.InterpolateRhoRAU != null &&
                    this.InterpolateRhoRAU.Equals(input.InterpolateRhoRAU))
                ) && 
                (
                    this.InterpolateRAU == input.InterpolateRAU ||
                    (this.InterpolateRAU != null &&
                    this.InterpolateRAU.Equals(input.InterpolateRAU))
                ) && 
                (
                    this.InterpolateVelocity0 == input.InterpolateVelocity0 ||
                    (this.InterpolateVelocity0 != null &&
                    this.InterpolateVelocity0.Equals(input.InterpolateVelocity0))
                ) && 
                (
                    this.ReconstructVelocity == input.ReconstructVelocity ||
                    (this.ReconstructVelocity != null &&
                    this.ReconstructVelocity.Equals(input.ReconstructVelocity))
                ) && 
                (
                    this.ReconstructTemperature == input.ReconstructTemperature ||
                    (this.ReconstructTemperature != null &&
                    this.ReconstructTemperature.Equals(input.ReconstructTemperature))
                ) && 
                (
                    this.ReconstructRho == input.ReconstructRho ||
                    (this.ReconstructRho != null &&
                    this.ReconstructRho.Equals(input.ReconstructRho))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ForDefault != null)
                    hashCode = hashCode * 59 + this.ForDefault.GetHashCode();
                if (this.InterpolateHbyA != null)
                    hashCode = hashCode * 59 + this.InterpolateHbyA.GetHashCode();
                if (this.InterpolateVelocity != null)
                    hashCode = hashCode * 59 + this.InterpolateVelocity.GetHashCode();
                if (this.InterpolateKappa != null)
                    hashCode = hashCode * 59 + this.InterpolateKappa.GetHashCode();
                if (this.InterpolateRho != null)
                    hashCode = hashCode * 59 + this.InterpolateRho.GetHashCode();
                if (this.InterpolateThermoRhoCp != null)
                    hashCode = hashCode * 59 + this.InterpolateThermoRhoCp.GetHashCode();
                if (this.InterpolateMapKappa != null)
                    hashCode = hashCode * 59 + this.InterpolateMapKappa.GetHashCode();
                if (this.InterpolateRhoHbya != null)
                    hashCode = hashCode * 59 + this.InterpolateRhoHbya.GetHashCode();
                if (this.InterpolateRho0Velocity0 != null)
                    hashCode = hashCode * 59 + this.InterpolateRho0Velocity0.GetHashCode();
                if (this.InterpolateGradEnthalpy != null)
                    hashCode = hashCode * 59 + this.InterpolateGradEnthalpy.GetHashCode();
                if (this.InterpolateRhoRAU != null)
                    hashCode = hashCode * 59 + this.InterpolateRhoRAU.GetHashCode();
                if (this.InterpolateRAU != null)
                    hashCode = hashCode * 59 + this.InterpolateRAU.GetHashCode();
                if (this.InterpolateVelocity0 != null)
                    hashCode = hashCode * 59 + this.InterpolateVelocity0.GetHashCode();
                if (this.ReconstructVelocity != null)
                    hashCode = hashCode * 59 + this.ReconstructVelocity.GetHashCode();
                if (this.ReconstructTemperature != null)
                    hashCode = hashCode * 59 + this.ReconstructTemperature.GetHashCode();
                if (this.ReconstructRho != null)
                    hashCode = hashCode * 59 + this.ReconstructRho.GetHashCode();
                return hashCode;
            }
        }

    }

}
