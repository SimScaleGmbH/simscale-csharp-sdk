/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// VoltageExcitation
    /// </summary>
    [DataContract]
    public partial class VoltageExcitation : OneOfCoilExcitation, IEquatable<VoltageExcitation>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VoltageExcitation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VoltageExcitation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VoltageExcitation" /> class.
        /// </summary>
        /// <param name="type">Schema name: VoltageExcitation (required) (default to &quot;VOLTAGE_EXCITATION&quot;).</param>
        /// <param name="voltage">voltage.</param>
        /// <param name="voltageRMS">voltageRMS.</param>
        /// <param name="voltagePhase">voltagePhase.</param>
        /// <param name="additionalResistance">additionalResistance.</param>
        public VoltageExcitation(string type = "VOLTAGE_EXCITATION", DimensionalElectricPotential voltage = default(DimensionalElectricPotential), DimensionalElectricPotential voltageRMS = default(DimensionalElectricPotential), DimensionalAngle voltagePhase = default(DimensionalAngle), DimensionalElectricResistance additionalResistance = default(DimensionalElectricResistance))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for VoltageExcitation and cannot be null");
            this.Voltage = voltage;
            this.VoltageRMS = voltageRMS;
            this.VoltagePhase = voltagePhase;
            this.AdditionalResistance = additionalResistance;
        }
        
        /// <summary>
        /// Schema name: VoltageExcitation
        /// </summary>
        /// <value>Schema name: VoltageExcitation</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Voltage
        /// </summary>
        [DataMember(Name="voltage", EmitDefaultValue=false)]
        public DimensionalElectricPotential Voltage { get; set; }

        /// <summary>
        /// Gets or Sets VoltageRMS
        /// </summary>
        [DataMember(Name="voltageRMS", EmitDefaultValue=false)]
        public DimensionalElectricPotential VoltageRMS { get; set; }

        /// <summary>
        /// Gets or Sets VoltagePhase
        /// </summary>
        [DataMember(Name="voltagePhase", EmitDefaultValue=false)]
        public DimensionalAngle VoltagePhase { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalResistance
        /// </summary>
        [DataMember(Name="additionalResistance", EmitDefaultValue=false)]
        public DimensionalElectricResistance AdditionalResistance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VoltageExcitation {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Voltage: ").Append(Voltage).Append("\n");
            sb.Append("  VoltageRMS: ").Append(VoltageRMS).Append("\n");
            sb.Append("  VoltagePhase: ").Append(VoltagePhase).Append("\n");
            sb.Append("  AdditionalResistance: ").Append(AdditionalResistance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VoltageExcitation);
        }

        /// <summary>
        /// Returns true if VoltageExcitation instances are equal
        /// </summary>
        /// <param name="input">Instance of VoltageExcitation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VoltageExcitation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Voltage == input.Voltage ||
                    (this.Voltage != null &&
                    this.Voltage.Equals(input.Voltage))
                ) && 
                (
                    this.VoltageRMS == input.VoltageRMS ||
                    (this.VoltageRMS != null &&
                    this.VoltageRMS.Equals(input.VoltageRMS))
                ) && 
                (
                    this.VoltagePhase == input.VoltagePhase ||
                    (this.VoltagePhase != null &&
                    this.VoltagePhase.Equals(input.VoltagePhase))
                ) && 
                (
                    this.AdditionalResistance == input.AdditionalResistance ||
                    (this.AdditionalResistance != null &&
                    this.AdditionalResistance.Equals(input.AdditionalResistance))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Voltage != null)
                    hashCode = hashCode * 59 + this.Voltage.GetHashCode();
                if (this.VoltageRMS != null)
                    hashCode = hashCode * 59 + this.VoltageRMS.GetHashCode();
                if (this.VoltagePhase != null)
                    hashCode = hashCode * 59 + this.VoltagePhase.GetHashCode();
                if (this.AdditionalResistance != null)
                    hashCode = hashCode * 59 + this.AdditionalResistance.GetHashCode();
                return hashCode;
            }
        }

    }

}
