/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// SeedSettings
    /// </summary>
    [DataContract]
    public partial class SeedSettings : IEquatable<SeedSettings>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SeedSettings" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SeedSettings() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SeedSettings" /> class.
        /// </summary>
        /// <param name="center">center (required).</param>
        /// <param name="normal">normal (required).</param>
        /// <param name="horizontalDimension">Number of seed points in the horizontal direction. (required) (default to 10).</param>
        /// <param name="verticalDimension">Number of seed points in the vertical direction. (required) (default to 10).</param>
        /// <param name="spacing">The distance between the seed points. Default is size * 4..</param>
        /// <param name="size">The radius of the particle trace geometry (cylinder, sphere, comet). Default is the extent of the bounding box of the moddel divided by 800..</param>
        public SeedSettings(Vector3D center = default(Vector3D), Vector3D normal = default(Vector3D), int? horizontalDimension = 10, int? verticalDimension = 10, float? spacing = default(float?), float? size = default(float?))
        {
            // to ensure "center" is required (not null)
            this.Center = center ?? throw new ArgumentNullException("center is a required property for SeedSettings and cannot be null");
            // to ensure "normal" is required (not null)
            this.Normal = normal ?? throw new ArgumentNullException("normal is a required property for SeedSettings and cannot be null");
            // to ensure "horizontalDimension" is required (not null)
            this.HorizontalDimension = horizontalDimension ?? throw new ArgumentNullException("horizontalDimension is a required property for SeedSettings and cannot be null");
            // to ensure "verticalDimension" is required (not null)
            this.VerticalDimension = verticalDimension ?? throw new ArgumentNullException("verticalDimension is a required property for SeedSettings and cannot be null");
            this.Spacing = spacing;
            this.Size = size;
        }
        
        /// <summary>
        /// Gets or Sets Center
        /// </summary>
        [DataMember(Name="center", EmitDefaultValue=false)]
        public Vector3D Center { get; set; }

        /// <summary>
        /// Gets or Sets Normal
        /// </summary>
        [DataMember(Name="normal", EmitDefaultValue=false)]
        public Vector3D Normal { get; set; }

        /// <summary>
        /// Number of seed points in the horizontal direction.
        /// </summary>
        /// <value>Number of seed points in the horizontal direction.</value>
        [DataMember(Name="horizontalDimension", EmitDefaultValue=false)]
        public int? HorizontalDimension { get; set; }

        /// <summary>
        /// Number of seed points in the vertical direction.
        /// </summary>
        /// <value>Number of seed points in the vertical direction.</value>
        [DataMember(Name="verticalDimension", EmitDefaultValue=false)]
        public int? VerticalDimension { get; set; }

        /// <summary>
        /// The distance between the seed points. Default is size * 4.
        /// </summary>
        /// <value>The distance between the seed points. Default is size * 4.</value>
        [DataMember(Name="spacing", EmitDefaultValue=false)]
        public float? Spacing { get; set; }

        /// <summary>
        /// The radius of the particle trace geometry (cylinder, sphere, comet). Default is the extent of the bounding box of the moddel divided by 800.
        /// </summary>
        /// <value>The radius of the particle trace geometry (cylinder, sphere, comet). Default is the extent of the bounding box of the moddel divided by 800.</value>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public float? Size { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SeedSettings {\n");
            sb.Append("  Center: ").Append(Center).Append("\n");
            sb.Append("  Normal: ").Append(Normal).Append("\n");
            sb.Append("  HorizontalDimension: ").Append(HorizontalDimension).Append("\n");
            sb.Append("  VerticalDimension: ").Append(VerticalDimension).Append("\n");
            sb.Append("  Spacing: ").Append(Spacing).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SeedSettings);
        }

        /// <summary>
        /// Returns true if SeedSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of SeedSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SeedSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Center == input.Center ||
                    (this.Center != null &&
                    this.Center.Equals(input.Center))
                ) && 
                (
                    this.Normal == input.Normal ||
                    (this.Normal != null &&
                    this.Normal.Equals(input.Normal))
                ) && 
                (
                    this.HorizontalDimension == input.HorizontalDimension ||
                    (this.HorizontalDimension != null &&
                    this.HorizontalDimension.Equals(input.HorizontalDimension))
                ) && 
                (
                    this.VerticalDimension == input.VerticalDimension ||
                    (this.VerticalDimension != null &&
                    this.VerticalDimension.Equals(input.VerticalDimension))
                ) && 
                (
                    this.Spacing == input.Spacing ||
                    (this.Spacing != null &&
                    this.Spacing.Equals(input.Spacing))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Center != null)
                    hashCode = hashCode * 59 + this.Center.GetHashCode();
                if (this.Normal != null)
                    hashCode = hashCode * 59 + this.Normal.GetHashCode();
                if (this.HorizontalDimension != null)
                    hashCode = hashCode * 59 + this.HorizontalDimension.GetHashCode();
                if (this.VerticalDimension != null)
                    hashCode = hashCode * 59 + this.VerticalDimension.GetHashCode();
                if (this.Spacing != null)
                    hashCode = hashCode * 59 + this.Spacing.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                return hashCode;
            }
        }

    }

}
