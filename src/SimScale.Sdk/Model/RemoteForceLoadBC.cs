/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// This is a &lt;b&gt;remote force&lt;/b&gt; boundary condition where the load is applied on the assignment via a remote point. Therefore the assignment is connected to the remote point with RBE3 (deformable) or MPC (undeformable) conditions and the defined force is applied to the remote point.&lt;br /&gt;&lt;br /&gt;Important remarks: &lt;br /&gt;&lt;ul&gt;&lt;li&gt;The total force will be &lt;b&gt;distributed on the selection&lt;/b&gt;.&lt;/li&gt;&lt;li&gt;As the assignments are connected to the remote point, additional constraints on these nodes may lead to overconstrained systems.&lt;/li&gt;&lt;li&gt;If the number of nodes of the assignment is large (&gt;1000), it is recommended to use the &lt;b&gt;MUMPS&lt;/b&gt; or &lt;b&gt;PETSC&lt;/b&gt; solver.&lt;/li&gt;&lt;li&gt;This boundary condition is only valid for small rotations. &lt;/li&gt;&lt;/ul&gt;&lt;a href&#x3D; https://www.simscale.com/docs/simulation-setup/boundary-conditions/remote-force/&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.
    /// </summary>
    [DataContract]
    public partial class RemoteForceLoadBC : OneOfDynamicAnalysisBoundaryConditions, OneOfHarmonicAnalysisBoundaryConditions, OneOfStaticAnalysisBoundaryConditions, OneOfThermalMechanicalBoundaryConditions, IEquatable<RemoteForceLoadBC>
    {
        /// <summary>
        /// &lt;p&gt;Choose the deformation behavior of the assigned entity. If &lt;b&gt;deformable&lt;/b&gt; is selected, the entitiy is allowed to deform without applying additional stiffness, selecting &lt;b&gt;undeformable&lt;/b&gt; leads to a rigid entity.&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;Choose the deformation behavior of the assigned entity. If &lt;b&gt;deformable&lt;/b&gt; is selected, the entitiy is allowed to deform without applying additional stiffness, selecting &lt;b&gt;undeformable&lt;/b&gt; leads to a rigid entity.&lt;/p&gt;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DeformationBehaviorEnum
        {
            /// <summary>
            /// Enum DEFORMABLE for value: DEFORMABLE
            /// </summary>
            [EnumMember(Value = "DEFORMABLE")]
            DEFORMABLE = 1,

            /// <summary>
            /// Enum UNDEFORMABLE for value: UNDEFORMABLE
            /// </summary>
            [EnumMember(Value = "UNDEFORMABLE")]
            UNDEFORMABLE = 2

        }

        /// <summary>
        /// &lt;p&gt;Choose the deformation behavior of the assigned entity. If &lt;b&gt;deformable&lt;/b&gt; is selected, the entitiy is allowed to deform without applying additional stiffness, selecting &lt;b&gt;undeformable&lt;/b&gt; leads to a rigid entity.&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;Choose the deformation behavior of the assigned entity. If &lt;b&gt;deformable&lt;/b&gt; is selected, the entitiy is allowed to deform without applying additional stiffness, selecting &lt;b&gt;undeformable&lt;/b&gt; leads to a rigid entity.&lt;/p&gt;</value>
        [DataMember(Name="deformationBehavior", EmitDefaultValue=false)]
        public DeformationBehaviorEnum? DeformationBehavior { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RemoteForceLoadBC" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RemoteForceLoadBC() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RemoteForceLoadBC" /> class.
        /// </summary>
        /// <param name="type">This is a &lt;b&gt;remote force&lt;/b&gt; boundary condition where the load is applied on the assignment via a remote point. Therefore the assignment is connected to the remote point with RBE3 (deformable) or MPC (undeformable) conditions and the defined force is applied to the remote point.&lt;br /&gt;&lt;br /&gt;Important remarks: &lt;br /&gt;&lt;ul&gt;&lt;li&gt;The total force will be &lt;b&gt;distributed on the selection&lt;/b&gt;.&lt;/li&gt;&lt;li&gt;As the assignments are connected to the remote point, additional constraints on these nodes may lead to overconstrained systems.&lt;/li&gt;&lt;li&gt;If the number of nodes of the assignment is large (&gt;1000), it is recommended to use the &lt;b&gt;MUMPS&lt;/b&gt; or &lt;b&gt;PETSC&lt;/b&gt; solver.&lt;/li&gt;&lt;li&gt;This boundary condition is only valid for small rotations. &lt;/li&gt;&lt;/ul&gt;&lt;a href&#x3D; https://www.simscale.com/docs/simulation-setup/boundary-conditions/remote-force/&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.  Schema name: RemoteForceLoadBC (required) (default to &quot;REMOTE_FORCE_LOAD&quot;).</param>
        /// <param name="name">name.</param>
        /// <param name="force">force.</param>
        /// <param name="moment">moment.</param>
        /// <param name="scaling">scaling.</param>
        /// <param name="phaseAngle">phaseAngle.</param>
        /// <param name="remotePoint">remotePoint.</param>
        /// <param name="deformationBehavior">&lt;p&gt;Choose the deformation behavior of the assigned entity. If &lt;b&gt;deformable&lt;/b&gt; is selected, the entitiy is allowed to deform without applying additional stiffness, selecting &lt;b&gt;undeformable&lt;/b&gt; leads to a rigid entity.&lt;/p&gt; (default to DeformationBehaviorEnum.DEFORMABLE).</param>
        /// <param name="topologicalReference">topologicalReference.</param>
        public RemoteForceLoadBC(string type = "REMOTE_FORCE_LOAD", string name = default(string), DimensionalVectorFunctionForce force = default(DimensionalVectorFunctionForce), DimensionalVectorFunctionTorque moment = default(DimensionalVectorFunctionTorque), DimensionalFunctionDimensionless scaling = default(DimensionalFunctionDimensionless), DimensionalAngle phaseAngle = default(DimensionalAngle), DimensionalVectorLength remotePoint = default(DimensionalVectorLength), DeformationBehaviorEnum? deformationBehavior = default(DeformationBehaviorEnum?), TopologicalReference topologicalReference = default(TopologicalReference))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for RemoteForceLoadBC and cannot be null");
            this.Name = name;
            this.Force = force;
            this.Moment = moment;
            this.Scaling = scaling;
            this.PhaseAngle = phaseAngle;
            this.RemotePoint = remotePoint;
            this.DeformationBehavior = deformationBehavior;
            this.TopologicalReference = topologicalReference;
        }
        
        /// <summary>
        /// This is a &lt;b&gt;remote force&lt;/b&gt; boundary condition where the load is applied on the assignment via a remote point. Therefore the assignment is connected to the remote point with RBE3 (deformable) or MPC (undeformable) conditions and the defined force is applied to the remote point.&lt;br /&gt;&lt;br /&gt;Important remarks: &lt;br /&gt;&lt;ul&gt;&lt;li&gt;The total force will be &lt;b&gt;distributed on the selection&lt;/b&gt;.&lt;/li&gt;&lt;li&gt;As the assignments are connected to the remote point, additional constraints on these nodes may lead to overconstrained systems.&lt;/li&gt;&lt;li&gt;If the number of nodes of the assignment is large (&gt;1000), it is recommended to use the &lt;b&gt;MUMPS&lt;/b&gt; or &lt;b&gt;PETSC&lt;/b&gt; solver.&lt;/li&gt;&lt;li&gt;This boundary condition is only valid for small rotations. &lt;/li&gt;&lt;/ul&gt;&lt;a href&#x3D; https://www.simscale.com/docs/simulation-setup/boundary-conditions/remote-force/&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.  Schema name: RemoteForceLoadBC
        /// </summary>
        /// <value>This is a &lt;b&gt;remote force&lt;/b&gt; boundary condition where the load is applied on the assignment via a remote point. Therefore the assignment is connected to the remote point with RBE3 (deformable) or MPC (undeformable) conditions and the defined force is applied to the remote point.&lt;br /&gt;&lt;br /&gt;Important remarks: &lt;br /&gt;&lt;ul&gt;&lt;li&gt;The total force will be &lt;b&gt;distributed on the selection&lt;/b&gt;.&lt;/li&gt;&lt;li&gt;As the assignments are connected to the remote point, additional constraints on these nodes may lead to overconstrained systems.&lt;/li&gt;&lt;li&gt;If the number of nodes of the assignment is large (&gt;1000), it is recommended to use the &lt;b&gt;MUMPS&lt;/b&gt; or &lt;b&gt;PETSC&lt;/b&gt; solver.&lt;/li&gt;&lt;li&gt;This boundary condition is only valid for small rotations. &lt;/li&gt;&lt;/ul&gt;&lt;a href&#x3D; https://www.simscale.com/docs/simulation-setup/boundary-conditions/remote-force/&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.  Schema name: RemoteForceLoadBC</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Force
        /// </summary>
        [DataMember(Name="force", EmitDefaultValue=false)]
        public DimensionalVectorFunctionForce Force { get; set; }

        /// <summary>
        /// Gets or Sets Moment
        /// </summary>
        [DataMember(Name="moment", EmitDefaultValue=false)]
        public DimensionalVectorFunctionTorque Moment { get; set; }

        /// <summary>
        /// Gets or Sets Scaling
        /// </summary>
        [DataMember(Name="scaling", EmitDefaultValue=false)]
        public DimensionalFunctionDimensionless Scaling { get; set; }

        /// <summary>
        /// Gets or Sets PhaseAngle
        /// </summary>
        [DataMember(Name="phaseAngle", EmitDefaultValue=false)]
        public DimensionalAngle PhaseAngle { get; set; }

        /// <summary>
        /// Gets or Sets RemotePoint
        /// </summary>
        [DataMember(Name="remotePoint", EmitDefaultValue=false)]
        public DimensionalVectorLength RemotePoint { get; set; }

        /// <summary>
        /// Gets or Sets TopologicalReference
        /// </summary>
        [DataMember(Name="topologicalReference", EmitDefaultValue=false)]
        public TopologicalReference TopologicalReference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RemoteForceLoadBC {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Force: ").Append(Force).Append("\n");
            sb.Append("  Moment: ").Append(Moment).Append("\n");
            sb.Append("  Scaling: ").Append(Scaling).Append("\n");
            sb.Append("  PhaseAngle: ").Append(PhaseAngle).Append("\n");
            sb.Append("  RemotePoint: ").Append(RemotePoint).Append("\n");
            sb.Append("  DeformationBehavior: ").Append(DeformationBehavior).Append("\n");
            sb.Append("  TopologicalReference: ").Append(TopologicalReference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RemoteForceLoadBC);
        }

        /// <summary>
        /// Returns true if RemoteForceLoadBC instances are equal
        /// </summary>
        /// <param name="input">Instance of RemoteForceLoadBC to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RemoteForceLoadBC input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Force == input.Force ||
                    (this.Force != null &&
                    this.Force.Equals(input.Force))
                ) && 
                (
                    this.Moment == input.Moment ||
                    (this.Moment != null &&
                    this.Moment.Equals(input.Moment))
                ) && 
                (
                    this.Scaling == input.Scaling ||
                    (this.Scaling != null &&
                    this.Scaling.Equals(input.Scaling))
                ) && 
                (
                    this.PhaseAngle == input.PhaseAngle ||
                    (this.PhaseAngle != null &&
                    this.PhaseAngle.Equals(input.PhaseAngle))
                ) && 
                (
                    this.RemotePoint == input.RemotePoint ||
                    (this.RemotePoint != null &&
                    this.RemotePoint.Equals(input.RemotePoint))
                ) && 
                (
                    this.DeformationBehavior == input.DeformationBehavior ||
                    this.DeformationBehavior.Equals(input.DeformationBehavior)
                ) && 
                (
                    this.TopologicalReference == input.TopologicalReference ||
                    (this.TopologicalReference != null &&
                    this.TopologicalReference.Equals(input.TopologicalReference))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Force != null)
                    hashCode = hashCode * 59 + this.Force.GetHashCode();
                if (this.Moment != null)
                    hashCode = hashCode * 59 + this.Moment.GetHashCode();
                if (this.Scaling != null)
                    hashCode = hashCode * 59 + this.Scaling.GetHashCode();
                if (this.PhaseAngle != null)
                    hashCode = hashCode * 59 + this.PhaseAngle.GetHashCode();
                if (this.RemotePoint != null)
                    hashCode = hashCode * 59 + this.RemotePoint.GetHashCode();
                hashCode = hashCode * 59 + this.DeformationBehavior.GetHashCode();
                if (this.TopologicalReference != null)
                    hashCode = hashCode * 59 + this.TopologicalReference.GetHashCode();
                return hashCode;
            }
        }

    }

}
