/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// Choose between &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/materials/#newtonian-model&#39; target&#x3D;&#39;_blank&#39;&gt;Newtonian&lt;/a&gt; and &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/materials/non-newtonian-models/&#39; target&#x3D;&#39;_blank&#39;&gt;Non-Newtonian&lt;/a&gt; viscosity models.
    /// </summary>
    [DataContract]
    public partial class CrossPowerLawViscosityModel : OneOfIncompressibleMaterialViscosityModel, IEquatable<CrossPowerLawViscosityModel>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CrossPowerLawViscosityModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CrossPowerLawViscosityModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CrossPowerLawViscosityModel" /> class.
        /// </summary>
        /// <param name="type">type (required) (default to &quot;CROSS_POWER_LAW&quot;).</param>
        /// <param name="nu0">nu0.</param>
        /// <param name="nuInf">nuInf.</param>
        /// <param name="m">m.</param>
        /// <param name="n">n.</param>
        public CrossPowerLawViscosityModel(string type = "CROSS_POWER_LAW", DimensionalKinematicViscosity nu0 = default(DimensionalKinematicViscosity), DimensionalKinematicViscosity nuInf = default(DimensionalKinematicViscosity), DimensionalTime m = default(DimensionalTime), DimensionalDimensionless n = default(DimensionalDimensionless))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for CrossPowerLawViscosityModel and cannot be null");
            this.Nu0 = nu0;
            this.NuInf = nuInf;
            this.M = m;
            this.N = n;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Nu0
        /// </summary>
        [DataMember(Name="nu0", EmitDefaultValue=false)]
        public DimensionalKinematicViscosity Nu0 { get; set; }

        /// <summary>
        /// Gets or Sets NuInf
        /// </summary>
        [DataMember(Name="nuInf", EmitDefaultValue=false)]
        public DimensionalKinematicViscosity NuInf { get; set; }

        /// <summary>
        /// Gets or Sets M
        /// </summary>
        [DataMember(Name="m", EmitDefaultValue=false)]
        public DimensionalTime M { get; set; }

        /// <summary>
        /// Gets or Sets N
        /// </summary>
        [DataMember(Name="n", EmitDefaultValue=false)]
        public DimensionalDimensionless N { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CrossPowerLawViscosityModel {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Nu0: ").Append(Nu0).Append("\n");
            sb.Append("  NuInf: ").Append(NuInf).Append("\n");
            sb.Append("  M: ").Append(M).Append("\n");
            sb.Append("  N: ").Append(N).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CrossPowerLawViscosityModel);
        }

        /// <summary>
        /// Returns true if CrossPowerLawViscosityModel instances are equal
        /// </summary>
        /// <param name="input">Instance of CrossPowerLawViscosityModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CrossPowerLawViscosityModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Nu0 == input.Nu0 ||
                    (this.Nu0 != null &&
                    this.Nu0.Equals(input.Nu0))
                ) && 
                (
                    this.NuInf == input.NuInf ||
                    (this.NuInf != null &&
                    this.NuInf.Equals(input.NuInf))
                ) && 
                (
                    this.M == input.M ||
                    (this.M != null &&
                    this.M.Equals(input.M))
                ) && 
                (
                    this.N == input.N ||
                    (this.N != null &&
                    this.N.Equals(input.N))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Nu0 != null)
                    hashCode = hashCode * 59 + this.Nu0.GetHashCode();
                if (this.NuInf != null)
                    hashCode = hashCode * 59 + this.NuInf.GetHashCode();
                if (this.M != null)
                    hashCode = hashCode * 59 + this.M.GetHashCode();
                if (this.N != null)
                    hashCode = hashCode * 59 + this.N.GetHashCode();
                return hashCode;
            }
        }

    }

}
