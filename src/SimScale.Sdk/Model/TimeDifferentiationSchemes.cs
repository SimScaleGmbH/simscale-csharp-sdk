/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// TimeDifferentiationSchemes
    /// </summary>
    [DataContract]
    public partial class TimeDifferentiationSchemes : IEquatable<TimeDifferentiationSchemes>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeDifferentiationSchemes" /> class.
        /// </summary>
        /// <param name="forDefault">forDefault.</param>
        /// <param name="secondOrderScheme">secondOrderScheme (default to false).</param>
        public TimeDifferentiationSchemes(OneOfTimeDifferentiationSchemesForDefault forDefault = default(OneOfTimeDifferentiationSchemesForDefault), bool? secondOrderScheme = default(bool?))
        {
            this.ForDefault = forDefault;
            this.SecondOrderScheme = secondOrderScheme;
        }
        
        /// <summary>
        /// Gets or Sets ForDefault
        /// </summary>
        [DataMember(Name="forDefault", EmitDefaultValue=false)]
        public OneOfTimeDifferentiationSchemesForDefault ForDefault { get; set; }

        /// <summary>
        /// Gets or Sets SecondOrderScheme
        /// </summary>
        [DataMember(Name="secondOrderScheme", EmitDefaultValue=false)]
        public bool? SecondOrderScheme { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TimeDifferentiationSchemes {\n");
            sb.Append("  ForDefault: ").Append(ForDefault).Append("\n");
            sb.Append("  SecondOrderScheme: ").Append(SecondOrderScheme).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TimeDifferentiationSchemes);
        }

        /// <summary>
        /// Returns true if TimeDifferentiationSchemes instances are equal
        /// </summary>
        /// <param name="input">Instance of TimeDifferentiationSchemes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimeDifferentiationSchemes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ForDefault == input.ForDefault ||
                    (this.ForDefault != null &&
                    this.ForDefault.Equals(input.ForDefault))
                ) && 
                (
                    this.SecondOrderScheme == input.SecondOrderScheme ||
                    (this.SecondOrderScheme != null &&
                    this.SecondOrderScheme.Equals(input.SecondOrderScheme))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ForDefault != null)
                    hashCode = hashCode * 59 + this.ForDefault.GetHashCode();
                if (this.SecondOrderScheme != null)
                    hashCode = hashCode * 59 + this.SecondOrderScheme.GetHashCode();
                return hashCode;
            }
        }

    }

}
