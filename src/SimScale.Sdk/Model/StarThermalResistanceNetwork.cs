/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// &lt;br&gt;A &lt;i&gt;Thermal Resistance Network&lt;/i&gt; can be used to approximate the effect of heat sources and heat transfer from that source to the surrounding domain without resolving the source geometry.  Select the top face of the body you want to assign. &lt;p&gt;The models for &lt;b&gt;Thermal resistance network&lt;/b&gt; are as follows:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;Star Network Resistance Model:&lt;/b&gt; defines a thermal resistance network consisting out of a top, a board, a board to interface and four side resistances. A power source is assigned to the body.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Two resistor Model:&lt;/b&gt; defines a thermal resistance network consisting out of a top, a board and a board to interface resistance. A power source is assigned to the body.&lt;/li&gt;&lt;/ul&gt; &lt;br&gt; &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/advanced-concepts/thermal-resistance-networks/&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.
    /// </summary>
    [DataContract]
    public partial class StarThermalResistanceNetwork : OneOfAdvancedConceptsThermalResistanceNetworks, IEquatable<StarThermalResistanceNetwork>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StarThermalResistanceNetwork" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StarThermalResistanceNetwork() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StarThermalResistanceNetwork" /> class.
        /// </summary>
        /// <param name="type">&lt;br&gt;A &lt;i&gt;Thermal Resistance Network&lt;/i&gt; can be used to approximate the effect of heat sources and heat transfer from that source to the surrounding domain without resolving the source geometry.  Select the top face of the body you want to assign. &lt;p&gt;The models for &lt;b&gt;Thermal resistance network&lt;/b&gt; are as follows:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;Star Network Resistance Model:&lt;/b&gt; defines a thermal resistance network consisting out of a top, a board, a board to interface and four side resistances. A power source is assigned to the body.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Two resistor Model:&lt;/b&gt; defines a thermal resistance network consisting out of a top, a board and a board to interface resistance. A power source is assigned to the body.&lt;/li&gt;&lt;/ul&gt; &lt;br&gt; &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/advanced-concepts/thermal-resistance-networks/&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.  Schema name: StarThermalResistanceNetwork (required) (default to &quot;STAR_NETWORK&quot;).</param>
        /// <param name="name">name.</param>
        /// <param name="resistanceTop">resistanceTop.</param>
        /// <param name="resistanceBottom">resistanceBottom.</param>
        /// <param name="resistanceSides">resistanceSides.</param>
        /// <param name="resistanceInterface">resistanceInterface.</param>
        /// <param name="networkPower">networkPower.</param>
        /// <param name="emissivity">emissivity (default to 0.9M).</param>
        /// <param name="topologicalReference">topologicalReference.</param>
        public StarThermalResistanceNetwork(string type = "STAR_NETWORK", string name = default(string), DimensionalContactResistance resistanceTop = default(DimensionalContactResistance), DimensionalContactResistance resistanceBottom = default(DimensionalContactResistance), DimensionalContactResistance resistanceSides = default(DimensionalContactResistance), DimensionalContactResistance resistanceInterface = default(DimensionalContactResistance), DimensionalPower networkPower = default(DimensionalPower), decimal? emissivity = default(decimal?), TopologicalReference topologicalReference = default(TopologicalReference))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for StarThermalResistanceNetwork and cannot be null");
            this.Name = name;
            this.ResistanceTop = resistanceTop;
            this.ResistanceBottom = resistanceBottom;
            this.ResistanceSides = resistanceSides;
            this.ResistanceInterface = resistanceInterface;
            this.NetworkPower = networkPower;
            this.Emissivity = emissivity;
            this.TopologicalReference = topologicalReference;
        }
        
        /// <summary>
        /// &lt;br&gt;A &lt;i&gt;Thermal Resistance Network&lt;/i&gt; can be used to approximate the effect of heat sources and heat transfer from that source to the surrounding domain without resolving the source geometry.  Select the top face of the body you want to assign. &lt;p&gt;The models for &lt;b&gt;Thermal resistance network&lt;/b&gt; are as follows:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;Star Network Resistance Model:&lt;/b&gt; defines a thermal resistance network consisting out of a top, a board, a board to interface and four side resistances. A power source is assigned to the body.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Two resistor Model:&lt;/b&gt; defines a thermal resistance network consisting out of a top, a board and a board to interface resistance. A power source is assigned to the body.&lt;/li&gt;&lt;/ul&gt; &lt;br&gt; &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/advanced-concepts/thermal-resistance-networks/&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.  Schema name: StarThermalResistanceNetwork
        /// </summary>
        /// <value>&lt;br&gt;A &lt;i&gt;Thermal Resistance Network&lt;/i&gt; can be used to approximate the effect of heat sources and heat transfer from that source to the surrounding domain without resolving the source geometry.  Select the top face of the body you want to assign. &lt;p&gt;The models for &lt;b&gt;Thermal resistance network&lt;/b&gt; are as follows:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;Star Network Resistance Model:&lt;/b&gt; defines a thermal resistance network consisting out of a top, a board, a board to interface and four side resistances. A power source is assigned to the body.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Two resistor Model:&lt;/b&gt; defines a thermal resistance network consisting out of a top, a board and a board to interface resistance. A power source is assigned to the body.&lt;/li&gt;&lt;/ul&gt; &lt;br&gt; &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/advanced-concepts/thermal-resistance-networks/&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.  Schema name: StarThermalResistanceNetwork</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ResistanceTop
        /// </summary>
        [DataMember(Name="resistanceTop", EmitDefaultValue=false)]
        public DimensionalContactResistance ResistanceTop { get; set; }

        /// <summary>
        /// Gets or Sets ResistanceBottom
        /// </summary>
        [DataMember(Name="resistanceBottom", EmitDefaultValue=false)]
        public DimensionalContactResistance ResistanceBottom { get; set; }

        /// <summary>
        /// Gets or Sets ResistanceSides
        /// </summary>
        [DataMember(Name="resistanceSides", EmitDefaultValue=false)]
        public DimensionalContactResistance ResistanceSides { get; set; }

        /// <summary>
        /// Gets or Sets ResistanceInterface
        /// </summary>
        [DataMember(Name="resistanceInterface", EmitDefaultValue=false)]
        public DimensionalContactResistance ResistanceInterface { get; set; }

        /// <summary>
        /// Gets or Sets NetworkPower
        /// </summary>
        [DataMember(Name="networkPower", EmitDefaultValue=false)]
        public DimensionalPower NetworkPower { get; set; }

        /// <summary>
        /// Gets or Sets Emissivity
        /// </summary>
        [DataMember(Name="emissivity", EmitDefaultValue=false)]
        public decimal? Emissivity { get; set; }

        /// <summary>
        /// Gets or Sets TopologicalReference
        /// </summary>
        [DataMember(Name="topologicalReference", EmitDefaultValue=false)]
        public TopologicalReference TopologicalReference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StarThermalResistanceNetwork {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ResistanceTop: ").Append(ResistanceTop).Append("\n");
            sb.Append("  ResistanceBottom: ").Append(ResistanceBottom).Append("\n");
            sb.Append("  ResistanceSides: ").Append(ResistanceSides).Append("\n");
            sb.Append("  ResistanceInterface: ").Append(ResistanceInterface).Append("\n");
            sb.Append("  NetworkPower: ").Append(NetworkPower).Append("\n");
            sb.Append("  Emissivity: ").Append(Emissivity).Append("\n");
            sb.Append("  TopologicalReference: ").Append(TopologicalReference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StarThermalResistanceNetwork);
        }

        /// <summary>
        /// Returns true if StarThermalResistanceNetwork instances are equal
        /// </summary>
        /// <param name="input">Instance of StarThermalResistanceNetwork to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StarThermalResistanceNetwork input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ResistanceTop == input.ResistanceTop ||
                    (this.ResistanceTop != null &&
                    this.ResistanceTop.Equals(input.ResistanceTop))
                ) && 
                (
                    this.ResistanceBottom == input.ResistanceBottom ||
                    (this.ResistanceBottom != null &&
                    this.ResistanceBottom.Equals(input.ResistanceBottom))
                ) && 
                (
                    this.ResistanceSides == input.ResistanceSides ||
                    (this.ResistanceSides != null &&
                    this.ResistanceSides.Equals(input.ResistanceSides))
                ) && 
                (
                    this.ResistanceInterface == input.ResistanceInterface ||
                    (this.ResistanceInterface != null &&
                    this.ResistanceInterface.Equals(input.ResistanceInterface))
                ) && 
                (
                    this.NetworkPower == input.NetworkPower ||
                    (this.NetworkPower != null &&
                    this.NetworkPower.Equals(input.NetworkPower))
                ) && 
                (
                    this.Emissivity == input.Emissivity ||
                    (this.Emissivity != null &&
                    this.Emissivity.Equals(input.Emissivity))
                ) && 
                (
                    this.TopologicalReference == input.TopologicalReference ||
                    (this.TopologicalReference != null &&
                    this.TopologicalReference.Equals(input.TopologicalReference))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ResistanceTop != null)
                    hashCode = hashCode * 59 + this.ResistanceTop.GetHashCode();
                if (this.ResistanceBottom != null)
                    hashCode = hashCode * 59 + this.ResistanceBottom.GetHashCode();
                if (this.ResistanceSides != null)
                    hashCode = hashCode * 59 + this.ResistanceSides.GetHashCode();
                if (this.ResistanceInterface != null)
                    hashCode = hashCode * 59 + this.ResistanceInterface.GetHashCode();
                if (this.NetworkPower != null)
                    hashCode = hashCode * 59 + this.NetworkPower.GetHashCode();
                if (this.Emissivity != null)
                    hashCode = hashCode * 59 + this.Emissivity.GetHashCode();
                if (this.TopologicalReference != null)
                    hashCode = hashCode * 59 + this.TopologicalReference.GetHashCode();
                return hashCode;
            }
        }

    }

}
