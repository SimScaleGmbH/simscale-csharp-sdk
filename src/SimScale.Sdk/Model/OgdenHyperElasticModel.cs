/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// &lt;p&gt;Choose the hyperelastic material model that should be used. All models derive the stress-strain relation from a strain energy function defined by the material model parameters.&lt;/p&gt;
    /// </summary>
    [DataContract]
    public partial class OgdenHyperElasticModel : OneOfHyperElasticMaterialBehaviorHyperElasticModel, IEquatable<OgdenHyperElasticModel>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OgdenHyperElasticModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OgdenHyperElasticModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OgdenHyperElasticModel" /> class.
        /// </summary>
        /// <param name="type">&lt;p&gt;Choose the hyperelastic material model that should be used. All models derive the stress-strain relation from a strain energy function defined by the material model parameters.&lt;/p&gt;  Schema name: OgdenHyperElasticModel (required) (default to &quot;OGDEN&quot;).</param>
        /// <param name="order">order.</param>
        /// <param name="d1">d1.</param>
        public OgdenHyperElasticModel(string type = "OGDEN", OneOfOgdenHyperElasticModelOrder order = default(OneOfOgdenHyperElasticModelOrder), DimensionalInvPressure d1 = default(DimensionalInvPressure))
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for OgdenHyperElasticModel and cannot be null");
            this.Order = order;
            this.D1 = d1;
        }
        
        /// <summary>
        /// &lt;p&gt;Choose the hyperelastic material model that should be used. All models derive the stress-strain relation from a strain energy function defined by the material model parameters.&lt;/p&gt;  Schema name: OgdenHyperElasticModel
        /// </summary>
        /// <value>&lt;p&gt;Choose the hyperelastic material model that should be used. All models derive the stress-strain relation from a strain energy function defined by the material model parameters.&lt;/p&gt;  Schema name: OgdenHyperElasticModel</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name="order", EmitDefaultValue=false)]
        public OneOfOgdenHyperElasticModelOrder Order { get; set; }

        /// <summary>
        /// Gets or Sets D1
        /// </summary>
        [DataMember(Name="d1", EmitDefaultValue=false)]
        public DimensionalInvPressure D1 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OgdenHyperElasticModel {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  D1: ").Append(D1).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OgdenHyperElasticModel);
        }

        /// <summary>
        /// Returns true if OgdenHyperElasticModel instances are equal
        /// </summary>
        /// <param name="input">Instance of OgdenHyperElasticModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OgdenHyperElasticModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Order == input.Order ||
                    (this.Order != null &&
                    this.Order.Equals(input.Order))
                ) && 
                (
                    this.D1 == input.D1 ||
                    (this.D1 != null &&
                    this.D1.Equals(input.D1))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Order != null)
                    hashCode = hashCode * 59 + this.Order.GetHashCode();
                if (this.D1 != null)
                    hashCode = hashCode * 59 + this.D1.GetHashCode();
                return hashCode;
            }
        }

    }

}
