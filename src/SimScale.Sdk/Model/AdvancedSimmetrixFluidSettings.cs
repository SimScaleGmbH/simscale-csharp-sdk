/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// AdvancedSimmetrixFluidSettings
    /// </summary>
    [DataContract]
    public partial class AdvancedSimmetrixFluidSettings : IEquatable<AdvancedSimmetrixFluidSettings>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdvancedSimmetrixFluidSettings" /> class.
        /// </summary>
        /// <param name="smallFeatureTolerance">smallFeatureTolerance.</param>
        /// <param name="gapElements">&lt;p&gt;Define a target number of elements across the thickness of thin gaps. &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/meshing/standard/#gap-refinement-factor&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.&lt;img src&#x3D;\&quot;/spec/resources/help/imgs/simmetrix-gap-elements.png\&quot; class&#x3D;\&quot;helpPopupImage\&quot;/&gt;Example of gap refinements applied with a target of 4 elements across the thickness&lt;/p&gt; (default to 0.05M).</param>
        public AdvancedSimmetrixFluidSettings(DimensionalLength smallFeatureTolerance = default(DimensionalLength), decimal? gapElements = default(decimal?))
        {
            this.SmallFeatureTolerance = smallFeatureTolerance;
            this.GapElements = gapElements;
        }
        
        /// <summary>
        /// Gets or Sets SmallFeatureTolerance
        /// </summary>
        [DataMember(Name="smallFeatureTolerance", EmitDefaultValue=false)]
        public DimensionalLength SmallFeatureTolerance { get; set; }

        /// <summary>
        /// &lt;p&gt;Define a target number of elements across the thickness of thin gaps. &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/meshing/standard/#gap-refinement-factor&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.&lt;img src&#x3D;\&quot;/spec/resources/help/imgs/simmetrix-gap-elements.png\&quot; class&#x3D;\&quot;helpPopupImage\&quot;/&gt;Example of gap refinements applied with a target of 4 elements across the thickness&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;Define a target number of elements across the thickness of thin gaps. &lt;a href&#x3D;&#39;https://www.simscale.com/docs/simulation-setup/meshing/standard/#gap-refinement-factor&#39; target&#x3D;&#39;_blank&#39;&gt;Learn more&lt;/a&gt;.&lt;img src&#x3D;\&quot;/spec/resources/help/imgs/simmetrix-gap-elements.png\&quot; class&#x3D;\&quot;helpPopupImage\&quot;/&gt;Example of gap refinements applied with a target of 4 elements across the thickness&lt;/p&gt;</value>
        [DataMember(Name="gapElements", EmitDefaultValue=false)]
        public decimal? GapElements { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdvancedSimmetrixFluidSettings {\n");
            sb.Append("  SmallFeatureTolerance: ").Append(SmallFeatureTolerance).Append("\n");
            sb.Append("  GapElements: ").Append(GapElements).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdvancedSimmetrixFluidSettings);
        }

        /// <summary>
        /// Returns true if AdvancedSimmetrixFluidSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of AdvancedSimmetrixFluidSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdvancedSimmetrixFluidSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SmallFeatureTolerance == input.SmallFeatureTolerance ||
                    (this.SmallFeatureTolerance != null &&
                    this.SmallFeatureTolerance.Equals(input.SmallFeatureTolerance))
                ) && 
                (
                    this.GapElements == input.GapElements ||
                    (this.GapElements != null &&
                    this.GapElements.Equals(input.GapElements))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SmallFeatureTolerance != null)
                    hashCode = hashCode * 59 + this.SmallFeatureTolerance.GetHashCode();
                if (this.GapElements != null)
                    hashCode = hashCode * 59 + this.GapElements.GetHashCode();
                return hashCode;
            }
        }

    }

}
