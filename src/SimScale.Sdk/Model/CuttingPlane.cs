/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = SimScale.Sdk.Client.OpenAPIDateConverter;

namespace SimScale.Sdk.Model
{
    /// <summary>
    /// CuttingPlane
    /// </summary>
    [DataContract]
    public partial class CuttingPlane : IEquatable<CuttingPlane>
    {
        /// <summary>
        /// Gets or Sets RenderMode
        /// </summary>
        [DataMember(Name="renderMode", EmitDefaultValue=false)]
        public RenderMode? RenderMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CuttingPlane" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CuttingPlane() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CuttingPlane" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="center">center (required).</param>
        /// <param name="normal">normal (required).</param>
        /// <param name="opacity">opacity.</param>
        /// <param name="clipping">clipping (required) (default to true).</param>
        /// <param name="vectorGridSpacing">This field is required if projectVectorsOntoPlane is set to true. (default to 0.02D).</param>
        /// <param name="scalarField">scalarField.</param>
        /// <param name="vectorField">vectorField.</param>
        /// <param name="solidColor">solidColor.</param>
        /// <param name="projectVectorsOntoPlane">If a vectorField is provided, this flag will project the vector field onto the cutting plane. (required) (default to false).</param>
        /// <param name="renderMode">renderMode.</param>
        public CuttingPlane(string name = default(string), Vector3D center = default(Vector3D), Vector3D normal = default(Vector3D), double? opacity = default(double?), bool? clipping = true, double? vectorGridSpacing = default(double?), ScalarField scalarField = default(ScalarField), VectorField vectorField = default(VectorField), Color solidColor = default(Color), bool? projectVectorsOntoPlane = false, RenderMode? renderMode = default(RenderMode?))
        {
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for CuttingPlane and cannot be null");
            // to ensure "center" is required (not null)
            this.Center = center ?? throw new ArgumentNullException("center is a required property for CuttingPlane and cannot be null");
            // to ensure "normal" is required (not null)
            this.Normal = normal ?? throw new ArgumentNullException("normal is a required property for CuttingPlane and cannot be null");
            // to ensure "clipping" is required (not null)
            this.Clipping = clipping ?? throw new ArgumentNullException("clipping is a required property for CuttingPlane and cannot be null");
            // to ensure "projectVectorsOntoPlane" is required (not null)
            this.ProjectVectorsOntoPlane = projectVectorsOntoPlane ?? throw new ArgumentNullException("projectVectorsOntoPlane is a required property for CuttingPlane and cannot be null");
            this.Opacity = opacity;
            this.VectorGridSpacing = vectorGridSpacing;
            this.ScalarField = scalarField;
            this.VectorField = vectorField;
            this.SolidColor = solidColor;
            this.RenderMode = renderMode;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Center
        /// </summary>
        [DataMember(Name="center", EmitDefaultValue=false)]
        public Vector3D Center { get; set; }

        /// <summary>
        /// Gets or Sets Normal
        /// </summary>
        [DataMember(Name="normal", EmitDefaultValue=false)]
        public Vector3D Normal { get; set; }

        /// <summary>
        /// Gets or Sets Opacity
        /// </summary>
        [DataMember(Name="opacity", EmitDefaultValue=false)]
        public double? Opacity { get; set; }

        /// <summary>
        /// Gets or Sets Clipping
        /// </summary>
        [DataMember(Name="clipping", EmitDefaultValue=false)]
        public bool? Clipping { get; set; }

        /// <summary>
        /// This field is required if projectVectorsOntoPlane is set to true.
        /// </summary>
        /// <value>This field is required if projectVectorsOntoPlane is set to true.</value>
        [DataMember(Name="vectorGridSpacing", EmitDefaultValue=false)]
        public double? VectorGridSpacing { get; set; }

        /// <summary>
        /// Gets or Sets ScalarField
        /// </summary>
        [DataMember(Name="scalarField", EmitDefaultValue=false)]
        public ScalarField ScalarField { get; set; }

        /// <summary>
        /// Gets or Sets VectorField
        /// </summary>
        [DataMember(Name="vectorField", EmitDefaultValue=false)]
        public VectorField VectorField { get; set; }

        /// <summary>
        /// Gets or Sets SolidColor
        /// </summary>
        [DataMember(Name="solidColor", EmitDefaultValue=false)]
        public Color SolidColor { get; set; }

        /// <summary>
        /// If a vectorField is provided, this flag will project the vector field onto the cutting plane.
        /// </summary>
        /// <value>If a vectorField is provided, this flag will project the vector field onto the cutting plane.</value>
        [DataMember(Name="projectVectorsOntoPlane", EmitDefaultValue=false)]
        public bool? ProjectVectorsOntoPlane { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CuttingPlane {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Center: ").Append(Center).Append("\n");
            sb.Append("  Normal: ").Append(Normal).Append("\n");
            sb.Append("  Opacity: ").Append(Opacity).Append("\n");
            sb.Append("  Clipping: ").Append(Clipping).Append("\n");
            sb.Append("  VectorGridSpacing: ").Append(VectorGridSpacing).Append("\n");
            sb.Append("  ScalarField: ").Append(ScalarField).Append("\n");
            sb.Append("  VectorField: ").Append(VectorField).Append("\n");
            sb.Append("  SolidColor: ").Append(SolidColor).Append("\n");
            sb.Append("  ProjectVectorsOntoPlane: ").Append(ProjectVectorsOntoPlane).Append("\n");
            sb.Append("  RenderMode: ").Append(RenderMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CuttingPlane);
        }

        /// <summary>
        /// Returns true if CuttingPlane instances are equal
        /// </summary>
        /// <param name="input">Instance of CuttingPlane to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CuttingPlane input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Center == input.Center ||
                    (this.Center != null &&
                    this.Center.Equals(input.Center))
                ) && 
                (
                    this.Normal == input.Normal ||
                    (this.Normal != null &&
                    this.Normal.Equals(input.Normal))
                ) && 
                (
                    this.Opacity == input.Opacity ||
                    (this.Opacity != null &&
                    this.Opacity.Equals(input.Opacity))
                ) && 
                (
                    this.Clipping == input.Clipping ||
                    (this.Clipping != null &&
                    this.Clipping.Equals(input.Clipping))
                ) && 
                (
                    this.VectorGridSpacing == input.VectorGridSpacing ||
                    (this.VectorGridSpacing != null &&
                    this.VectorGridSpacing.Equals(input.VectorGridSpacing))
                ) && 
                (
                    this.ScalarField == input.ScalarField ||
                    (this.ScalarField != null &&
                    this.ScalarField.Equals(input.ScalarField))
                ) && 
                (
                    this.VectorField == input.VectorField ||
                    (this.VectorField != null &&
                    this.VectorField.Equals(input.VectorField))
                ) && 
                (
                    this.SolidColor == input.SolidColor ||
                    (this.SolidColor != null &&
                    this.SolidColor.Equals(input.SolidColor))
                ) && 
                (
                    this.ProjectVectorsOntoPlane == input.ProjectVectorsOntoPlane ||
                    (this.ProjectVectorsOntoPlane != null &&
                    this.ProjectVectorsOntoPlane.Equals(input.ProjectVectorsOntoPlane))
                ) && 
                (
                    this.RenderMode == input.RenderMode ||
                    this.RenderMode.Equals(input.RenderMode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Center != null)
                    hashCode = hashCode * 59 + this.Center.GetHashCode();
                if (this.Normal != null)
                    hashCode = hashCode * 59 + this.Normal.GetHashCode();
                if (this.Opacity != null)
                    hashCode = hashCode * 59 + this.Opacity.GetHashCode();
                if (this.Clipping != null)
                    hashCode = hashCode * 59 + this.Clipping.GetHashCode();
                if (this.VectorGridSpacing != null)
                    hashCode = hashCode * 59 + this.VectorGridSpacing.GetHashCode();
                if (this.ScalarField != null)
                    hashCode = hashCode * 59 + this.ScalarField.GetHashCode();
                if (this.VectorField != null)
                    hashCode = hashCode * 59 + this.VectorField.GetHashCode();
                if (this.SolidColor != null)
                    hashCode = hashCode * 59 + this.SolidColor.GetHashCode();
                if (this.ProjectVectorsOntoPlane != null)
                    hashCode = hashCode * 59 + this.ProjectVectorsOntoPlane.GetHashCode();
                hashCode = hashCode * 59 + this.RenderMode.GetHashCode();
                return hashCode;
            }
        }

    }

}
