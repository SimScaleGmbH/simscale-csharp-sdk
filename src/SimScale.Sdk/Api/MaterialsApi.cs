/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using SimScale.Sdk.Client;
using SimScale.Sdk.Model;

namespace SimScale.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMaterialsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new material
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="createMaterialRequest"> (optional)</param>
        /// <returns>MaterialResponse</returns>
        MaterialResponse CreateMaterial (string materialGroupId = default(string), CreateMaterialRequest createMaterialRequest = default(CreateMaterialRequest));

        /// <summary>
        /// Create a new material
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="createMaterialRequest"> (optional)</param>
        /// <returns>ApiResponse of MaterialResponse</returns>
        ApiResponse<MaterialResponse> CreateMaterialWithHttpInfo (string materialGroupId = default(string), CreateMaterialRequest createMaterialRequest = default(CreateMaterialRequest));
        /// <summary>
        /// Create new material group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMaterialGroupRequest"> (optional)</param>
        /// <returns>MaterialGroupResponse</returns>
        MaterialGroupResponse CreateMaterialGroup (CreateMaterialGroupRequest createMaterialGroupRequest = default(CreateMaterialGroupRequest));

        /// <summary>
        /// Create new material group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMaterialGroupRequest"> (optional)</param>
        /// <returns>ApiResponse of MaterialGroupResponse</returns>
        ApiResponse<MaterialGroupResponse> CreateMaterialGroupWithHttpInfo (CreateMaterialGroupRequest createMaterialGroupRequest = default(CreateMaterialGroupRequest));
        /// <summary>
        /// Create a child material group for the specified parent group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="createNestedMaterialGroupRequest"> (optional)</param>
        /// <returns>MaterialGroupResponse</returns>
        MaterialGroupResponse CreateNestedMaterialGroup (string materialGroupId = default(string), CreateNestedMaterialGroupRequest createNestedMaterialGroupRequest = default(CreateNestedMaterialGroupRequest));

        /// <summary>
        /// Create a child material group for the specified parent group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="createNestedMaterialGroupRequest"> (optional)</param>
        /// <returns>ApiResponse of MaterialGroupResponse</returns>
        ApiResponse<MaterialGroupResponse> CreateNestedMaterialGroupWithHttpInfo (string materialGroupId = default(string), CreateNestedMaterialGroupRequest createNestedMaterialGroupRequest = default(CreateNestedMaterialGroupRequest));
        /// <summary>
        /// Remove an existing material
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="materialId">ID of a material</param>
        /// <returns></returns>
        void DeleteMaterialData (string materialGroupId = default(string), string materialId = default(string));

        /// <summary>
        /// Remove an existing material
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="materialId">ID of a material</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteMaterialDataWithHttpInfo (string materialGroupId = default(string), string materialId = default(string));
        /// <summary>
        /// Delete material group, sub-groups associated to it, and materials associated to the group and all sub-groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <returns></returns>
        void DeleteMaterialGroup (string materialGroupId = default(string));

        /// <summary>
        /// Delete material group, sub-groups associated to it, and materials associated to the group and all sub-groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteMaterialGroupWithHttpInfo (string materialGroupId = default(string));
        /// <summary>
        /// Get information about an existing material
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="materialId">ID of a material</param>
        /// <returns>MaterialResponse</returns>
        MaterialResponse GetMaterialData (string materialGroupId = default(string), string materialId = default(string));

        /// <summary>
        /// Get information about an existing material
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="materialId">ID of a material</param>
        /// <returns>ApiResponse of MaterialResponse</returns>
        ApiResponse<MaterialResponse> GetMaterialDataWithHttpInfo (string materialGroupId = default(string), string materialId = default(string));
        /// <summary>
        /// Fetch material group information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <returns>MaterialGroupResponse</returns>
        MaterialGroupResponse GetMaterialGroupMetadata (string materialGroupId = default(string));

        /// <summary>
        /// Fetch material group information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <returns>ApiResponse of MaterialGroupResponse</returns>
        ApiResponse<MaterialGroupResponse> GetMaterialGroupMetadataWithHttpInfo (string materialGroupId = default(string));
        /// <summary>
        /// List all the material groups the user has access to
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>MaterialGroupListResponse</returns>
        MaterialGroupListResponse GetMaterialGroups (int? limit = 100, int? page = 1);

        /// <summary>
        /// List all the material groups the user has access to
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>ApiResponse of MaterialGroupListResponse</returns>
        ApiResponse<MaterialGroupListResponse> GetMaterialGroupsWithHttpInfo (int? limit = 100, int? page = 1);
        /// <summary>
        /// List materials within the material group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>MaterialListResponse</returns>
        MaterialListResponse GetMaterials (string materialGroupId = default(string), int? limit = 100, int? page = 1);

        /// <summary>
        /// List materials within the material group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>ApiResponse of MaterialListResponse</returns>
        ApiResponse<MaterialListResponse> GetMaterialsWithHttpInfo (string materialGroupId = default(string), int? limit = 100, int? page = 1);
        /// <summary>
        /// List all sub-groups of the specified material group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>MaterialGroupListResponse</returns>
        MaterialGroupListResponse GetNestedMaterialGroups (string materialGroupId = default(string), int? limit = 100, int? page = 1);

        /// <summary>
        /// List all sub-groups of the specified material group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>ApiResponse of MaterialGroupListResponse</returns>
        ApiResponse<MaterialGroupListResponse> GetNestedMaterialGroupsWithHttpInfo (string materialGroupId = default(string), int? limit = 100, int? page = 1);
        /// <summary>
        /// Update an existing material
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="materialId">ID of a material</param>
        /// <param name="createMaterialRequest"> (optional)</param>
        /// <returns>MaterialResponse</returns>
        MaterialResponse UpdateMaterialData (string materialGroupId = default(string), string materialId = default(string), CreateMaterialRequest createMaterialRequest = default(CreateMaterialRequest));

        /// <summary>
        /// Update an existing material
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="materialId">ID of a material</param>
        /// <param name="createMaterialRequest"> (optional)</param>
        /// <returns>ApiResponse of MaterialResponse</returns>
        ApiResponse<MaterialResponse> UpdateMaterialDataWithHttpInfo (string materialGroupId = default(string), string materialId = default(string), CreateMaterialRequest createMaterialRequest = default(CreateMaterialRequest));
        /// <summary>
        /// Update material group information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="updateMaterialGroupRequest"> (optional)</param>
        /// <returns>MaterialGroupResponse</returns>
        MaterialGroupResponse UpdateMaterialGroupMetadata (string materialGroupId = default(string), UpdateMaterialGroupRequest updateMaterialGroupRequest = default(UpdateMaterialGroupRequest));

        /// <summary>
        /// Update material group information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="updateMaterialGroupRequest"> (optional)</param>
        /// <returns>ApiResponse of MaterialGroupResponse</returns>
        ApiResponse<MaterialGroupResponse> UpdateMaterialGroupMetadataWithHttpInfo (string materialGroupId = default(string), UpdateMaterialGroupRequest updateMaterialGroupRequest = default(UpdateMaterialGroupRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMaterialsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a new material
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="createMaterialRequest"> (optional)</param>
        /// <returns>Task of MaterialResponse</returns>
        System.Threading.Tasks.Task<MaterialResponse> CreateMaterialAsync (string materialGroupId = default(string), CreateMaterialRequest createMaterialRequest = default(CreateMaterialRequest));

        /// <summary>
        /// Create a new material
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="createMaterialRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (MaterialResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MaterialResponse>> CreateMaterialAsyncWithHttpInfo (string materialGroupId = default(string), CreateMaterialRequest createMaterialRequest = default(CreateMaterialRequest));
        /// <summary>
        /// Create new material group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMaterialGroupRequest"> (optional)</param>
        /// <returns>Task of MaterialGroupResponse</returns>
        System.Threading.Tasks.Task<MaterialGroupResponse> CreateMaterialGroupAsync (CreateMaterialGroupRequest createMaterialGroupRequest = default(CreateMaterialGroupRequest));

        /// <summary>
        /// Create new material group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMaterialGroupRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (MaterialGroupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MaterialGroupResponse>> CreateMaterialGroupAsyncWithHttpInfo (CreateMaterialGroupRequest createMaterialGroupRequest = default(CreateMaterialGroupRequest));
        /// <summary>
        /// Create a child material group for the specified parent group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="createNestedMaterialGroupRequest"> (optional)</param>
        /// <returns>Task of MaterialGroupResponse</returns>
        System.Threading.Tasks.Task<MaterialGroupResponse> CreateNestedMaterialGroupAsync (string materialGroupId = default(string), CreateNestedMaterialGroupRequest createNestedMaterialGroupRequest = default(CreateNestedMaterialGroupRequest));

        /// <summary>
        /// Create a child material group for the specified parent group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="createNestedMaterialGroupRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (MaterialGroupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MaterialGroupResponse>> CreateNestedMaterialGroupAsyncWithHttpInfo (string materialGroupId = default(string), CreateNestedMaterialGroupRequest createNestedMaterialGroupRequest = default(CreateNestedMaterialGroupRequest));
        /// <summary>
        /// Remove an existing material
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="materialId">ID of a material</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteMaterialDataAsync (string materialGroupId = default(string), string materialId = default(string));

        /// <summary>
        /// Remove an existing material
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="materialId">ID of a material</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMaterialDataAsyncWithHttpInfo (string materialGroupId = default(string), string materialId = default(string));
        /// <summary>
        /// Delete material group, sub-groups associated to it, and materials associated to the group and all sub-groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteMaterialGroupAsync (string materialGroupId = default(string));

        /// <summary>
        /// Delete material group, sub-groups associated to it, and materials associated to the group and all sub-groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMaterialGroupAsyncWithHttpInfo (string materialGroupId = default(string));
        /// <summary>
        /// Get information about an existing material
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="materialId">ID of a material</param>
        /// <returns>Task of MaterialResponse</returns>
        System.Threading.Tasks.Task<MaterialResponse> GetMaterialDataAsync (string materialGroupId = default(string), string materialId = default(string));

        /// <summary>
        /// Get information about an existing material
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="materialId">ID of a material</param>
        /// <returns>Task of ApiResponse (MaterialResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MaterialResponse>> GetMaterialDataAsyncWithHttpInfo (string materialGroupId = default(string), string materialId = default(string));
        /// <summary>
        /// Fetch material group information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <returns>Task of MaterialGroupResponse</returns>
        System.Threading.Tasks.Task<MaterialGroupResponse> GetMaterialGroupMetadataAsync (string materialGroupId = default(string));

        /// <summary>
        /// Fetch material group information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <returns>Task of ApiResponse (MaterialGroupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MaterialGroupResponse>> GetMaterialGroupMetadataAsyncWithHttpInfo (string materialGroupId = default(string));
        /// <summary>
        /// List all the material groups the user has access to
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>Task of MaterialGroupListResponse</returns>
        System.Threading.Tasks.Task<MaterialGroupListResponse> GetMaterialGroupsAsync (int? limit = 100, int? page = 1);

        /// <summary>
        /// List all the material groups the user has access to
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (MaterialGroupListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MaterialGroupListResponse>> GetMaterialGroupsAsyncWithHttpInfo (int? limit = 100, int? page = 1);
        /// <summary>
        /// List materials within the material group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>Task of MaterialListResponse</returns>
        System.Threading.Tasks.Task<MaterialListResponse> GetMaterialsAsync (string materialGroupId = default(string), int? limit = 100, int? page = 1);

        /// <summary>
        /// List materials within the material group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (MaterialListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MaterialListResponse>> GetMaterialsAsyncWithHttpInfo (string materialGroupId = default(string), int? limit = 100, int? page = 1);
        /// <summary>
        /// List all sub-groups of the specified material group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>Task of MaterialGroupListResponse</returns>
        System.Threading.Tasks.Task<MaterialGroupListResponse> GetNestedMaterialGroupsAsync (string materialGroupId = default(string), int? limit = 100, int? page = 1);

        /// <summary>
        /// List all sub-groups of the specified material group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (MaterialGroupListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MaterialGroupListResponse>> GetNestedMaterialGroupsAsyncWithHttpInfo (string materialGroupId = default(string), int? limit = 100, int? page = 1);
        /// <summary>
        /// Update an existing material
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="materialId">ID of a material</param>
        /// <param name="createMaterialRequest"> (optional)</param>
        /// <returns>Task of MaterialResponse</returns>
        System.Threading.Tasks.Task<MaterialResponse> UpdateMaterialDataAsync (string materialGroupId = default(string), string materialId = default(string), CreateMaterialRequest createMaterialRequest = default(CreateMaterialRequest));

        /// <summary>
        /// Update an existing material
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="materialId">ID of a material</param>
        /// <param name="createMaterialRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (MaterialResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MaterialResponse>> UpdateMaterialDataAsyncWithHttpInfo (string materialGroupId = default(string), string materialId = default(string), CreateMaterialRequest createMaterialRequest = default(CreateMaterialRequest));
        /// <summary>
        /// Update material group information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="updateMaterialGroupRequest"> (optional)</param>
        /// <returns>Task of MaterialGroupResponse</returns>
        System.Threading.Tasks.Task<MaterialGroupResponse> UpdateMaterialGroupMetadataAsync (string materialGroupId = default(string), UpdateMaterialGroupRequest updateMaterialGroupRequest = default(UpdateMaterialGroupRequest));

        /// <summary>
        /// Update material group information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="updateMaterialGroupRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (MaterialGroupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MaterialGroupResponse>> UpdateMaterialGroupMetadataAsyncWithHttpInfo (string materialGroupId = default(string), UpdateMaterialGroupRequest updateMaterialGroupRequest = default(UpdateMaterialGroupRequest));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMaterialsApi : IMaterialsApiSync, IMaterialsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MaterialsApi : IMaterialsApi
    {
        private SimScale.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MaterialsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MaterialsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MaterialsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MaterialsApi(String basePath)
        {
            this.Configuration = SimScale.Sdk.Client.Configuration.MergeConfigurations(
                SimScale.Sdk.Client.GlobalConfiguration.Instance,
                new SimScale.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new SimScale.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SimScale.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = SimScale.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MaterialsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MaterialsApi(SimScale.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = SimScale.Sdk.Client.Configuration.MergeConfigurations(
                SimScale.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new SimScale.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SimScale.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = SimScale.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MaterialsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MaterialsApi(SimScale.Sdk.Client.ISynchronousClient client,SimScale.Sdk.Client.IAsynchronousClient asyncClient, SimScale.Sdk.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = SimScale.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public SimScale.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public SimScale.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SimScale.Sdk.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SimScale.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a new material 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="createMaterialRequest"> (optional)</param>
        /// <returns>MaterialResponse</returns>
        public MaterialResponse CreateMaterial (string materialGroupId = default(string), CreateMaterialRequest createMaterialRequest = default(CreateMaterialRequest))
        {
             SimScale.Sdk.Client.ApiResponse<MaterialResponse> localVarResponse = CreateMaterialWithHttpInfo(materialGroupId, createMaterialRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new material 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="createMaterialRequest"> (optional)</param>
        /// <returns>ApiResponse of MaterialResponse</returns>
        public SimScale.Sdk.Client.ApiResponse< MaterialResponse > CreateMaterialWithHttpInfo (string materialGroupId = default(string), CreateMaterialRequest createMaterialRequest = default(CreateMaterialRequest))
        {
            // verify the required parameter 'materialGroupId' is set
            if (materialGroupId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'materialGroupId' when calling MaterialsApi->CreateMaterial");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("materialGroupId", SimScale.Sdk.Client.ClientUtils.ParameterToString(materialGroupId)); // path parameter
            localVarRequestOptions.Data = createMaterialRequest;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< MaterialResponse >("/materialgroups/{materialGroupId}/materials", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMaterial", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new material 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="createMaterialRequest"> (optional)</param>
        /// <returns>Task of MaterialResponse</returns>
        public async System.Threading.Tasks.Task<MaterialResponse> CreateMaterialAsync (string materialGroupId = default(string), CreateMaterialRequest createMaterialRequest = default(CreateMaterialRequest))
        {
             SimScale.Sdk.Client.ApiResponse<MaterialResponse> localVarResponse = await CreateMaterialAsyncWithHttpInfo(materialGroupId, createMaterialRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new material 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="createMaterialRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (MaterialResponse)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<MaterialResponse>> CreateMaterialAsyncWithHttpInfo (string materialGroupId = default(string), CreateMaterialRequest createMaterialRequest = default(CreateMaterialRequest))
        {
            // verify the required parameter 'materialGroupId' is set
            if (materialGroupId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'materialGroupId' when calling MaterialsApi->CreateMaterial");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("materialGroupId", SimScale.Sdk.Client.ClientUtils.ParameterToString(materialGroupId)); // path parameter
            localVarRequestOptions.Data = createMaterialRequest;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<MaterialResponse>("/materialgroups/{materialGroupId}/materials", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMaterial", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create new material group 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMaterialGroupRequest"> (optional)</param>
        /// <returns>MaterialGroupResponse</returns>
        public MaterialGroupResponse CreateMaterialGroup (CreateMaterialGroupRequest createMaterialGroupRequest = default(CreateMaterialGroupRequest))
        {
             SimScale.Sdk.Client.ApiResponse<MaterialGroupResponse> localVarResponse = CreateMaterialGroupWithHttpInfo(createMaterialGroupRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create new material group 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMaterialGroupRequest"> (optional)</param>
        /// <returns>ApiResponse of MaterialGroupResponse</returns>
        public SimScale.Sdk.Client.ApiResponse< MaterialGroupResponse > CreateMaterialGroupWithHttpInfo (CreateMaterialGroupRequest createMaterialGroupRequest = default(CreateMaterialGroupRequest))
        {
            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createMaterialGroupRequest;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< MaterialGroupResponse >("/materialgroups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMaterialGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create new material group 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMaterialGroupRequest"> (optional)</param>
        /// <returns>Task of MaterialGroupResponse</returns>
        public async System.Threading.Tasks.Task<MaterialGroupResponse> CreateMaterialGroupAsync (CreateMaterialGroupRequest createMaterialGroupRequest = default(CreateMaterialGroupRequest))
        {
             SimScale.Sdk.Client.ApiResponse<MaterialGroupResponse> localVarResponse = await CreateMaterialGroupAsyncWithHttpInfo(createMaterialGroupRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create new material group 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMaterialGroupRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (MaterialGroupResponse)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<MaterialGroupResponse>> CreateMaterialGroupAsyncWithHttpInfo (CreateMaterialGroupRequest createMaterialGroupRequest = default(CreateMaterialGroupRequest))
        {

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = createMaterialGroupRequest;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<MaterialGroupResponse>("/materialgroups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMaterialGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a child material group for the specified parent group 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="createNestedMaterialGroupRequest"> (optional)</param>
        /// <returns>MaterialGroupResponse</returns>
        public MaterialGroupResponse CreateNestedMaterialGroup (string materialGroupId = default(string), CreateNestedMaterialGroupRequest createNestedMaterialGroupRequest = default(CreateNestedMaterialGroupRequest))
        {
             SimScale.Sdk.Client.ApiResponse<MaterialGroupResponse> localVarResponse = CreateNestedMaterialGroupWithHttpInfo(materialGroupId, createNestedMaterialGroupRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a child material group for the specified parent group 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="createNestedMaterialGroupRequest"> (optional)</param>
        /// <returns>ApiResponse of MaterialGroupResponse</returns>
        public SimScale.Sdk.Client.ApiResponse< MaterialGroupResponse > CreateNestedMaterialGroupWithHttpInfo (string materialGroupId = default(string), CreateNestedMaterialGroupRequest createNestedMaterialGroupRequest = default(CreateNestedMaterialGroupRequest))
        {
            // verify the required parameter 'materialGroupId' is set
            if (materialGroupId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'materialGroupId' when calling MaterialsApi->CreateNestedMaterialGroup");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("materialGroupId", SimScale.Sdk.Client.ClientUtils.ParameterToString(materialGroupId)); // path parameter
            localVarRequestOptions.Data = createNestedMaterialGroupRequest;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< MaterialGroupResponse >("/materialgroups/{materialGroupId}/materialgroups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNestedMaterialGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a child material group for the specified parent group 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="createNestedMaterialGroupRequest"> (optional)</param>
        /// <returns>Task of MaterialGroupResponse</returns>
        public async System.Threading.Tasks.Task<MaterialGroupResponse> CreateNestedMaterialGroupAsync (string materialGroupId = default(string), CreateNestedMaterialGroupRequest createNestedMaterialGroupRequest = default(CreateNestedMaterialGroupRequest))
        {
             SimScale.Sdk.Client.ApiResponse<MaterialGroupResponse> localVarResponse = await CreateNestedMaterialGroupAsyncWithHttpInfo(materialGroupId, createNestedMaterialGroupRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a child material group for the specified parent group 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="createNestedMaterialGroupRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (MaterialGroupResponse)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<MaterialGroupResponse>> CreateNestedMaterialGroupAsyncWithHttpInfo (string materialGroupId = default(string), CreateNestedMaterialGroupRequest createNestedMaterialGroupRequest = default(CreateNestedMaterialGroupRequest))
        {
            // verify the required parameter 'materialGroupId' is set
            if (materialGroupId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'materialGroupId' when calling MaterialsApi->CreateNestedMaterialGroup");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("materialGroupId", SimScale.Sdk.Client.ClientUtils.ParameterToString(materialGroupId)); // path parameter
            localVarRequestOptions.Data = createNestedMaterialGroupRequest;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<MaterialGroupResponse>("/materialgroups/{materialGroupId}/materialgroups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNestedMaterialGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove an existing material 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="materialId">ID of a material</param>
        /// <returns></returns>
        public void DeleteMaterialData (string materialGroupId = default(string), string materialId = default(string))
        {
             DeleteMaterialDataWithHttpInfo(materialGroupId, materialId);
        }

        /// <summary>
        /// Remove an existing material 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="materialId">ID of a material</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public SimScale.Sdk.Client.ApiResponse<Object> DeleteMaterialDataWithHttpInfo (string materialGroupId = default(string), string materialId = default(string))
        {
            // verify the required parameter 'materialGroupId' is set
            if (materialGroupId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'materialGroupId' when calling MaterialsApi->DeleteMaterialData");

            // verify the required parameter 'materialId' is set
            if (materialId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'materialId' when calling MaterialsApi->DeleteMaterialData");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("materialGroupId", SimScale.Sdk.Client.ClientUtils.ParameterToString(materialGroupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("materialId", SimScale.Sdk.Client.ClientUtils.ParameterToString(materialId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/materialgroups/{materialGroupId}/materials/{materialId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMaterialData", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove an existing material 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="materialId">ID of a material</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteMaterialDataAsync (string materialGroupId = default(string), string materialId = default(string))
        {
             await DeleteMaterialDataAsyncWithHttpInfo(materialGroupId, materialId);

        }

        /// <summary>
        /// Remove an existing material 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="materialId">ID of a material</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<Object>> DeleteMaterialDataAsyncWithHttpInfo (string materialGroupId = default(string), string materialId = default(string))
        {
            // verify the required parameter 'materialGroupId' is set
            if (materialGroupId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'materialGroupId' when calling MaterialsApi->DeleteMaterialData");

            // verify the required parameter 'materialId' is set
            if (materialId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'materialId' when calling MaterialsApi->DeleteMaterialData");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("materialGroupId", SimScale.Sdk.Client.ClientUtils.ParameterToString(materialGroupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("materialId", SimScale.Sdk.Client.ClientUtils.ParameterToString(materialId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/materialgroups/{materialGroupId}/materials/{materialId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMaterialData", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete material group, sub-groups associated to it, and materials associated to the group and all sub-groups 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <returns></returns>
        public void DeleteMaterialGroup (string materialGroupId = default(string))
        {
             DeleteMaterialGroupWithHttpInfo(materialGroupId);
        }

        /// <summary>
        /// Delete material group, sub-groups associated to it, and materials associated to the group and all sub-groups 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public SimScale.Sdk.Client.ApiResponse<Object> DeleteMaterialGroupWithHttpInfo (string materialGroupId = default(string))
        {
            // verify the required parameter 'materialGroupId' is set
            if (materialGroupId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'materialGroupId' when calling MaterialsApi->DeleteMaterialGroup");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("materialGroupId", SimScale.Sdk.Client.ClientUtils.ParameterToString(materialGroupId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/materialgroups/{materialGroupId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMaterialGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete material group, sub-groups associated to it, and materials associated to the group and all sub-groups 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteMaterialGroupAsync (string materialGroupId = default(string))
        {
             await DeleteMaterialGroupAsyncWithHttpInfo(materialGroupId);

        }

        /// <summary>
        /// Delete material group, sub-groups associated to it, and materials associated to the group and all sub-groups 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<Object>> DeleteMaterialGroupAsyncWithHttpInfo (string materialGroupId = default(string))
        {
            // verify the required parameter 'materialGroupId' is set
            if (materialGroupId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'materialGroupId' when calling MaterialsApi->DeleteMaterialGroup");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("materialGroupId", SimScale.Sdk.Client.ClientUtils.ParameterToString(materialGroupId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/materialgroups/{materialGroupId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMaterialGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get information about an existing material 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="materialId">ID of a material</param>
        /// <returns>MaterialResponse</returns>
        public MaterialResponse GetMaterialData (string materialGroupId = default(string), string materialId = default(string))
        {
             SimScale.Sdk.Client.ApiResponse<MaterialResponse> localVarResponse = GetMaterialDataWithHttpInfo(materialGroupId, materialId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get information about an existing material 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="materialId">ID of a material</param>
        /// <returns>ApiResponse of MaterialResponse</returns>
        public SimScale.Sdk.Client.ApiResponse< MaterialResponse > GetMaterialDataWithHttpInfo (string materialGroupId = default(string), string materialId = default(string))
        {
            // verify the required parameter 'materialGroupId' is set
            if (materialGroupId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'materialGroupId' when calling MaterialsApi->GetMaterialData");

            // verify the required parameter 'materialId' is set
            if (materialId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'materialId' when calling MaterialsApi->GetMaterialData");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("materialGroupId", SimScale.Sdk.Client.ClientUtils.ParameterToString(materialGroupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("materialId", SimScale.Sdk.Client.ClientUtils.ParameterToString(materialId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< MaterialResponse >("/materialgroups/{materialGroupId}/materials/{materialId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMaterialData", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get information about an existing material 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="materialId">ID of a material</param>
        /// <returns>Task of MaterialResponse</returns>
        public async System.Threading.Tasks.Task<MaterialResponse> GetMaterialDataAsync (string materialGroupId = default(string), string materialId = default(string))
        {
             SimScale.Sdk.Client.ApiResponse<MaterialResponse> localVarResponse = await GetMaterialDataAsyncWithHttpInfo(materialGroupId, materialId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get information about an existing material 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="materialId">ID of a material</param>
        /// <returns>Task of ApiResponse (MaterialResponse)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<MaterialResponse>> GetMaterialDataAsyncWithHttpInfo (string materialGroupId = default(string), string materialId = default(string))
        {
            // verify the required parameter 'materialGroupId' is set
            if (materialGroupId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'materialGroupId' when calling MaterialsApi->GetMaterialData");

            // verify the required parameter 'materialId' is set
            if (materialId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'materialId' when calling MaterialsApi->GetMaterialData");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("materialGroupId", SimScale.Sdk.Client.ClientUtils.ParameterToString(materialGroupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("materialId", SimScale.Sdk.Client.ClientUtils.ParameterToString(materialId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MaterialResponse>("/materialgroups/{materialGroupId}/materials/{materialId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMaterialData", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch material group information 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <returns>MaterialGroupResponse</returns>
        public MaterialGroupResponse GetMaterialGroupMetadata (string materialGroupId = default(string))
        {
             SimScale.Sdk.Client.ApiResponse<MaterialGroupResponse> localVarResponse = GetMaterialGroupMetadataWithHttpInfo(materialGroupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch material group information 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <returns>ApiResponse of MaterialGroupResponse</returns>
        public SimScale.Sdk.Client.ApiResponse< MaterialGroupResponse > GetMaterialGroupMetadataWithHttpInfo (string materialGroupId = default(string))
        {
            // verify the required parameter 'materialGroupId' is set
            if (materialGroupId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'materialGroupId' when calling MaterialsApi->GetMaterialGroupMetadata");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("materialGroupId", SimScale.Sdk.Client.ClientUtils.ParameterToString(materialGroupId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< MaterialGroupResponse >("/materialgroups/{materialGroupId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMaterialGroupMetadata", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch material group information 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <returns>Task of MaterialGroupResponse</returns>
        public async System.Threading.Tasks.Task<MaterialGroupResponse> GetMaterialGroupMetadataAsync (string materialGroupId = default(string))
        {
             SimScale.Sdk.Client.ApiResponse<MaterialGroupResponse> localVarResponse = await GetMaterialGroupMetadataAsyncWithHttpInfo(materialGroupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch material group information 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <returns>Task of ApiResponse (MaterialGroupResponse)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<MaterialGroupResponse>> GetMaterialGroupMetadataAsyncWithHttpInfo (string materialGroupId = default(string))
        {
            // verify the required parameter 'materialGroupId' is set
            if (materialGroupId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'materialGroupId' when calling MaterialsApi->GetMaterialGroupMetadata");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("materialGroupId", SimScale.Sdk.Client.ClientUtils.ParameterToString(materialGroupId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MaterialGroupResponse>("/materialgroups/{materialGroupId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMaterialGroupMetadata", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all the material groups the user has access to 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>MaterialGroupListResponse</returns>
        public MaterialGroupListResponse GetMaterialGroups (int? limit = 100, int? page = 1)
        {
             SimScale.Sdk.Client.ApiResponse<MaterialGroupListResponse> localVarResponse = GetMaterialGroupsWithHttpInfo(limit, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all the material groups the user has access to 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>ApiResponse of MaterialGroupListResponse</returns>
        public SimScale.Sdk.Client.ApiResponse< MaterialGroupListResponse > GetMaterialGroupsWithHttpInfo (int? limit = 100, int? page = 1)
        {
            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< MaterialGroupListResponse >("/materialgroups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMaterialGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all the material groups the user has access to 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>Task of MaterialGroupListResponse</returns>
        public async System.Threading.Tasks.Task<MaterialGroupListResponse> GetMaterialGroupsAsync (int? limit = 100, int? page = 1)
        {
             SimScale.Sdk.Client.ApiResponse<MaterialGroupListResponse> localVarResponse = await GetMaterialGroupsAsyncWithHttpInfo(limit, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all the material groups the user has access to 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (MaterialGroupListResponse)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<MaterialGroupListResponse>> GetMaterialGroupsAsyncWithHttpInfo (int? limit = 100, int? page = 1)
        {

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MaterialGroupListResponse>("/materialgroups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMaterialGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List materials within the material group 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>MaterialListResponse</returns>
        public MaterialListResponse GetMaterials (string materialGroupId = default(string), int? limit = 100, int? page = 1)
        {
             SimScale.Sdk.Client.ApiResponse<MaterialListResponse> localVarResponse = GetMaterialsWithHttpInfo(materialGroupId, limit, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List materials within the material group 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>ApiResponse of MaterialListResponse</returns>
        public SimScale.Sdk.Client.ApiResponse< MaterialListResponse > GetMaterialsWithHttpInfo (string materialGroupId = default(string), int? limit = 100, int? page = 1)
        {
            // verify the required parameter 'materialGroupId' is set
            if (materialGroupId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'materialGroupId' when calling MaterialsApi->GetMaterials");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("materialGroupId", SimScale.Sdk.Client.ClientUtils.ParameterToString(materialGroupId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< MaterialListResponse >("/materialgroups/{materialGroupId}/materials", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMaterials", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List materials within the material group 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>Task of MaterialListResponse</returns>
        public async System.Threading.Tasks.Task<MaterialListResponse> GetMaterialsAsync (string materialGroupId = default(string), int? limit = 100, int? page = 1)
        {
             SimScale.Sdk.Client.ApiResponse<MaterialListResponse> localVarResponse = await GetMaterialsAsyncWithHttpInfo(materialGroupId, limit, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List materials within the material group 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (MaterialListResponse)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<MaterialListResponse>> GetMaterialsAsyncWithHttpInfo (string materialGroupId = default(string), int? limit = 100, int? page = 1)
        {
            // verify the required parameter 'materialGroupId' is set
            if (materialGroupId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'materialGroupId' when calling MaterialsApi->GetMaterials");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("materialGroupId", SimScale.Sdk.Client.ClientUtils.ParameterToString(materialGroupId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MaterialListResponse>("/materialgroups/{materialGroupId}/materials", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMaterials", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all sub-groups of the specified material group 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>MaterialGroupListResponse</returns>
        public MaterialGroupListResponse GetNestedMaterialGroups (string materialGroupId = default(string), int? limit = 100, int? page = 1)
        {
             SimScale.Sdk.Client.ApiResponse<MaterialGroupListResponse> localVarResponse = GetNestedMaterialGroupsWithHttpInfo(materialGroupId, limit, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all sub-groups of the specified material group 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>ApiResponse of MaterialGroupListResponse</returns>
        public SimScale.Sdk.Client.ApiResponse< MaterialGroupListResponse > GetNestedMaterialGroupsWithHttpInfo (string materialGroupId = default(string), int? limit = 100, int? page = 1)
        {
            // verify the required parameter 'materialGroupId' is set
            if (materialGroupId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'materialGroupId' when calling MaterialsApi->GetNestedMaterialGroups");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("materialGroupId", SimScale.Sdk.Client.ClientUtils.ParameterToString(materialGroupId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< MaterialGroupListResponse >("/materialgroups/{materialGroupId}/materialgroups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNestedMaterialGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all sub-groups of the specified material group 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>Task of MaterialGroupListResponse</returns>
        public async System.Threading.Tasks.Task<MaterialGroupListResponse> GetNestedMaterialGroupsAsync (string materialGroupId = default(string), int? limit = 100, int? page = 1)
        {
             SimScale.Sdk.Client.ApiResponse<MaterialGroupListResponse> localVarResponse = await GetNestedMaterialGroupsAsyncWithHttpInfo(materialGroupId, limit, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all sub-groups of the specified material group 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (MaterialGroupListResponse)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<MaterialGroupListResponse>> GetNestedMaterialGroupsAsyncWithHttpInfo (string materialGroupId = default(string), int? limit = 100, int? page = 1)
        {
            // verify the required parameter 'materialGroupId' is set
            if (materialGroupId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'materialGroupId' when calling MaterialsApi->GetNestedMaterialGroups");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("materialGroupId", SimScale.Sdk.Client.ClientUtils.ParameterToString(materialGroupId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MaterialGroupListResponse>("/materialgroups/{materialGroupId}/materialgroups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNestedMaterialGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing material 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="materialId">ID of a material</param>
        /// <param name="createMaterialRequest"> (optional)</param>
        /// <returns>MaterialResponse</returns>
        public MaterialResponse UpdateMaterialData (string materialGroupId = default(string), string materialId = default(string), CreateMaterialRequest createMaterialRequest = default(CreateMaterialRequest))
        {
             SimScale.Sdk.Client.ApiResponse<MaterialResponse> localVarResponse = UpdateMaterialDataWithHttpInfo(materialGroupId, materialId, createMaterialRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing material 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="materialId">ID of a material</param>
        /// <param name="createMaterialRequest"> (optional)</param>
        /// <returns>ApiResponse of MaterialResponse</returns>
        public SimScale.Sdk.Client.ApiResponse< MaterialResponse > UpdateMaterialDataWithHttpInfo (string materialGroupId = default(string), string materialId = default(string), CreateMaterialRequest createMaterialRequest = default(CreateMaterialRequest))
        {
            // verify the required parameter 'materialGroupId' is set
            if (materialGroupId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'materialGroupId' when calling MaterialsApi->UpdateMaterialData");

            // verify the required parameter 'materialId' is set
            if (materialId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'materialId' when calling MaterialsApi->UpdateMaterialData");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("materialGroupId", SimScale.Sdk.Client.ClientUtils.ParameterToString(materialGroupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("materialId", SimScale.Sdk.Client.ClientUtils.ParameterToString(materialId)); // path parameter
            localVarRequestOptions.Data = createMaterialRequest;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< MaterialResponse >("/materialgroups/{materialGroupId}/materials/{materialId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMaterialData", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing material 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="materialId">ID of a material</param>
        /// <param name="createMaterialRequest"> (optional)</param>
        /// <returns>Task of MaterialResponse</returns>
        public async System.Threading.Tasks.Task<MaterialResponse> UpdateMaterialDataAsync (string materialGroupId = default(string), string materialId = default(string), CreateMaterialRequest createMaterialRequest = default(CreateMaterialRequest))
        {
             SimScale.Sdk.Client.ApiResponse<MaterialResponse> localVarResponse = await UpdateMaterialDataAsyncWithHttpInfo(materialGroupId, materialId, createMaterialRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an existing material 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="materialId">ID of a material</param>
        /// <param name="createMaterialRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (MaterialResponse)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<MaterialResponse>> UpdateMaterialDataAsyncWithHttpInfo (string materialGroupId = default(string), string materialId = default(string), CreateMaterialRequest createMaterialRequest = default(CreateMaterialRequest))
        {
            // verify the required parameter 'materialGroupId' is set
            if (materialGroupId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'materialGroupId' when calling MaterialsApi->UpdateMaterialData");

            // verify the required parameter 'materialId' is set
            if (materialId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'materialId' when calling MaterialsApi->UpdateMaterialData");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("materialGroupId", SimScale.Sdk.Client.ClientUtils.ParameterToString(materialGroupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("materialId", SimScale.Sdk.Client.ClientUtils.ParameterToString(materialId)); // path parameter
            localVarRequestOptions.Data = createMaterialRequest;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<MaterialResponse>("/materialgroups/{materialGroupId}/materials/{materialId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMaterialData", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update material group information 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="updateMaterialGroupRequest"> (optional)</param>
        /// <returns>MaterialGroupResponse</returns>
        public MaterialGroupResponse UpdateMaterialGroupMetadata (string materialGroupId = default(string), UpdateMaterialGroupRequest updateMaterialGroupRequest = default(UpdateMaterialGroupRequest))
        {
             SimScale.Sdk.Client.ApiResponse<MaterialGroupResponse> localVarResponse = UpdateMaterialGroupMetadataWithHttpInfo(materialGroupId, updateMaterialGroupRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update material group information 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="updateMaterialGroupRequest"> (optional)</param>
        /// <returns>ApiResponse of MaterialGroupResponse</returns>
        public SimScale.Sdk.Client.ApiResponse< MaterialGroupResponse > UpdateMaterialGroupMetadataWithHttpInfo (string materialGroupId = default(string), UpdateMaterialGroupRequest updateMaterialGroupRequest = default(UpdateMaterialGroupRequest))
        {
            // verify the required parameter 'materialGroupId' is set
            if (materialGroupId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'materialGroupId' when calling MaterialsApi->UpdateMaterialGroupMetadata");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("materialGroupId", SimScale.Sdk.Client.ClientUtils.ParameterToString(materialGroupId)); // path parameter
            localVarRequestOptions.Data = updateMaterialGroupRequest;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< MaterialGroupResponse >("/materialgroups/{materialGroupId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMaterialGroupMetadata", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update material group information 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="updateMaterialGroupRequest"> (optional)</param>
        /// <returns>Task of MaterialGroupResponse</returns>
        public async System.Threading.Tasks.Task<MaterialGroupResponse> UpdateMaterialGroupMetadataAsync (string materialGroupId = default(string), UpdateMaterialGroupRequest updateMaterialGroupRequest = default(UpdateMaterialGroupRequest))
        {
             SimScale.Sdk.Client.ApiResponse<MaterialGroupResponse> localVarResponse = await UpdateMaterialGroupMetadataAsyncWithHttpInfo(materialGroupId, updateMaterialGroupRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update material group information 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialGroupId">ID of a material group</param>
        /// <param name="updateMaterialGroupRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (MaterialGroupResponse)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<MaterialGroupResponse>> UpdateMaterialGroupMetadataAsyncWithHttpInfo (string materialGroupId = default(string), UpdateMaterialGroupRequest updateMaterialGroupRequest = default(UpdateMaterialGroupRequest))
        {
            // verify the required parameter 'materialGroupId' is set
            if (materialGroupId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'materialGroupId' when calling MaterialsApi->UpdateMaterialGroupMetadata");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("materialGroupId", SimScale.Sdk.Client.ClientUtils.ParameterToString(materialGroupId)); // path parameter
            localVarRequestOptions.Data = updateMaterialGroupRequest;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<MaterialGroupResponse>("/materialgroups/{materialGroupId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMaterialGroupMetadata", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
