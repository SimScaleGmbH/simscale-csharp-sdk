/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using SimScale.Sdk.Client;
using SimScale.Sdk.Model;

namespace SimScale.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGeometriesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List geometries within a project
        /// </summary>
        /// <remarks>
        /// Only valid geometries that can be used for a simulation setup are included.
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>Geometries</returns>
        Geometries GetGeometries (string projectId = default(string), int? limit = 100, int? page = 1);

        /// <summary>
        /// List geometries within a project
        /// </summary>
        /// <remarks>
        /// Only valid geometries that can be used for a simulation setup are included.
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>ApiResponse of Geometries</returns>
        ApiResponse<Geometries> GetGeometriesWithHttpInfo (string projectId = default(string), int? limit = 100, int? page = 1);
        /// <summary>
        /// Get information about the geometry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="geometryId">The geometry ID</param>
        /// <returns>Geometry</returns>
        Geometry GetGeometry (string projectId = default(string), Guid? geometryId = default(Guid?));

        /// <summary>
        /// Get information about the geometry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="geometryId">The geometry ID</param>
        /// <returns>ApiResponse of Geometry</returns>
        ApiResponse<Geometry> GetGeometryWithHttpInfo (string projectId = default(string), Guid? geometryId = default(Guid?));
        /// <summary>
        /// Describe id mapping of the geometry
        /// </summary>
        /// <remarks>
        /// Assignment of topological entities (faces, bodies) in the simulation setup is a non-trivial task. Complex models can consist of several assemblies which may contain multiple occurrences of bodies and their entities. In order to describe an assignment unambiguously the full path from the root part of the model to the actual topological entity is required.  SimScale generates unique internal names for all topological entities of a model during the geometry import which are used for assignments within the simulation spec. Examples of internal names are &#x60;B1_TE5&#x60; or &#x60;A1_I26_A5_I27_B102_TE196&#x60;.  This API endpoint allows to retrieve a mapping between the internal names and a detailed description of the entities which includes: * The topological entity class (body or face) * The original body and entity names * Entity attributes like &#x60;SDL/TYSA_NAME&#x60; or &#x60;SDL/TYSA_COLOUR&#x60; * The path from the root of the model  Please note that during geometry import the model&#39;s topology can be modified (e.g. facet split and other import options) which means that there is no 1:1 mapping between the internal and original names. 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="geometryId">The geometry ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <param name="_class">The entity class to filter. (optional)</param>
        /// <param name="bodies">The body names to filter. If multiple body names are provided any match. (optional)</param>
        /// <param name="entities">The entity names to filter. If multiple entity names are provided any match. (optional)</param>
        /// <param name="attributes">The attribute names to filter. If multiple attribute names are provided any match. (optional)</param>
        /// <param name="values">The attribute values to filter. If multiple attribute values are provided any match. (optional)</param>
        /// <returns>GeometryMappings</returns>
        GeometryMappings GetGeometryMappings (string projectId = default(string), Guid? geometryId = default(Guid?), int? limit = 100, int? page = 1, string _class = default(string), List<string> bodies = default(List<string>), List<string> entities = default(List<string>), List<string> attributes = default(List<string>), List<string> values = default(List<string>));

        /// <summary>
        /// Describe id mapping of the geometry
        /// </summary>
        /// <remarks>
        /// Assignment of topological entities (faces, bodies) in the simulation setup is a non-trivial task. Complex models can consist of several assemblies which may contain multiple occurrences of bodies and their entities. In order to describe an assignment unambiguously the full path from the root part of the model to the actual topological entity is required.  SimScale generates unique internal names for all topological entities of a model during the geometry import which are used for assignments within the simulation spec. Examples of internal names are &#x60;B1_TE5&#x60; or &#x60;A1_I26_A5_I27_B102_TE196&#x60;.  This API endpoint allows to retrieve a mapping between the internal names and a detailed description of the entities which includes: * The topological entity class (body or face) * The original body and entity names * Entity attributes like &#x60;SDL/TYSA_NAME&#x60; or &#x60;SDL/TYSA_COLOUR&#x60; * The path from the root of the model  Please note that during geometry import the model&#39;s topology can be modified (e.g. facet split and other import options) which means that there is no 1:1 mapping between the internal and original names. 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="geometryId">The geometry ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <param name="_class">The entity class to filter. (optional)</param>
        /// <param name="bodies">The body names to filter. If multiple body names are provided any match. (optional)</param>
        /// <param name="entities">The entity names to filter. If multiple entity names are provided any match. (optional)</param>
        /// <param name="attributes">The attribute names to filter. If multiple attribute names are provided any match. (optional)</param>
        /// <param name="values">The attribute values to filter. If multiple attribute values are provided any match. (optional)</param>
        /// <returns>ApiResponse of GeometryMappings</returns>
        ApiResponse<GeometryMappings> GetGeometryMappingsWithHttpInfo (string projectId = default(string), Guid? geometryId = default(Guid?), int? limit = 100, int? page = 1, string _class = default(string), List<string> bodies = default(List<string>), List<string> entities = default(List<string>), List<string> attributes = default(List<string>), List<string> values = default(List<string>));
        /// <summary>
        /// Update geometry information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="geometryId">The geometry ID</param>
        /// <param name="geometry">Geometry information to be updated</param>
        /// <returns></returns>
        void UpdateGeometry (string projectId = default(string), Guid? geometryId = default(Guid?), Geometry geometry = default(Geometry));

        /// <summary>
        /// Update geometry information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="geometryId">The geometry ID</param>
        /// <param name="geometry">Geometry information to be updated</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateGeometryWithHttpInfo (string projectId = default(string), Guid? geometryId = default(Guid?), Geometry geometry = default(Geometry));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGeometriesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List geometries within a project
        /// </summary>
        /// <remarks>
        /// Only valid geometries that can be used for a simulation setup are included.
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>Task of Geometries</returns>
        System.Threading.Tasks.Task<Geometries> GetGeometriesAsync (string projectId = default(string), int? limit = 100, int? page = 1);

        /// <summary>
        /// List geometries within a project
        /// </summary>
        /// <remarks>
        /// Only valid geometries that can be used for a simulation setup are included.
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (Geometries)</returns>
        System.Threading.Tasks.Task<ApiResponse<Geometries>> GetGeometriesAsyncWithHttpInfo (string projectId = default(string), int? limit = 100, int? page = 1);
        /// <summary>
        /// Get information about the geometry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="geometryId">The geometry ID</param>
        /// <returns>Task of Geometry</returns>
        System.Threading.Tasks.Task<Geometry> GetGeometryAsync (string projectId = default(string), Guid? geometryId = default(Guid?));

        /// <summary>
        /// Get information about the geometry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="geometryId">The geometry ID</param>
        /// <returns>Task of ApiResponse (Geometry)</returns>
        System.Threading.Tasks.Task<ApiResponse<Geometry>> GetGeometryAsyncWithHttpInfo (string projectId = default(string), Guid? geometryId = default(Guid?));
        /// <summary>
        /// Describe id mapping of the geometry
        /// </summary>
        /// <remarks>
        /// Assignment of topological entities (faces, bodies) in the simulation setup is a non-trivial task. Complex models can consist of several assemblies which may contain multiple occurrences of bodies and their entities. In order to describe an assignment unambiguously the full path from the root part of the model to the actual topological entity is required.  SimScale generates unique internal names for all topological entities of a model during the geometry import which are used for assignments within the simulation spec. Examples of internal names are &#x60;B1_TE5&#x60; or &#x60;A1_I26_A5_I27_B102_TE196&#x60;.  This API endpoint allows to retrieve a mapping between the internal names and a detailed description of the entities which includes: * The topological entity class (body or face) * The original body and entity names * Entity attributes like &#x60;SDL/TYSA_NAME&#x60; or &#x60;SDL/TYSA_COLOUR&#x60; * The path from the root of the model  Please note that during geometry import the model&#39;s topology can be modified (e.g. facet split and other import options) which means that there is no 1:1 mapping between the internal and original names. 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="geometryId">The geometry ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <param name="_class">The entity class to filter. (optional)</param>
        /// <param name="bodies">The body names to filter. If multiple body names are provided any match. (optional)</param>
        /// <param name="entities">The entity names to filter. If multiple entity names are provided any match. (optional)</param>
        /// <param name="attributes">The attribute names to filter. If multiple attribute names are provided any match. (optional)</param>
        /// <param name="values">The attribute values to filter. If multiple attribute values are provided any match. (optional)</param>
        /// <returns>Task of GeometryMappings</returns>
        System.Threading.Tasks.Task<GeometryMappings> GetGeometryMappingsAsync (string projectId = default(string), Guid? geometryId = default(Guid?), int? limit = 100, int? page = 1, string _class = default(string), List<string> bodies = default(List<string>), List<string> entities = default(List<string>), List<string> attributes = default(List<string>), List<string> values = default(List<string>));

        /// <summary>
        /// Describe id mapping of the geometry
        /// </summary>
        /// <remarks>
        /// Assignment of topological entities (faces, bodies) in the simulation setup is a non-trivial task. Complex models can consist of several assemblies which may contain multiple occurrences of bodies and their entities. In order to describe an assignment unambiguously the full path from the root part of the model to the actual topological entity is required.  SimScale generates unique internal names for all topological entities of a model during the geometry import which are used for assignments within the simulation spec. Examples of internal names are &#x60;B1_TE5&#x60; or &#x60;A1_I26_A5_I27_B102_TE196&#x60;.  This API endpoint allows to retrieve a mapping between the internal names and a detailed description of the entities which includes: * The topological entity class (body or face) * The original body and entity names * Entity attributes like &#x60;SDL/TYSA_NAME&#x60; or &#x60;SDL/TYSA_COLOUR&#x60; * The path from the root of the model  Please note that during geometry import the model&#39;s topology can be modified (e.g. facet split and other import options) which means that there is no 1:1 mapping between the internal and original names. 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="geometryId">The geometry ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <param name="_class">The entity class to filter. (optional)</param>
        /// <param name="bodies">The body names to filter. If multiple body names are provided any match. (optional)</param>
        /// <param name="entities">The entity names to filter. If multiple entity names are provided any match. (optional)</param>
        /// <param name="attributes">The attribute names to filter. If multiple attribute names are provided any match. (optional)</param>
        /// <param name="values">The attribute values to filter. If multiple attribute values are provided any match. (optional)</param>
        /// <returns>Task of ApiResponse (GeometryMappings)</returns>
        System.Threading.Tasks.Task<ApiResponse<GeometryMappings>> GetGeometryMappingsAsyncWithHttpInfo (string projectId = default(string), Guid? geometryId = default(Guid?), int? limit = 100, int? page = 1, string _class = default(string), List<string> bodies = default(List<string>), List<string> entities = default(List<string>), List<string> attributes = default(List<string>), List<string> values = default(List<string>));
        /// <summary>
        /// Update geometry information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="geometryId">The geometry ID</param>
        /// <param name="geometry">Geometry information to be updated</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateGeometryAsync (string projectId = default(string), Guid? geometryId = default(Guid?), Geometry geometry = default(Geometry));

        /// <summary>
        /// Update geometry information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="geometryId">The geometry ID</param>
        /// <param name="geometry">Geometry information to be updated</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateGeometryAsyncWithHttpInfo (string projectId = default(string), Guid? geometryId = default(Guid?), Geometry geometry = default(Geometry));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGeometriesApi : IGeometriesApiSync, IGeometriesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GeometriesApi : IGeometriesApi
    {
        private SimScale.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GeometriesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GeometriesApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GeometriesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GeometriesApi(String basePath)
        {
            this.Configuration = SimScale.Sdk.Client.Configuration.MergeConfigurations(
                SimScale.Sdk.Client.GlobalConfiguration.Instance,
                new SimScale.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new SimScale.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SimScale.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = SimScale.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GeometriesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GeometriesApi(SimScale.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = SimScale.Sdk.Client.Configuration.MergeConfigurations(
                SimScale.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new SimScale.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SimScale.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = SimScale.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GeometriesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public GeometriesApi(SimScale.Sdk.Client.ISynchronousClient client,SimScale.Sdk.Client.IAsynchronousClient asyncClient, SimScale.Sdk.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = SimScale.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public SimScale.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public SimScale.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SimScale.Sdk.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SimScale.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List geometries within a project Only valid geometries that can be used for a simulation setup are included.
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>Geometries</returns>
        public Geometries GetGeometries (string projectId = default(string), int? limit = 100, int? page = 1)
        {
             SimScale.Sdk.Client.ApiResponse<Geometries> localVarResponse = GetGeometriesWithHttpInfo(projectId, limit, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List geometries within a project Only valid geometries that can be used for a simulation setup are included.
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>ApiResponse of Geometries</returns>
        public SimScale.Sdk.Client.ApiResponse< Geometries > GetGeometriesWithHttpInfo (string projectId = default(string), int? limit = 100, int? page = 1)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling GeometriesApi->GetGeometries");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Geometries >("/projects/{projectId}/geometries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGeometries", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List geometries within a project Only valid geometries that can be used for a simulation setup are included.
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>Task of Geometries</returns>
        public async System.Threading.Tasks.Task<Geometries> GetGeometriesAsync (string projectId = default(string), int? limit = 100, int? page = 1)
        {
             SimScale.Sdk.Client.ApiResponse<Geometries> localVarResponse = await GetGeometriesAsyncWithHttpInfo(projectId, limit, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List geometries within a project Only valid geometries that can be used for a simulation setup are included.
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (Geometries)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<Geometries>> GetGeometriesAsyncWithHttpInfo (string projectId = default(string), int? limit = 100, int? page = 1)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling GeometriesApi->GetGeometries");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Geometries>("/projects/{projectId}/geometries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGeometries", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get information about the geometry 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="geometryId">The geometry ID</param>
        /// <returns>Geometry</returns>
        public Geometry GetGeometry (string projectId = default(string), Guid? geometryId = default(Guid?))
        {
             SimScale.Sdk.Client.ApiResponse<Geometry> localVarResponse = GetGeometryWithHttpInfo(projectId, geometryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get information about the geometry 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="geometryId">The geometry ID</param>
        /// <returns>ApiResponse of Geometry</returns>
        public SimScale.Sdk.Client.ApiResponse< Geometry > GetGeometryWithHttpInfo (string projectId = default(string), Guid? geometryId = default(Guid?))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling GeometriesApi->GetGeometry");

            // verify the required parameter 'geometryId' is set
            if (geometryId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'geometryId' when calling GeometriesApi->GetGeometry");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("geometryId", SimScale.Sdk.Client.ClientUtils.ParameterToString(geometryId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Geometry >("/projects/{projectId}/geometries/{geometryId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGeometry", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get information about the geometry 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="geometryId">The geometry ID</param>
        /// <returns>Task of Geometry</returns>
        public async System.Threading.Tasks.Task<Geometry> GetGeometryAsync (string projectId = default(string), Guid? geometryId = default(Guid?))
        {
             SimScale.Sdk.Client.ApiResponse<Geometry> localVarResponse = await GetGeometryAsyncWithHttpInfo(projectId, geometryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get information about the geometry 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="geometryId">The geometry ID</param>
        /// <returns>Task of ApiResponse (Geometry)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<Geometry>> GetGeometryAsyncWithHttpInfo (string projectId = default(string), Guid? geometryId = default(Guid?))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling GeometriesApi->GetGeometry");

            // verify the required parameter 'geometryId' is set
            if (geometryId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'geometryId' when calling GeometriesApi->GetGeometry");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("geometryId", SimScale.Sdk.Client.ClientUtils.ParameterToString(geometryId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Geometry>("/projects/{projectId}/geometries/{geometryId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGeometry", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Describe id mapping of the geometry Assignment of topological entities (faces, bodies) in the simulation setup is a non-trivial task. Complex models can consist of several assemblies which may contain multiple occurrences of bodies and their entities. In order to describe an assignment unambiguously the full path from the root part of the model to the actual topological entity is required.  SimScale generates unique internal names for all topological entities of a model during the geometry import which are used for assignments within the simulation spec. Examples of internal names are &#x60;B1_TE5&#x60; or &#x60;A1_I26_A5_I27_B102_TE196&#x60;.  This API endpoint allows to retrieve a mapping between the internal names and a detailed description of the entities which includes: * The topological entity class (body or face) * The original body and entity names * Entity attributes like &#x60;SDL/TYSA_NAME&#x60; or &#x60;SDL/TYSA_COLOUR&#x60; * The path from the root of the model  Please note that during geometry import the model&#39;s topology can be modified (e.g. facet split and other import options) which means that there is no 1:1 mapping between the internal and original names. 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="geometryId">The geometry ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <param name="_class">The entity class to filter. (optional)</param>
        /// <param name="bodies">The body names to filter. If multiple body names are provided any match. (optional)</param>
        /// <param name="entities">The entity names to filter. If multiple entity names are provided any match. (optional)</param>
        /// <param name="attributes">The attribute names to filter. If multiple attribute names are provided any match. (optional)</param>
        /// <param name="values">The attribute values to filter. If multiple attribute values are provided any match. (optional)</param>
        /// <returns>GeometryMappings</returns>
        public GeometryMappings GetGeometryMappings (string projectId = default(string), Guid? geometryId = default(Guid?), int? limit = 100, int? page = 1, string _class = default(string), List<string> bodies = default(List<string>), List<string> entities = default(List<string>), List<string> attributes = default(List<string>), List<string> values = default(List<string>))
        {
             SimScale.Sdk.Client.ApiResponse<GeometryMappings> localVarResponse = GetGeometryMappingsWithHttpInfo(projectId, geometryId, limit, page, _class, bodies, entities, attributes, values);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Describe id mapping of the geometry Assignment of topological entities (faces, bodies) in the simulation setup is a non-trivial task. Complex models can consist of several assemblies which may contain multiple occurrences of bodies and their entities. In order to describe an assignment unambiguously the full path from the root part of the model to the actual topological entity is required.  SimScale generates unique internal names for all topological entities of a model during the geometry import which are used for assignments within the simulation spec. Examples of internal names are &#x60;B1_TE5&#x60; or &#x60;A1_I26_A5_I27_B102_TE196&#x60;.  This API endpoint allows to retrieve a mapping between the internal names and a detailed description of the entities which includes: * The topological entity class (body or face) * The original body and entity names * Entity attributes like &#x60;SDL/TYSA_NAME&#x60; or &#x60;SDL/TYSA_COLOUR&#x60; * The path from the root of the model  Please note that during geometry import the model&#39;s topology can be modified (e.g. facet split and other import options) which means that there is no 1:1 mapping between the internal and original names. 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="geometryId">The geometry ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <param name="_class">The entity class to filter. (optional)</param>
        /// <param name="bodies">The body names to filter. If multiple body names are provided any match. (optional)</param>
        /// <param name="entities">The entity names to filter. If multiple entity names are provided any match. (optional)</param>
        /// <param name="attributes">The attribute names to filter. If multiple attribute names are provided any match. (optional)</param>
        /// <param name="values">The attribute values to filter. If multiple attribute values are provided any match. (optional)</param>
        /// <returns>ApiResponse of GeometryMappings</returns>
        public SimScale.Sdk.Client.ApiResponse< GeometryMappings > GetGeometryMappingsWithHttpInfo (string projectId = default(string), Guid? geometryId = default(Guid?), int? limit = 100, int? page = 1, string _class = default(string), List<string> bodies = default(List<string>), List<string> entities = default(List<string>), List<string> attributes = default(List<string>), List<string> values = default(List<string>))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling GeometriesApi->GetGeometryMappings");

            // verify the required parameter 'geometryId' is set
            if (geometryId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'geometryId' when calling GeometriesApi->GetGeometryMappings");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("geometryId", SimScale.Sdk.Client.ClientUtils.ParameterToString(geometryId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (_class != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "class", _class));
            }
            if (bodies != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("multi", "bodies", bodies));
            }
            if (entities != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("multi", "entities", entities));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("multi", "attributes", attributes));
            }
            if (values != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("multi", "values", values));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< GeometryMappings >("/projects/{projectId}/geometries/{geometryId}/mappings", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGeometryMappings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Describe id mapping of the geometry Assignment of topological entities (faces, bodies) in the simulation setup is a non-trivial task. Complex models can consist of several assemblies which may contain multiple occurrences of bodies and their entities. In order to describe an assignment unambiguously the full path from the root part of the model to the actual topological entity is required.  SimScale generates unique internal names for all topological entities of a model during the geometry import which are used for assignments within the simulation spec. Examples of internal names are &#x60;B1_TE5&#x60; or &#x60;A1_I26_A5_I27_B102_TE196&#x60;.  This API endpoint allows to retrieve a mapping between the internal names and a detailed description of the entities which includes: * The topological entity class (body or face) * The original body and entity names * Entity attributes like &#x60;SDL/TYSA_NAME&#x60; or &#x60;SDL/TYSA_COLOUR&#x60; * The path from the root of the model  Please note that during geometry import the model&#39;s topology can be modified (e.g. facet split and other import options) which means that there is no 1:1 mapping between the internal and original names. 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="geometryId">The geometry ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <param name="_class">The entity class to filter. (optional)</param>
        /// <param name="bodies">The body names to filter. If multiple body names are provided any match. (optional)</param>
        /// <param name="entities">The entity names to filter. If multiple entity names are provided any match. (optional)</param>
        /// <param name="attributes">The attribute names to filter. If multiple attribute names are provided any match. (optional)</param>
        /// <param name="values">The attribute values to filter. If multiple attribute values are provided any match. (optional)</param>
        /// <returns>Task of GeometryMappings</returns>
        public async System.Threading.Tasks.Task<GeometryMappings> GetGeometryMappingsAsync (string projectId = default(string), Guid? geometryId = default(Guid?), int? limit = 100, int? page = 1, string _class = default(string), List<string> bodies = default(List<string>), List<string> entities = default(List<string>), List<string> attributes = default(List<string>), List<string> values = default(List<string>))
        {
             SimScale.Sdk.Client.ApiResponse<GeometryMappings> localVarResponse = await GetGeometryMappingsAsyncWithHttpInfo(projectId, geometryId, limit, page, _class, bodies, entities, attributes, values);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Describe id mapping of the geometry Assignment of topological entities (faces, bodies) in the simulation setup is a non-trivial task. Complex models can consist of several assemblies which may contain multiple occurrences of bodies and their entities. In order to describe an assignment unambiguously the full path from the root part of the model to the actual topological entity is required.  SimScale generates unique internal names for all topological entities of a model during the geometry import which are used for assignments within the simulation spec. Examples of internal names are &#x60;B1_TE5&#x60; or &#x60;A1_I26_A5_I27_B102_TE196&#x60;.  This API endpoint allows to retrieve a mapping between the internal names and a detailed description of the entities which includes: * The topological entity class (body or face) * The original body and entity names * Entity attributes like &#x60;SDL/TYSA_NAME&#x60; or &#x60;SDL/TYSA_COLOUR&#x60; * The path from the root of the model  Please note that during geometry import the model&#39;s topology can be modified (e.g. facet split and other import options) which means that there is no 1:1 mapping between the internal and original names. 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="geometryId">The geometry ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <param name="_class">The entity class to filter. (optional)</param>
        /// <param name="bodies">The body names to filter. If multiple body names are provided any match. (optional)</param>
        /// <param name="entities">The entity names to filter. If multiple entity names are provided any match. (optional)</param>
        /// <param name="attributes">The attribute names to filter. If multiple attribute names are provided any match. (optional)</param>
        /// <param name="values">The attribute values to filter. If multiple attribute values are provided any match. (optional)</param>
        /// <returns>Task of ApiResponse (GeometryMappings)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<GeometryMappings>> GetGeometryMappingsAsyncWithHttpInfo (string projectId = default(string), Guid? geometryId = default(Guid?), int? limit = 100, int? page = 1, string _class = default(string), List<string> bodies = default(List<string>), List<string> entities = default(List<string>), List<string> attributes = default(List<string>), List<string> values = default(List<string>))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling GeometriesApi->GetGeometryMappings");

            // verify the required parameter 'geometryId' is set
            if (geometryId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'geometryId' when calling GeometriesApi->GetGeometryMappings");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("geometryId", SimScale.Sdk.Client.ClientUtils.ParameterToString(geometryId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (_class != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "class", _class));
            }
            if (bodies != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("multi", "bodies", bodies));
            }
            if (entities != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("multi", "entities", entities));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("multi", "attributes", attributes));
            }
            if (values != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("multi", "values", values));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GeometryMappings>("/projects/{projectId}/geometries/{geometryId}/mappings", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGeometryMappings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update geometry information 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="geometryId">The geometry ID</param>
        /// <param name="geometry">Geometry information to be updated</param>
        /// <returns></returns>
        public void UpdateGeometry (string projectId = default(string), Guid? geometryId = default(Guid?), Geometry geometry = default(Geometry))
        {
             UpdateGeometryWithHttpInfo(projectId, geometryId, geometry);
        }

        /// <summary>
        /// Update geometry information 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="geometryId">The geometry ID</param>
        /// <param name="geometry">Geometry information to be updated</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public SimScale.Sdk.Client.ApiResponse<Object> UpdateGeometryWithHttpInfo (string projectId = default(string), Guid? geometryId = default(Guid?), Geometry geometry = default(Geometry))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling GeometriesApi->UpdateGeometry");

            // verify the required parameter 'geometryId' is set
            if (geometryId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'geometryId' when calling GeometriesApi->UpdateGeometry");

            // verify the required parameter 'geometry' is set
            if (geometry == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'geometry' when calling GeometriesApi->UpdateGeometry");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("geometryId", SimScale.Sdk.Client.ClientUtils.ParameterToString(geometryId)); // path parameter
            localVarRequestOptions.Data = geometry;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/projects/{projectId}/geometries/{geometryId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateGeometry", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update geometry information 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="geometryId">The geometry ID</param>
        /// <param name="geometry">Geometry information to be updated</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateGeometryAsync (string projectId = default(string), Guid? geometryId = default(Guid?), Geometry geometry = default(Geometry))
        {
             await UpdateGeometryAsyncWithHttpInfo(projectId, geometryId, geometry);

        }

        /// <summary>
        /// Update geometry information 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="geometryId">The geometry ID</param>
        /// <param name="geometry">Geometry information to be updated</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<Object>> UpdateGeometryAsyncWithHttpInfo (string projectId = default(string), Guid? geometryId = default(Guid?), Geometry geometry = default(Geometry))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling GeometriesApi->UpdateGeometry");

            // verify the required parameter 'geometryId' is set
            if (geometryId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'geometryId' when calling GeometriesApi->UpdateGeometry");

            // verify the required parameter 'geometry' is set
            if (geometry == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'geometry' when calling GeometriesApi->UpdateGeometry");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("geometryId", SimScale.Sdk.Client.ClientUtils.ParameterToString(geometryId)); // path parameter
            localVarRequestOptions.Data = geometry;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/projects/{projectId}/geometries/{geometryId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateGeometry", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
