/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using SimScale.Sdk.Client;
using SimScale.Sdk.Model;

namespace SimScale.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMeshOperationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel the mesh operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <returns></returns>
        void CancelMeshOperation (string projectId = default(string), Guid? meshOperationId = default(Guid?));

        /// <summary>
        /// Cancel the mesh operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CancelMeshOperationWithHttpInfo (string projectId = default(string), Guid? meshOperationId = default(Guid?));
        /// <summary>
        /// Check the mesh operation setup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <param name="simulationId">The related simulation ID of a physics based mesh operation (optional)</param>
        /// <returns>CheckResponse</returns>
        CheckResponse CheckMeshOperationSetup (string projectId = default(string), Guid? meshOperationId = default(Guid?), Guid? simulationId = default(Guid?));

        /// <summary>
        /// Check the mesh operation setup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <param name="simulationId">The related simulation ID of a physics based mesh operation (optional)</param>
        /// <returns>ApiResponse of CheckResponse</returns>
        ApiResponse<CheckResponse> CheckMeshOperationSetupWithHttpInfo (string projectId = default(string), Guid? meshOperationId = default(Guid?), Guid? simulationId = default(Guid?));
        /// <summary>
        /// Create a mesh operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperation">Mesh operation to be created</param>
        /// <returns>MeshOperation</returns>
        MeshOperation CreateMeshOperation (string projectId = default(string), MeshOperation meshOperation = default(MeshOperation));

        /// <summary>
        /// Create a mesh operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperation">Mesh operation to be created</param>
        /// <returns>ApiResponse of MeshOperation</returns>
        ApiResponse<MeshOperation> CreateMeshOperationWithHttpInfo (string projectId = default(string), MeshOperation meshOperation = default(MeshOperation));
        /// <summary>
        /// Estimate the mesh operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <returns>Estimation</returns>
        Estimation EstimateMeshOperation (string projectId = default(string), Guid? meshOperationId = default(Guid?));

        /// <summary>
        /// Estimate the mesh operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <returns>ApiResponse of Estimation</returns>
        ApiResponse<Estimation> EstimateMeshOperationWithHttpInfo (string projectId = default(string), Guid? meshOperationId = default(Guid?));
        /// <summary>
        /// Get information about the mesh operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <param name="meshingSpecSchemaVersion">Version of the schema the meshing spec should conform to</param>
        /// <returns>MeshOperation</returns>
        MeshOperation GetMeshOperation (string projectId = default(string), Guid? meshOperationId = default(Guid?), string meshingSpecSchemaVersion = "7.0");

        /// <summary>
        /// Get information about the mesh operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <param name="meshingSpecSchemaVersion">Version of the schema the meshing spec should conform to</param>
        /// <returns>ApiResponse of MeshOperation</returns>
        ApiResponse<MeshOperation> GetMeshOperationWithHttpInfo (string projectId = default(string), Guid? meshOperationId = default(Guid?), string meshingSpecSchemaVersion = "7.0");
        /// <summary>
        /// Get the mesh operation event log
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <returns>EventLogResponse</returns>
        EventLogResponse GetMeshOperationEventLog (string projectId = default(string), Guid? meshOperationId = default(Guid?));

        /// <summary>
        /// Get the mesh operation event log
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <returns>ApiResponse of EventLogResponse</returns>
        ApiResponse<EventLogResponse> GetMeshOperationEventLogWithHttpInfo (string projectId = default(string), Guid? meshOperationId = default(Guid?));
        /// <summary>
        /// Get Python SDK code for the mesh operation
        /// </summary>
        /// <remarks>
        /// Important: due to incompatibilities between the source Spec version and the target SDK version the generated code may contain incomplete sections or even be invalid. The generated code is provided as a convenience and should be reviewed and adapted before use.
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <param name="sdkVersion">Version of the SDK to generate code for (optional, default to &quot;latest&quot;)</param>
        /// <param name="sdkLanguage">Language of the SDK to generate code for. Only Python is currently supported. (optional, default to &quot;python&quot;)</param>
        /// <returns>string</returns>
        string GetMeshOperationSdkCode (string projectId = default(string), Guid? meshOperationId = default(Guid?), string sdkVersion = "latest", string sdkLanguage = "python");

        /// <summary>
        /// Get Python SDK code for the mesh operation
        /// </summary>
        /// <remarks>
        /// Important: due to incompatibilities between the source Spec version and the target SDK version the generated code may contain incomplete sections or even be invalid. The generated code is provided as a convenience and should be reviewed and adapted before use.
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <param name="sdkVersion">Version of the SDK to generate code for (optional, default to &quot;latest&quot;)</param>
        /// <param name="sdkLanguage">Language of the SDK to generate code for. Only Python is currently supported. (optional, default to &quot;python&quot;)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetMeshOperationSdkCodeWithHttpInfo (string projectId = default(string), Guid? meshOperationId = default(Guid?), string sdkVersion = "latest", string sdkLanguage = "python");
        /// <summary>
        /// List mesh operations for a project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>MeshOperations</returns>
        MeshOperations GetMeshOperations (string projectId = default(string), int? limit = 100, int? page = 1);

        /// <summary>
        /// List mesh operations for a project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>ApiResponse of MeshOperations</returns>
        ApiResponse<MeshOperations> GetMeshOperationsWithHttpInfo (string projectId = default(string), int? limit = 100, int? page = 1);
        /// <summary>
        /// Start the mesh operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <param name="simulationId">The related simulation ID of a physics based mesh operation (optional)</param>
        /// <returns></returns>
        void StartMeshOperation (string projectId = default(string), Guid? meshOperationId = default(Guid?), Guid? simulationId = default(Guid?));

        /// <summary>
        /// Start the mesh operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <param name="simulationId">The related simulation ID of a physics based mesh operation (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StartMeshOperationWithHttpInfo (string projectId = default(string), Guid? meshOperationId = default(Guid?), Guid? simulationId = default(Guid?));
        /// <summary>
        /// Update information about the mesh operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <param name="meshOperation">Mesh operation to be updated</param>
        /// <returns></returns>
        void UpdateMeshOperation (string projectId = default(string), Guid? meshOperationId = default(Guid?), MeshOperation meshOperation = default(MeshOperation));

        /// <summary>
        /// Update information about the mesh operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <param name="meshOperation">Mesh operation to be updated</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateMeshOperationWithHttpInfo (string projectId = default(string), Guid? meshOperationId = default(Guid?), MeshOperation meshOperation = default(MeshOperation));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMeshOperationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Cancel the mesh operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelMeshOperationAsync (string projectId = default(string), Guid? meshOperationId = default(Guid?));

        /// <summary>
        /// Cancel the mesh operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelMeshOperationAsyncWithHttpInfo (string projectId = default(string), Guid? meshOperationId = default(Guid?));
        /// <summary>
        /// Check the mesh operation setup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <param name="simulationId">The related simulation ID of a physics based mesh operation (optional)</param>
        /// <returns>Task of CheckResponse</returns>
        System.Threading.Tasks.Task<CheckResponse> CheckMeshOperationSetupAsync (string projectId = default(string), Guid? meshOperationId = default(Guid?), Guid? simulationId = default(Guid?));

        /// <summary>
        /// Check the mesh operation setup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <param name="simulationId">The related simulation ID of a physics based mesh operation (optional)</param>
        /// <returns>Task of ApiResponse (CheckResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CheckResponse>> CheckMeshOperationSetupAsyncWithHttpInfo (string projectId = default(string), Guid? meshOperationId = default(Guid?), Guid? simulationId = default(Guid?));
        /// <summary>
        /// Create a mesh operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperation">Mesh operation to be created</param>
        /// <returns>Task of MeshOperation</returns>
        System.Threading.Tasks.Task<MeshOperation> CreateMeshOperationAsync (string projectId = default(string), MeshOperation meshOperation = default(MeshOperation));

        /// <summary>
        /// Create a mesh operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperation">Mesh operation to be created</param>
        /// <returns>Task of ApiResponse (MeshOperation)</returns>
        System.Threading.Tasks.Task<ApiResponse<MeshOperation>> CreateMeshOperationAsyncWithHttpInfo (string projectId = default(string), MeshOperation meshOperation = default(MeshOperation));
        /// <summary>
        /// Estimate the mesh operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <returns>Task of Estimation</returns>
        System.Threading.Tasks.Task<Estimation> EstimateMeshOperationAsync (string projectId = default(string), Guid? meshOperationId = default(Guid?));

        /// <summary>
        /// Estimate the mesh operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <returns>Task of ApiResponse (Estimation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Estimation>> EstimateMeshOperationAsyncWithHttpInfo (string projectId = default(string), Guid? meshOperationId = default(Guid?));
        /// <summary>
        /// Get information about the mesh operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <param name="meshingSpecSchemaVersion">Version of the schema the meshing spec should conform to</param>
        /// <returns>Task of MeshOperation</returns>
        System.Threading.Tasks.Task<MeshOperation> GetMeshOperationAsync (string projectId = default(string), Guid? meshOperationId = default(Guid?), string meshingSpecSchemaVersion = "7.0");

        /// <summary>
        /// Get information about the mesh operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <param name="meshingSpecSchemaVersion">Version of the schema the meshing spec should conform to</param>
        /// <returns>Task of ApiResponse (MeshOperation)</returns>
        System.Threading.Tasks.Task<ApiResponse<MeshOperation>> GetMeshOperationAsyncWithHttpInfo (string projectId = default(string), Guid? meshOperationId = default(Guid?), string meshingSpecSchemaVersion = "7.0");
        /// <summary>
        /// Get the mesh operation event log
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <returns>Task of EventLogResponse</returns>
        System.Threading.Tasks.Task<EventLogResponse> GetMeshOperationEventLogAsync (string projectId = default(string), Guid? meshOperationId = default(Guid?));

        /// <summary>
        /// Get the mesh operation event log
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <returns>Task of ApiResponse (EventLogResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventLogResponse>> GetMeshOperationEventLogAsyncWithHttpInfo (string projectId = default(string), Guid? meshOperationId = default(Guid?));
        /// <summary>
        /// Get Python SDK code for the mesh operation
        /// </summary>
        /// <remarks>
        /// Important: due to incompatibilities between the source Spec version and the target SDK version the generated code may contain incomplete sections or even be invalid. The generated code is provided as a convenience and should be reviewed and adapted before use.
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <param name="sdkVersion">Version of the SDK to generate code for (optional, default to &quot;latest&quot;)</param>
        /// <param name="sdkLanguage">Language of the SDK to generate code for. Only Python is currently supported. (optional, default to &quot;python&quot;)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetMeshOperationSdkCodeAsync (string projectId = default(string), Guid? meshOperationId = default(Guid?), string sdkVersion = "latest", string sdkLanguage = "python");

        /// <summary>
        /// Get Python SDK code for the mesh operation
        /// </summary>
        /// <remarks>
        /// Important: due to incompatibilities between the source Spec version and the target SDK version the generated code may contain incomplete sections or even be invalid. The generated code is provided as a convenience and should be reviewed and adapted before use.
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <param name="sdkVersion">Version of the SDK to generate code for (optional, default to &quot;latest&quot;)</param>
        /// <param name="sdkLanguage">Language of the SDK to generate code for. Only Python is currently supported. (optional, default to &quot;python&quot;)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetMeshOperationSdkCodeAsyncWithHttpInfo (string projectId = default(string), Guid? meshOperationId = default(Guid?), string sdkVersion = "latest", string sdkLanguage = "python");
        /// <summary>
        /// List mesh operations for a project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>Task of MeshOperations</returns>
        System.Threading.Tasks.Task<MeshOperations> GetMeshOperationsAsync (string projectId = default(string), int? limit = 100, int? page = 1);

        /// <summary>
        /// List mesh operations for a project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (MeshOperations)</returns>
        System.Threading.Tasks.Task<ApiResponse<MeshOperations>> GetMeshOperationsAsyncWithHttpInfo (string projectId = default(string), int? limit = 100, int? page = 1);
        /// <summary>
        /// Start the mesh operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <param name="simulationId">The related simulation ID of a physics based mesh operation (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StartMeshOperationAsync (string projectId = default(string), Guid? meshOperationId = default(Guid?), Guid? simulationId = default(Guid?));

        /// <summary>
        /// Start the mesh operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <param name="simulationId">The related simulation ID of a physics based mesh operation (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StartMeshOperationAsyncWithHttpInfo (string projectId = default(string), Guid? meshOperationId = default(Guid?), Guid? simulationId = default(Guid?));
        /// <summary>
        /// Update information about the mesh operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <param name="meshOperation">Mesh operation to be updated</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateMeshOperationAsync (string projectId = default(string), Guid? meshOperationId = default(Guid?), MeshOperation meshOperation = default(MeshOperation));

        /// <summary>
        /// Update information about the mesh operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <param name="meshOperation">Mesh operation to be updated</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateMeshOperationAsyncWithHttpInfo (string projectId = default(string), Guid? meshOperationId = default(Guid?), MeshOperation meshOperation = default(MeshOperation));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMeshOperationsApi : IMeshOperationsApiSync, IMeshOperationsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MeshOperationsApi : IMeshOperationsApi
    {
        private SimScale.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MeshOperationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MeshOperationsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MeshOperationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MeshOperationsApi(String basePath)
        {
            this.Configuration = SimScale.Sdk.Client.Configuration.MergeConfigurations(
                SimScale.Sdk.Client.GlobalConfiguration.Instance,
                new SimScale.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new SimScale.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SimScale.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = SimScale.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MeshOperationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MeshOperationsApi(SimScale.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = SimScale.Sdk.Client.Configuration.MergeConfigurations(
                SimScale.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new SimScale.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SimScale.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = SimScale.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MeshOperationsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MeshOperationsApi(SimScale.Sdk.Client.ISynchronousClient client,SimScale.Sdk.Client.IAsynchronousClient asyncClient, SimScale.Sdk.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = SimScale.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public SimScale.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public SimScale.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SimScale.Sdk.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SimScale.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Cancel the mesh operation 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <returns></returns>
        public void CancelMeshOperation (string projectId = default(string), Guid? meshOperationId = default(Guid?))
        {
             CancelMeshOperationWithHttpInfo(projectId, meshOperationId);
        }

        /// <summary>
        /// Cancel the mesh operation 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public SimScale.Sdk.Client.ApiResponse<Object> CancelMeshOperationWithHttpInfo (string projectId = default(string), Guid? meshOperationId = default(Guid?))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling MeshOperationsApi->CancelMeshOperation");

            // verify the required parameter 'meshOperationId' is set
            if (meshOperationId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'meshOperationId' when calling MeshOperationsApi->CancelMeshOperation");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("meshOperationId", SimScale.Sdk.Client.ClientUtils.ParameterToString(meshOperationId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/projects/{projectId}/meshoperations/{meshOperationId}/cancel", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelMeshOperation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel the mesh operation 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelMeshOperationAsync (string projectId = default(string), Guid? meshOperationId = default(Guid?))
        {
             await CancelMeshOperationAsyncWithHttpInfo(projectId, meshOperationId);

        }

        /// <summary>
        /// Cancel the mesh operation 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<Object>> CancelMeshOperationAsyncWithHttpInfo (string projectId = default(string), Guid? meshOperationId = default(Guid?))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling MeshOperationsApi->CancelMeshOperation");

            // verify the required parameter 'meshOperationId' is set
            if (meshOperationId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'meshOperationId' when calling MeshOperationsApi->CancelMeshOperation");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("meshOperationId", SimScale.Sdk.Client.ClientUtils.ParameterToString(meshOperationId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/projects/{projectId}/meshoperations/{meshOperationId}/cancel", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelMeshOperation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check the mesh operation setup 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <param name="simulationId">The related simulation ID of a physics based mesh operation (optional)</param>
        /// <returns>CheckResponse</returns>
        public CheckResponse CheckMeshOperationSetup (string projectId = default(string), Guid? meshOperationId = default(Guid?), Guid? simulationId = default(Guid?))
        {
             SimScale.Sdk.Client.ApiResponse<CheckResponse> localVarResponse = CheckMeshOperationSetupWithHttpInfo(projectId, meshOperationId, simulationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check the mesh operation setup 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <param name="simulationId">The related simulation ID of a physics based mesh operation (optional)</param>
        /// <returns>ApiResponse of CheckResponse</returns>
        public SimScale.Sdk.Client.ApiResponse< CheckResponse > CheckMeshOperationSetupWithHttpInfo (string projectId = default(string), Guid? meshOperationId = default(Guid?), Guid? simulationId = default(Guid?))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling MeshOperationsApi->CheckMeshOperationSetup");

            // verify the required parameter 'meshOperationId' is set
            if (meshOperationId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'meshOperationId' when calling MeshOperationsApi->CheckMeshOperationSetup");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("meshOperationId", SimScale.Sdk.Client.ClientUtils.ParameterToString(meshOperationId)); // path parameter
            if (simulationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "simulationId", simulationId));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< CheckResponse >("/projects/{projectId}/meshoperations/{meshOperationId}/check", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckMeshOperationSetup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check the mesh operation setup 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <param name="simulationId">The related simulation ID of a physics based mesh operation (optional)</param>
        /// <returns>Task of CheckResponse</returns>
        public async System.Threading.Tasks.Task<CheckResponse> CheckMeshOperationSetupAsync (string projectId = default(string), Guid? meshOperationId = default(Guid?), Guid? simulationId = default(Guid?))
        {
             SimScale.Sdk.Client.ApiResponse<CheckResponse> localVarResponse = await CheckMeshOperationSetupAsyncWithHttpInfo(projectId, meshOperationId, simulationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check the mesh operation setup 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <param name="simulationId">The related simulation ID of a physics based mesh operation (optional)</param>
        /// <returns>Task of ApiResponse (CheckResponse)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<CheckResponse>> CheckMeshOperationSetupAsyncWithHttpInfo (string projectId = default(string), Guid? meshOperationId = default(Guid?), Guid? simulationId = default(Guid?))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling MeshOperationsApi->CheckMeshOperationSetup");

            // verify the required parameter 'meshOperationId' is set
            if (meshOperationId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'meshOperationId' when calling MeshOperationsApi->CheckMeshOperationSetup");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("meshOperationId", SimScale.Sdk.Client.ClientUtils.ParameterToString(meshOperationId)); // path parameter
            if (simulationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "simulationId", simulationId));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CheckResponse>("/projects/{projectId}/meshoperations/{meshOperationId}/check", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckMeshOperationSetup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a mesh operation 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperation">Mesh operation to be created</param>
        /// <returns>MeshOperation</returns>
        public MeshOperation CreateMeshOperation (string projectId = default(string), MeshOperation meshOperation = default(MeshOperation))
        {
             SimScale.Sdk.Client.ApiResponse<MeshOperation> localVarResponse = CreateMeshOperationWithHttpInfo(projectId, meshOperation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a mesh operation 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperation">Mesh operation to be created</param>
        /// <returns>ApiResponse of MeshOperation</returns>
        public SimScale.Sdk.Client.ApiResponse< MeshOperation > CreateMeshOperationWithHttpInfo (string projectId = default(string), MeshOperation meshOperation = default(MeshOperation))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling MeshOperationsApi->CreateMeshOperation");

            // verify the required parameter 'meshOperation' is set
            if (meshOperation == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'meshOperation' when calling MeshOperationsApi->CreateMeshOperation");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = meshOperation;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< MeshOperation >("/projects/{projectId}/meshoperations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMeshOperation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a mesh operation 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperation">Mesh operation to be created</param>
        /// <returns>Task of MeshOperation</returns>
        public async System.Threading.Tasks.Task<MeshOperation> CreateMeshOperationAsync (string projectId = default(string), MeshOperation meshOperation = default(MeshOperation))
        {
             SimScale.Sdk.Client.ApiResponse<MeshOperation> localVarResponse = await CreateMeshOperationAsyncWithHttpInfo(projectId, meshOperation);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a mesh operation 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperation">Mesh operation to be created</param>
        /// <returns>Task of ApiResponse (MeshOperation)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<MeshOperation>> CreateMeshOperationAsyncWithHttpInfo (string projectId = default(string), MeshOperation meshOperation = default(MeshOperation))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling MeshOperationsApi->CreateMeshOperation");

            // verify the required parameter 'meshOperation' is set
            if (meshOperation == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'meshOperation' when calling MeshOperationsApi->CreateMeshOperation");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = meshOperation;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<MeshOperation>("/projects/{projectId}/meshoperations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMeshOperation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Estimate the mesh operation 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <returns>Estimation</returns>
        public Estimation EstimateMeshOperation (string projectId = default(string), Guid? meshOperationId = default(Guid?))
        {
             SimScale.Sdk.Client.ApiResponse<Estimation> localVarResponse = EstimateMeshOperationWithHttpInfo(projectId, meshOperationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Estimate the mesh operation 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <returns>ApiResponse of Estimation</returns>
        public SimScale.Sdk.Client.ApiResponse< Estimation > EstimateMeshOperationWithHttpInfo (string projectId = default(string), Guid? meshOperationId = default(Guid?))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling MeshOperationsApi->EstimateMeshOperation");

            // verify the required parameter 'meshOperationId' is set
            if (meshOperationId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'meshOperationId' when calling MeshOperationsApi->EstimateMeshOperation");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("meshOperationId", SimScale.Sdk.Client.ClientUtils.ParameterToString(meshOperationId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Estimation >("/projects/{projectId}/meshoperations/{meshOperationId}/estimate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EstimateMeshOperation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Estimate the mesh operation 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <returns>Task of Estimation</returns>
        public async System.Threading.Tasks.Task<Estimation> EstimateMeshOperationAsync (string projectId = default(string), Guid? meshOperationId = default(Guid?))
        {
             SimScale.Sdk.Client.ApiResponse<Estimation> localVarResponse = await EstimateMeshOperationAsyncWithHttpInfo(projectId, meshOperationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Estimate the mesh operation 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <returns>Task of ApiResponse (Estimation)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<Estimation>> EstimateMeshOperationAsyncWithHttpInfo (string projectId = default(string), Guid? meshOperationId = default(Guid?))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling MeshOperationsApi->EstimateMeshOperation");

            // verify the required parameter 'meshOperationId' is set
            if (meshOperationId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'meshOperationId' when calling MeshOperationsApi->EstimateMeshOperation");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("meshOperationId", SimScale.Sdk.Client.ClientUtils.ParameterToString(meshOperationId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Estimation>("/projects/{projectId}/meshoperations/{meshOperationId}/estimate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EstimateMeshOperation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get information about the mesh operation 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <param name="meshingSpecSchemaVersion">Version of the schema the meshing spec should conform to</param>
        /// <returns>MeshOperation</returns>
        public MeshOperation GetMeshOperation (string projectId = default(string), Guid? meshOperationId = default(Guid?), string meshingSpecSchemaVersion = "7.0")
        {
             SimScale.Sdk.Client.ApiResponse<MeshOperation> localVarResponse = GetMeshOperationWithHttpInfo(projectId, meshOperationId, meshingSpecSchemaVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get information about the mesh operation 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <param name="meshingSpecSchemaVersion">Version of the schema the meshing spec should conform to</param>
        /// <returns>ApiResponse of MeshOperation</returns>
        public SimScale.Sdk.Client.ApiResponse< MeshOperation > GetMeshOperationWithHttpInfo (string projectId = default(string), Guid? meshOperationId = default(Guid?), string meshingSpecSchemaVersion = "7.0")
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling MeshOperationsApi->GetMeshOperation");

            // verify the required parameter 'meshOperationId' is set
            if (meshOperationId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'meshOperationId' when calling MeshOperationsApi->GetMeshOperation");

            // verify the required parameter 'meshingSpecSchemaVersion' is set
            if (meshingSpecSchemaVersion == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'meshingSpecSchemaVersion' when calling MeshOperationsApi->GetMeshOperation");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("meshOperationId", SimScale.Sdk.Client.ClientUtils.ParameterToString(meshOperationId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "meshingSpecSchemaVersion", meshingSpecSchemaVersion));

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< MeshOperation >("/projects/{projectId}/meshoperations/{meshOperationId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMeshOperation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get information about the mesh operation 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <param name="meshingSpecSchemaVersion">Version of the schema the meshing spec should conform to</param>
        /// <returns>Task of MeshOperation</returns>
        public async System.Threading.Tasks.Task<MeshOperation> GetMeshOperationAsync (string projectId = default(string), Guid? meshOperationId = default(Guid?), string meshingSpecSchemaVersion = "7.0")
        {
             SimScale.Sdk.Client.ApiResponse<MeshOperation> localVarResponse = await GetMeshOperationAsyncWithHttpInfo(projectId, meshOperationId, meshingSpecSchemaVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get information about the mesh operation 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <param name="meshingSpecSchemaVersion">Version of the schema the meshing spec should conform to</param>
        /// <returns>Task of ApiResponse (MeshOperation)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<MeshOperation>> GetMeshOperationAsyncWithHttpInfo (string projectId = default(string), Guid? meshOperationId = default(Guid?), string meshingSpecSchemaVersion = "7.0")
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling MeshOperationsApi->GetMeshOperation");

            // verify the required parameter 'meshOperationId' is set
            if (meshOperationId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'meshOperationId' when calling MeshOperationsApi->GetMeshOperation");

            // verify the required parameter 'meshingSpecSchemaVersion' is set
            if (meshingSpecSchemaVersion == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'meshingSpecSchemaVersion' when calling MeshOperationsApi->GetMeshOperation");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("meshOperationId", SimScale.Sdk.Client.ClientUtils.ParameterToString(meshOperationId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "meshingSpecSchemaVersion", meshingSpecSchemaVersion));

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MeshOperation>("/projects/{projectId}/meshoperations/{meshOperationId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMeshOperation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the mesh operation event log 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <returns>EventLogResponse</returns>
        public EventLogResponse GetMeshOperationEventLog (string projectId = default(string), Guid? meshOperationId = default(Guid?))
        {
             SimScale.Sdk.Client.ApiResponse<EventLogResponse> localVarResponse = GetMeshOperationEventLogWithHttpInfo(projectId, meshOperationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the mesh operation event log 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <returns>ApiResponse of EventLogResponse</returns>
        public SimScale.Sdk.Client.ApiResponse< EventLogResponse > GetMeshOperationEventLogWithHttpInfo (string projectId = default(string), Guid? meshOperationId = default(Guid?))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling MeshOperationsApi->GetMeshOperationEventLog");

            // verify the required parameter 'meshOperationId' is set
            if (meshOperationId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'meshOperationId' when calling MeshOperationsApi->GetMeshOperationEventLog");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("meshOperationId", SimScale.Sdk.Client.ClientUtils.ParameterToString(meshOperationId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< EventLogResponse >("/projects/{projectId}/meshoperations/{meshOperationId}/eventlog", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMeshOperationEventLog", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the mesh operation event log 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <returns>Task of EventLogResponse</returns>
        public async System.Threading.Tasks.Task<EventLogResponse> GetMeshOperationEventLogAsync (string projectId = default(string), Guid? meshOperationId = default(Guid?))
        {
             SimScale.Sdk.Client.ApiResponse<EventLogResponse> localVarResponse = await GetMeshOperationEventLogAsyncWithHttpInfo(projectId, meshOperationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the mesh operation event log 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <returns>Task of ApiResponse (EventLogResponse)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<EventLogResponse>> GetMeshOperationEventLogAsyncWithHttpInfo (string projectId = default(string), Guid? meshOperationId = default(Guid?))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling MeshOperationsApi->GetMeshOperationEventLog");

            // verify the required parameter 'meshOperationId' is set
            if (meshOperationId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'meshOperationId' when calling MeshOperationsApi->GetMeshOperationEventLog");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("meshOperationId", SimScale.Sdk.Client.ClientUtils.ParameterToString(meshOperationId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<EventLogResponse>("/projects/{projectId}/meshoperations/{meshOperationId}/eventlog", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMeshOperationEventLog", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Python SDK code for the mesh operation Important: due to incompatibilities between the source Spec version and the target SDK version the generated code may contain incomplete sections or even be invalid. The generated code is provided as a convenience and should be reviewed and adapted before use.
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <param name="sdkVersion">Version of the SDK to generate code for (optional, default to &quot;latest&quot;)</param>
        /// <param name="sdkLanguage">Language of the SDK to generate code for. Only Python is currently supported. (optional, default to &quot;python&quot;)</param>
        /// <returns>string</returns>
        public string GetMeshOperationSdkCode (string projectId = default(string), Guid? meshOperationId = default(Guid?), string sdkVersion = "latest", string sdkLanguage = "python")
        {
             SimScale.Sdk.Client.ApiResponse<string> localVarResponse = GetMeshOperationSdkCodeWithHttpInfo(projectId, meshOperationId, sdkVersion, sdkLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Python SDK code for the mesh operation Important: due to incompatibilities between the source Spec version and the target SDK version the generated code may contain incomplete sections or even be invalid. The generated code is provided as a convenience and should be reviewed and adapted before use.
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <param name="sdkVersion">Version of the SDK to generate code for (optional, default to &quot;latest&quot;)</param>
        /// <param name="sdkLanguage">Language of the SDK to generate code for. Only Python is currently supported. (optional, default to &quot;python&quot;)</param>
        /// <returns>ApiResponse of string</returns>
        public SimScale.Sdk.Client.ApiResponse< string > GetMeshOperationSdkCodeWithHttpInfo (string projectId = default(string), Guid? meshOperationId = default(Guid?), string sdkVersion = "latest", string sdkLanguage = "python")
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling MeshOperationsApi->GetMeshOperationSdkCode");

            // verify the required parameter 'meshOperationId' is set
            if (meshOperationId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'meshOperationId' when calling MeshOperationsApi->GetMeshOperationSdkCode");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain;charset=UTF-8",
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("meshOperationId", SimScale.Sdk.Client.ClientUtils.ParameterToString(meshOperationId)); // path parameter
            if (sdkVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sdkVersion", sdkVersion));
            }
            if (sdkLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sdkLanguage", sdkLanguage));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< string >("/projects/{projectId}/meshoperations/{meshOperationId}/sdkcode", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMeshOperationSdkCode", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Python SDK code for the mesh operation Important: due to incompatibilities between the source Spec version and the target SDK version the generated code may contain incomplete sections or even be invalid. The generated code is provided as a convenience and should be reviewed and adapted before use.
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <param name="sdkVersion">Version of the SDK to generate code for (optional, default to &quot;latest&quot;)</param>
        /// <param name="sdkLanguage">Language of the SDK to generate code for. Only Python is currently supported. (optional, default to &quot;python&quot;)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetMeshOperationSdkCodeAsync (string projectId = default(string), Guid? meshOperationId = default(Guid?), string sdkVersion = "latest", string sdkLanguage = "python")
        {
             SimScale.Sdk.Client.ApiResponse<string> localVarResponse = await GetMeshOperationSdkCodeAsyncWithHttpInfo(projectId, meshOperationId, sdkVersion, sdkLanguage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Python SDK code for the mesh operation Important: due to incompatibilities between the source Spec version and the target SDK version the generated code may contain incomplete sections or even be invalid. The generated code is provided as a convenience and should be reviewed and adapted before use.
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <param name="sdkVersion">Version of the SDK to generate code for (optional, default to &quot;latest&quot;)</param>
        /// <param name="sdkLanguage">Language of the SDK to generate code for. Only Python is currently supported. (optional, default to &quot;python&quot;)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<string>> GetMeshOperationSdkCodeAsyncWithHttpInfo (string projectId = default(string), Guid? meshOperationId = default(Guid?), string sdkVersion = "latest", string sdkLanguage = "python")
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling MeshOperationsApi->GetMeshOperationSdkCode");

            // verify the required parameter 'meshOperationId' is set
            if (meshOperationId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'meshOperationId' when calling MeshOperationsApi->GetMeshOperationSdkCode");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain;charset=UTF-8",
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("meshOperationId", SimScale.Sdk.Client.ClientUtils.ParameterToString(meshOperationId)); // path parameter
            if (sdkVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sdkVersion", sdkVersion));
            }
            if (sdkLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sdkLanguage", sdkLanguage));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/projects/{projectId}/meshoperations/{meshOperationId}/sdkcode", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMeshOperationSdkCode", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List mesh operations for a project 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>MeshOperations</returns>
        public MeshOperations GetMeshOperations (string projectId = default(string), int? limit = 100, int? page = 1)
        {
             SimScale.Sdk.Client.ApiResponse<MeshOperations> localVarResponse = GetMeshOperationsWithHttpInfo(projectId, limit, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List mesh operations for a project 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>ApiResponse of MeshOperations</returns>
        public SimScale.Sdk.Client.ApiResponse< MeshOperations > GetMeshOperationsWithHttpInfo (string projectId = default(string), int? limit = 100, int? page = 1)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling MeshOperationsApi->GetMeshOperations");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< MeshOperations >("/projects/{projectId}/meshoperations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMeshOperations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List mesh operations for a project 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>Task of MeshOperations</returns>
        public async System.Threading.Tasks.Task<MeshOperations> GetMeshOperationsAsync (string projectId = default(string), int? limit = 100, int? page = 1)
        {
             SimScale.Sdk.Client.ApiResponse<MeshOperations> localVarResponse = await GetMeshOperationsAsyncWithHttpInfo(projectId, limit, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List mesh operations for a project 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (MeshOperations)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<MeshOperations>> GetMeshOperationsAsyncWithHttpInfo (string projectId = default(string), int? limit = 100, int? page = 1)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling MeshOperationsApi->GetMeshOperations");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MeshOperations>("/projects/{projectId}/meshoperations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMeshOperations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start the mesh operation 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <param name="simulationId">The related simulation ID of a physics based mesh operation (optional)</param>
        /// <returns></returns>
        public void StartMeshOperation (string projectId = default(string), Guid? meshOperationId = default(Guid?), Guid? simulationId = default(Guid?))
        {
             StartMeshOperationWithHttpInfo(projectId, meshOperationId, simulationId);
        }

        /// <summary>
        /// Start the mesh operation 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <param name="simulationId">The related simulation ID of a physics based mesh operation (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public SimScale.Sdk.Client.ApiResponse<Object> StartMeshOperationWithHttpInfo (string projectId = default(string), Guid? meshOperationId = default(Guid?), Guid? simulationId = default(Guid?))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling MeshOperationsApi->StartMeshOperation");

            // verify the required parameter 'meshOperationId' is set
            if (meshOperationId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'meshOperationId' when calling MeshOperationsApi->StartMeshOperation");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("meshOperationId", SimScale.Sdk.Client.ClientUtils.ParameterToString(meshOperationId)); // path parameter
            if (simulationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "simulationId", simulationId));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/projects/{projectId}/meshoperations/{meshOperationId}/start", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartMeshOperation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start the mesh operation 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <param name="simulationId">The related simulation ID of a physics based mesh operation (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StartMeshOperationAsync (string projectId = default(string), Guid? meshOperationId = default(Guid?), Guid? simulationId = default(Guid?))
        {
             await StartMeshOperationAsyncWithHttpInfo(projectId, meshOperationId, simulationId);

        }

        /// <summary>
        /// Start the mesh operation 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <param name="simulationId">The related simulation ID of a physics based mesh operation (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<Object>> StartMeshOperationAsyncWithHttpInfo (string projectId = default(string), Guid? meshOperationId = default(Guid?), Guid? simulationId = default(Guid?))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling MeshOperationsApi->StartMeshOperation");

            // verify the required parameter 'meshOperationId' is set
            if (meshOperationId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'meshOperationId' when calling MeshOperationsApi->StartMeshOperation");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("meshOperationId", SimScale.Sdk.Client.ClientUtils.ParameterToString(meshOperationId)); // path parameter
            if (simulationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "simulationId", simulationId));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/projects/{projectId}/meshoperations/{meshOperationId}/start", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartMeshOperation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update information about the mesh operation 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <param name="meshOperation">Mesh operation to be updated</param>
        /// <returns></returns>
        public void UpdateMeshOperation (string projectId = default(string), Guid? meshOperationId = default(Guid?), MeshOperation meshOperation = default(MeshOperation))
        {
             UpdateMeshOperationWithHttpInfo(projectId, meshOperationId, meshOperation);
        }

        /// <summary>
        /// Update information about the mesh operation 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <param name="meshOperation">Mesh operation to be updated</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public SimScale.Sdk.Client.ApiResponse<Object> UpdateMeshOperationWithHttpInfo (string projectId = default(string), Guid? meshOperationId = default(Guid?), MeshOperation meshOperation = default(MeshOperation))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling MeshOperationsApi->UpdateMeshOperation");

            // verify the required parameter 'meshOperationId' is set
            if (meshOperationId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'meshOperationId' when calling MeshOperationsApi->UpdateMeshOperation");

            // verify the required parameter 'meshOperation' is set
            if (meshOperation == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'meshOperation' when calling MeshOperationsApi->UpdateMeshOperation");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("meshOperationId", SimScale.Sdk.Client.ClientUtils.ParameterToString(meshOperationId)); // path parameter
            localVarRequestOptions.Data = meshOperation;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/projects/{projectId}/meshoperations/{meshOperationId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMeshOperation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update information about the mesh operation 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <param name="meshOperation">Mesh operation to be updated</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateMeshOperationAsync (string projectId = default(string), Guid? meshOperationId = default(Guid?), MeshOperation meshOperation = default(MeshOperation))
        {
             await UpdateMeshOperationAsyncWithHttpInfo(projectId, meshOperationId, meshOperation);

        }

        /// <summary>
        /// Update information about the mesh operation 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="meshOperationId">The mesh operation ID</param>
        /// <param name="meshOperation">Mesh operation to be updated</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<Object>> UpdateMeshOperationAsyncWithHttpInfo (string projectId = default(string), Guid? meshOperationId = default(Guid?), MeshOperation meshOperation = default(MeshOperation))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling MeshOperationsApi->UpdateMeshOperation");

            // verify the required parameter 'meshOperationId' is set
            if (meshOperationId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'meshOperationId' when calling MeshOperationsApi->UpdateMeshOperation");

            // verify the required parameter 'meshOperation' is set
            if (meshOperation == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'meshOperation' when calling MeshOperationsApi->UpdateMeshOperation");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("meshOperationId", SimScale.Sdk.Client.ClientUtils.ParameterToString(meshOperationId)); // path parameter
            localVarRequestOptions.Data = meshOperation;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/projects/{projectId}/meshoperations/{meshOperationId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMeshOperation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
