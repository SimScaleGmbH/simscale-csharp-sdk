/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using SimScale.Sdk.Client;
using SimScale.Sdk.Model;

namespace SimScale.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAIModelsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Generate an AI prediction for a simulation based on an AI model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAiPredictionRequest"> (optional)</param>
        /// <returns>CreateAiPredictionResponse</returns>
        CreateAiPredictionResponse CreatePrediction (CreateAiPredictionRequest createAiPredictionRequest = default(CreateAiPredictionRequest));

        /// <summary>
        /// Generate an AI prediction for a simulation based on an AI model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAiPredictionRequest"> (optional)</param>
        /// <returns>ApiResponse of CreateAiPredictionResponse</returns>
        ApiResponse<CreateAiPredictionResponse> CreatePredictionWithHttpInfo (CreateAiPredictionRequest createAiPredictionRequest = default(CreateAiPredictionRequest));
        /// <summary>
        /// Get specific AI model belonging to the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aiModelId"></param>
        /// <returns>AiUserModel</returns>
        AiUserModel GetAiModel (Guid? aiModelId = default(Guid?));

        /// <summary>
        /// Get specific AI model belonging to the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aiModelId"></param>
        /// <returns>ApiResponse of AiUserModel</returns>
        ApiResponse<AiUserModel> GetAiModelWithHttpInfo (Guid? aiModelId = default(Guid?));
        /// <summary>
        /// Get all AI models belonging to the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;AiUserModel&gt;</returns>
        List<AiUserModel> GetAiModels ();

        /// <summary>
        /// Get all AI models belonging to the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;AiUserModel&gt;</returns>
        ApiResponse<List<AiUserModel>> GetAiModelsWithHttpInfo ();
        /// <summary>
        /// Get all AI model belonging to the user that can be used to run a specific simulation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simulationId"></param>
        /// <param name="projectId"></param>
        /// <returns>List&lt;AvailableAiModel&gt;</returns>
        List<AvailableAiModel> GetAvailableAiModel (Guid? simulationId = default(Guid?), string projectId = default(string));

        /// <summary>
        /// Get all AI model belonging to the user that can be used to run a specific simulation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simulationId"></param>
        /// <param name="projectId"></param>
        /// <returns>ApiResponse of List&lt;AvailableAiModel&gt;</returns>
        ApiResponse<List<AvailableAiModel>> GetAvailableAiModelWithHttpInfo (Guid? simulationId = default(Guid?), string projectId = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAIModelsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Generate an AI prediction for a simulation based on an AI model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAiPredictionRequest"> (optional)</param>
        /// <returns>Task of CreateAiPredictionResponse</returns>
        System.Threading.Tasks.Task<CreateAiPredictionResponse> CreatePredictionAsync (CreateAiPredictionRequest createAiPredictionRequest = default(CreateAiPredictionRequest));

        /// <summary>
        /// Generate an AI prediction for a simulation based on an AI model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAiPredictionRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (CreateAiPredictionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateAiPredictionResponse>> CreatePredictionAsyncWithHttpInfo (CreateAiPredictionRequest createAiPredictionRequest = default(CreateAiPredictionRequest));
        /// <summary>
        /// Get specific AI model belonging to the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aiModelId"></param>
        /// <returns>Task of AiUserModel</returns>
        System.Threading.Tasks.Task<AiUserModel> GetAiModelAsync (Guid? aiModelId = default(Guid?));

        /// <summary>
        /// Get specific AI model belonging to the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aiModelId"></param>
        /// <returns>Task of ApiResponse (AiUserModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<AiUserModel>> GetAiModelAsyncWithHttpInfo (Guid? aiModelId = default(Guid?));
        /// <summary>
        /// Get all AI models belonging to the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;AiUserModel&gt;</returns>
        System.Threading.Tasks.Task<List<AiUserModel>> GetAiModelsAsync ();

        /// <summary>
        /// Get all AI models belonging to the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;AiUserModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AiUserModel>>> GetAiModelsAsyncWithHttpInfo ();
        /// <summary>
        /// Get all AI model belonging to the user that can be used to run a specific simulation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simulationId"></param>
        /// <param name="projectId"></param>
        /// <returns>Task of List&lt;AvailableAiModel&gt;</returns>
        System.Threading.Tasks.Task<List<AvailableAiModel>> GetAvailableAiModelAsync (Guid? simulationId = default(Guid?), string projectId = default(string));

        /// <summary>
        /// Get all AI model belonging to the user that can be used to run a specific simulation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simulationId"></param>
        /// <param name="projectId"></param>
        /// <returns>Task of ApiResponse (List&lt;AvailableAiModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AvailableAiModel>>> GetAvailableAiModelAsyncWithHttpInfo (Guid? simulationId = default(Guid?), string projectId = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAIModelsApi : IAIModelsApiSync, IAIModelsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AIModelsApi : IAIModelsApi
    {
        private SimScale.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AIModelsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AIModelsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AIModelsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AIModelsApi(String basePath)
        {
            this.Configuration = SimScale.Sdk.Client.Configuration.MergeConfigurations(
                SimScale.Sdk.Client.GlobalConfiguration.Instance,
                new SimScale.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new SimScale.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SimScale.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = SimScale.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AIModelsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AIModelsApi(SimScale.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = SimScale.Sdk.Client.Configuration.MergeConfigurations(
                SimScale.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new SimScale.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SimScale.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = SimScale.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AIModelsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AIModelsApi(SimScale.Sdk.Client.ISynchronousClient client,SimScale.Sdk.Client.IAsynchronousClient asyncClient, SimScale.Sdk.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = SimScale.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public SimScale.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public SimScale.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SimScale.Sdk.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SimScale.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Generate an AI prediction for a simulation based on an AI model 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAiPredictionRequest"> (optional)</param>
        /// <returns>CreateAiPredictionResponse</returns>
        public CreateAiPredictionResponse CreatePrediction (CreateAiPredictionRequest createAiPredictionRequest = default(CreateAiPredictionRequest))
        {
             SimScale.Sdk.Client.ApiResponse<CreateAiPredictionResponse> localVarResponse = CreatePredictionWithHttpInfo(createAiPredictionRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate an AI prediction for a simulation based on an AI model 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAiPredictionRequest"> (optional)</param>
        /// <returns>ApiResponse of CreateAiPredictionResponse</returns>
        public SimScale.Sdk.Client.ApiResponse< CreateAiPredictionResponse > CreatePredictionWithHttpInfo (CreateAiPredictionRequest createAiPredictionRequest = default(CreateAiPredictionRequest))
        {
            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createAiPredictionRequest;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< CreateAiPredictionResponse >("/ai/predict", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePrediction", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate an AI prediction for a simulation based on an AI model 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAiPredictionRequest"> (optional)</param>
        /// <returns>Task of CreateAiPredictionResponse</returns>
        public async System.Threading.Tasks.Task<CreateAiPredictionResponse> CreatePredictionAsync (CreateAiPredictionRequest createAiPredictionRequest = default(CreateAiPredictionRequest))
        {
             SimScale.Sdk.Client.ApiResponse<CreateAiPredictionResponse> localVarResponse = await CreatePredictionAsyncWithHttpInfo(createAiPredictionRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate an AI prediction for a simulation based on an AI model 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAiPredictionRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (CreateAiPredictionResponse)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<CreateAiPredictionResponse>> CreatePredictionAsyncWithHttpInfo (CreateAiPredictionRequest createAiPredictionRequest = default(CreateAiPredictionRequest))
        {

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = createAiPredictionRequest;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateAiPredictionResponse>("/ai/predict", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePrediction", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get specific AI model belonging to the user 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aiModelId"></param>
        /// <returns>AiUserModel</returns>
        public AiUserModel GetAiModel (Guid? aiModelId = default(Guid?))
        {
             SimScale.Sdk.Client.ApiResponse<AiUserModel> localVarResponse = GetAiModelWithHttpInfo(aiModelId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get specific AI model belonging to the user 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aiModelId"></param>
        /// <returns>ApiResponse of AiUserModel</returns>
        public SimScale.Sdk.Client.ApiResponse< AiUserModel > GetAiModelWithHttpInfo (Guid? aiModelId = default(Guid?))
        {
            // verify the required parameter 'aiModelId' is set
            if (aiModelId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'aiModelId' when calling AIModelsApi->GetAiModel");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("aiModelId", SimScale.Sdk.Client.ClientUtils.ParameterToString(aiModelId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< AiUserModel >("/ai/models/{aiModelId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAiModel", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get specific AI model belonging to the user 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aiModelId"></param>
        /// <returns>Task of AiUserModel</returns>
        public async System.Threading.Tasks.Task<AiUserModel> GetAiModelAsync (Guid? aiModelId = default(Guid?))
        {
             SimScale.Sdk.Client.ApiResponse<AiUserModel> localVarResponse = await GetAiModelAsyncWithHttpInfo(aiModelId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get specific AI model belonging to the user 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aiModelId"></param>
        /// <returns>Task of ApiResponse (AiUserModel)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<AiUserModel>> GetAiModelAsyncWithHttpInfo (Guid? aiModelId = default(Guid?))
        {
            // verify the required parameter 'aiModelId' is set
            if (aiModelId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'aiModelId' when calling AIModelsApi->GetAiModel");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("aiModelId", SimScale.Sdk.Client.ClientUtils.ParameterToString(aiModelId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AiUserModel>("/ai/models/{aiModelId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAiModel", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all AI models belonging to the user 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;AiUserModel&gt;</returns>
        public List<AiUserModel> GetAiModels ()
        {
             SimScale.Sdk.Client.ApiResponse<List<AiUserModel>> localVarResponse = GetAiModelsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all AI models belonging to the user 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;AiUserModel&gt;</returns>
        public SimScale.Sdk.Client.ApiResponse< List<AiUserModel> > GetAiModelsWithHttpInfo ()
        {
            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<AiUserModel> >("/ai/models", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAiModels", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all AI models belonging to the user 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;AiUserModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<AiUserModel>> GetAiModelsAsync ()
        {
             SimScale.Sdk.Client.ApiResponse<List<AiUserModel>> localVarResponse = await GetAiModelsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all AI models belonging to the user 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;AiUserModel&gt;)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<List<AiUserModel>>> GetAiModelsAsyncWithHttpInfo ()
        {

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<AiUserModel>>("/ai/models", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAiModels", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all AI model belonging to the user that can be used to run a specific simulation 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simulationId"></param>
        /// <param name="projectId"></param>
        /// <returns>List&lt;AvailableAiModel&gt;</returns>
        public List<AvailableAiModel> GetAvailableAiModel (Guid? simulationId = default(Guid?), string projectId = default(string))
        {
             SimScale.Sdk.Client.ApiResponse<List<AvailableAiModel>> localVarResponse = GetAvailableAiModelWithHttpInfo(simulationId, projectId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all AI model belonging to the user that can be used to run a specific simulation 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simulationId"></param>
        /// <param name="projectId"></param>
        /// <returns>ApiResponse of List&lt;AvailableAiModel&gt;</returns>
        public SimScale.Sdk.Client.ApiResponse< List<AvailableAiModel> > GetAvailableAiModelWithHttpInfo (Guid? simulationId = default(Guid?), string projectId = default(string))
        {
            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'simulationId' when calling AIModelsApi->GetAvailableAiModel");

            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling AIModelsApi->GetAvailableAiModel");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "simulationId", simulationId));
            localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "projectId", projectId));

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<AvailableAiModel> >("/ai/available-models", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAvailableAiModel", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all AI model belonging to the user that can be used to run a specific simulation 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simulationId"></param>
        /// <param name="projectId"></param>
        /// <returns>Task of List&lt;AvailableAiModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<AvailableAiModel>> GetAvailableAiModelAsync (Guid? simulationId = default(Guid?), string projectId = default(string))
        {
             SimScale.Sdk.Client.ApiResponse<List<AvailableAiModel>> localVarResponse = await GetAvailableAiModelAsyncWithHttpInfo(simulationId, projectId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all AI model belonging to the user that can be used to run a specific simulation 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simulationId"></param>
        /// <param name="projectId"></param>
        /// <returns>Task of ApiResponse (List&lt;AvailableAiModel&gt;)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<List<AvailableAiModel>>> GetAvailableAiModelAsyncWithHttpInfo (Guid? simulationId = default(Guid?), string projectId = default(string))
        {
            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'simulationId' when calling AIModelsApi->GetAvailableAiModel");

            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling AIModelsApi->GetAvailableAiModel");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "simulationId", simulationId));
            localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "projectId", projectId));

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<AvailableAiModel>>("/ai/available-models", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAvailableAiModel", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
