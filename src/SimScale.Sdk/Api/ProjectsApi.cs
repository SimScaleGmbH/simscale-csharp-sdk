/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using SimScale.Sdk.Client;
using SimScale.Sdk.Model;

namespace SimScale.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProjectsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new project
        /// </summary>
        /// <remarks>
        /// The visibility of the Project will be determined by the available capabilities of the requesting user. If the user can create private projects, the Project will be private. Otherwise, it will be public. 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">Project to be created</param>
        /// <returns>Project</returns>
        Project CreateProject (Project project = default(Project));

        /// <summary>
        /// Create a new project
        /// </summary>
        /// <remarks>
        /// The visibility of the Project will be determined by the available capabilities of the requesting user. If the user can create private projects, the Project will be private. Otherwise, it will be public. 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">Project to be created</param>
        /// <returns>ApiResponse of Project</returns>
        ApiResponse<Project> CreateProjectWithHttpInfo (Project project = default(Project));
        /// <summary>
        /// Get information about an existing project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <returns>Project</returns>
        Project GetProject (string projectId = default(string));

        /// <summary>
        /// Get information about an existing project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <returns>ApiResponse of Project</returns>
        ApiResponse<Project> GetProjectWithHttpInfo (string projectId = default(string));
        /// <summary>
        /// List projects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>Projects</returns>
        Projects GetProjects (int? limit = 100, int? page = 1);

        /// <summary>
        /// List projects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>ApiResponse of Projects</returns>
        ApiResponse<Projects> GetProjectsWithHttpInfo (int? limit = 100, int? page = 1);
        /// <summary>
        /// Update an existing project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="project">Project to be updated</param>
        /// <returns></returns>
        void UpdateProject (string projectId = default(string), Project project = default(Project));

        /// <summary>
        /// Update an existing project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="project">Project to be updated</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateProjectWithHttpInfo (string projectId = default(string), Project project = default(Project));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProjectsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a new project
        /// </summary>
        /// <remarks>
        /// The visibility of the Project will be determined by the available capabilities of the requesting user. If the user can create private projects, the Project will be private. Otherwise, it will be public. 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">Project to be created</param>
        /// <returns>Task of Project</returns>
        System.Threading.Tasks.Task<Project> CreateProjectAsync (Project project = default(Project));

        /// <summary>
        /// Create a new project
        /// </summary>
        /// <remarks>
        /// The visibility of the Project will be determined by the available capabilities of the requesting user. If the user can create private projects, the Project will be private. Otherwise, it will be public. 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">Project to be created</param>
        /// <returns>Task of ApiResponse (Project)</returns>
        System.Threading.Tasks.Task<ApiResponse<Project>> CreateProjectAsyncWithHttpInfo (Project project = default(Project));
        /// <summary>
        /// Get information about an existing project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <returns>Task of Project</returns>
        System.Threading.Tasks.Task<Project> GetProjectAsync (string projectId = default(string));

        /// <summary>
        /// Get information about an existing project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <returns>Task of ApiResponse (Project)</returns>
        System.Threading.Tasks.Task<ApiResponse<Project>> GetProjectAsyncWithHttpInfo (string projectId = default(string));
        /// <summary>
        /// List projects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>Task of Projects</returns>
        System.Threading.Tasks.Task<Projects> GetProjectsAsync (int? limit = 100, int? page = 1);

        /// <summary>
        /// List projects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (Projects)</returns>
        System.Threading.Tasks.Task<ApiResponse<Projects>> GetProjectsAsyncWithHttpInfo (int? limit = 100, int? page = 1);
        /// <summary>
        /// Update an existing project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="project">Project to be updated</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateProjectAsync (string projectId = default(string), Project project = default(Project));

        /// <summary>
        /// Update an existing project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="project">Project to be updated</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateProjectAsyncWithHttpInfo (string projectId = default(string), Project project = default(Project));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProjectsApi : IProjectsApiSync, IProjectsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProjectsApi : IProjectsApi
    {
        private SimScale.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProjectsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProjectsApi(String basePath)
        {
            this.Configuration = SimScale.Sdk.Client.Configuration.MergeConfigurations(
                SimScale.Sdk.Client.GlobalConfiguration.Instance,
                new SimScale.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new SimScale.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SimScale.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = SimScale.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProjectsApi(SimScale.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = SimScale.Sdk.Client.Configuration.MergeConfigurations(
                SimScale.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new SimScale.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SimScale.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = SimScale.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ProjectsApi(SimScale.Sdk.Client.ISynchronousClient client,SimScale.Sdk.Client.IAsynchronousClient asyncClient, SimScale.Sdk.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = SimScale.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public SimScale.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public SimScale.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SimScale.Sdk.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SimScale.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a new project The visibility of the Project will be determined by the available capabilities of the requesting user. If the user can create private projects, the Project will be private. Otherwise, it will be public. 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">Project to be created</param>
        /// <returns>Project</returns>
        public Project CreateProject (Project project = default(Project))
        {
             SimScale.Sdk.Client.ApiResponse<Project> localVarResponse = CreateProjectWithHttpInfo(project);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new project The visibility of the Project will be determined by the available capabilities of the requesting user. If the user can create private projects, the Project will be private. Otherwise, it will be public. 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">Project to be created</param>
        /// <returns>ApiResponse of Project</returns>
        public SimScale.Sdk.Client.ApiResponse< Project > CreateProjectWithHttpInfo (Project project = default(Project))
        {
            // verify the required parameter 'project' is set
            if (project == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'project' when calling ProjectsApi->CreateProject");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = project;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Project >("/projects", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new project The visibility of the Project will be determined by the available capabilities of the requesting user. If the user can create private projects, the Project will be private. Otherwise, it will be public. 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">Project to be created</param>
        /// <returns>Task of Project</returns>
        public async System.Threading.Tasks.Task<Project> CreateProjectAsync (Project project = default(Project))
        {
             SimScale.Sdk.Client.ApiResponse<Project> localVarResponse = await CreateProjectAsyncWithHttpInfo(project);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new project The visibility of the Project will be determined by the available capabilities of the requesting user. If the user can create private projects, the Project will be private. Otherwise, it will be public. 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">Project to be created</param>
        /// <returns>Task of ApiResponse (Project)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<Project>> CreateProjectAsyncWithHttpInfo (Project project = default(Project))
        {
            // verify the required parameter 'project' is set
            if (project == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'project' when calling ProjectsApi->CreateProject");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = project;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Project>("/projects", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get information about an existing project 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <returns>Project</returns>
        public Project GetProject (string projectId = default(string))
        {
             SimScale.Sdk.Client.ApiResponse<Project> localVarResponse = GetProjectWithHttpInfo(projectId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get information about an existing project 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <returns>ApiResponse of Project</returns>
        public SimScale.Sdk.Client.ApiResponse< Project > GetProjectWithHttpInfo (string projectId = default(string))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectsApi->GetProject");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Project >("/projects/{projectId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get information about an existing project 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <returns>Task of Project</returns>
        public async System.Threading.Tasks.Task<Project> GetProjectAsync (string projectId = default(string))
        {
             SimScale.Sdk.Client.ApiResponse<Project> localVarResponse = await GetProjectAsyncWithHttpInfo(projectId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get information about an existing project 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <returns>Task of ApiResponse (Project)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<Project>> GetProjectAsyncWithHttpInfo (string projectId = default(string))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectsApi->GetProject");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Project>("/projects/{projectId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List projects 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>Projects</returns>
        public Projects GetProjects (int? limit = 100, int? page = 1)
        {
             SimScale.Sdk.Client.ApiResponse<Projects> localVarResponse = GetProjectsWithHttpInfo(limit, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List projects 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>ApiResponse of Projects</returns>
        public SimScale.Sdk.Client.ApiResponse< Projects > GetProjectsWithHttpInfo (int? limit = 100, int? page = 1)
        {
            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Projects >("/projects", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjects", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List projects 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>Task of Projects</returns>
        public async System.Threading.Tasks.Task<Projects> GetProjectsAsync (int? limit = 100, int? page = 1)
        {
             SimScale.Sdk.Client.ApiResponse<Projects> localVarResponse = await GetProjectsAsyncWithHttpInfo(limit, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List projects 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (Projects)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<Projects>> GetProjectsAsyncWithHttpInfo (int? limit = 100, int? page = 1)
        {

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Projects>("/projects", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjects", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing project 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="project">Project to be updated</param>
        /// <returns></returns>
        public void UpdateProject (string projectId = default(string), Project project = default(Project))
        {
             UpdateProjectWithHttpInfo(projectId, project);
        }

        /// <summary>
        /// Update an existing project 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="project">Project to be updated</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public SimScale.Sdk.Client.ApiResponse<Object> UpdateProjectWithHttpInfo (string projectId = default(string), Project project = default(Project))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectsApi->UpdateProject");

            // verify the required parameter 'project' is set
            if (project == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'project' when calling ProjectsApi->UpdateProject");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = project;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/projects/{projectId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing project 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="project">Project to be updated</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateProjectAsync (string projectId = default(string), Project project = default(Project))
        {
             await UpdateProjectAsyncWithHttpInfo(projectId, project);

        }

        /// <summary>
        /// Update an existing project 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="project">Project to be updated</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<Object>> UpdateProjectAsyncWithHttpInfo (string projectId = default(string), Project project = default(Project))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectsApi->UpdateProject");

            // verify the required parameter 'project' is set
            if (project == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'project' when calling ProjectsApi->UpdateProject");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = project;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/projects/{projectId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
