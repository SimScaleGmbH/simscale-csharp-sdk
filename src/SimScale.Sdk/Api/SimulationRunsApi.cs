/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using SimScale.Sdk.Client;
using SimScale.Sdk.Model;

namespace SimScale.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISimulationRunsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel the simulation run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <returns></returns>
        void CancelSimulationRun (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?));

        /// <summary>
        /// Cancel the simulation run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CancelSimulationRunWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?));
        /// <summary>
        /// Create a simulation run
        /// </summary>
        /// <remarks>
        /// This operation creates a run in status &#x60;READY&#x60;, however the run is not automatically started. The run must be started explicitely using the &#x60;POST /projects/{projectId}/simulations/{simulationId}/runs/{runId}/start&#x60; endpoint. 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="simulationRun">Simulation run to be created</param>
        /// <returns>SimulationRun</returns>
        SimulationRun CreateSimulationRun (string projectId = default(string), Guid? simulationId = default(Guid?), SimulationRun simulationRun = default(SimulationRun));

        /// <summary>
        /// Create a simulation run
        /// </summary>
        /// <remarks>
        /// This operation creates a run in status &#x60;READY&#x60;, however the run is not automatically started. The run must be started explicitely using the &#x60;POST /projects/{projectId}/simulations/{simulationId}/runs/{runId}/start&#x60; endpoint. 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="simulationRun">Simulation run to be created</param>
        /// <returns>ApiResponse of SimulationRun</returns>
        ApiResponse<SimulationRun> CreateSimulationRunWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), SimulationRun simulationRun = default(SimulationRun));
        /// <summary>
        /// Get basic information about the simulation run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <returns>SimulationRun</returns>
        SimulationRun GetSimulationRun (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?));

        /// <summary>
        /// Get basic information about the simulation run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <returns>ApiResponse of SimulationRun</returns>
        ApiResponse<SimulationRun> GetSimulationRunWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?));
        /// <summary>
        /// Get the simulation run event log
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <returns>EventLogResponse</returns>
        EventLogResponse GetSimulationRunEventLog (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?));

        /// <summary>
        /// Get the simulation run event log
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <returns>ApiResponse of EventLogResponse</returns>
        ApiResponse<EventLogResponse> GetSimulationRunEventLogWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?));
        /// <summary>
        /// List available results for a simulation runs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="category"> (optional)</param>
        /// <param name="quantity"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <returns>SimulationRunResults</returns>
        SimulationRunResults GetSimulationRunResults (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?), int? limit = 100, int? page = 1, SimulationRunResultType? type = default(SimulationRunResultType?), string category = default(string), string quantity = default(string), string name = default(string), decimal? direction = default(decimal?));

        /// <summary>
        /// List available results for a simulation runs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="category"> (optional)</param>
        /// <param name="quantity"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <returns>ApiResponse of SimulationRunResults</returns>
        ApiResponse<SimulationRunResults> GetSimulationRunResultsWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?), int? limit = 100, int? page = 1, SimulationRunResultType? type = default(SimulationRunResultType?), string category = default(string), string quantity = default(string), string name = default(string), decimal? direction = default(decimal?));
        /// <summary>
        /// Get the simulation run spec
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <param name="simulationSpecSchemaVersion">Version of the schema the simulation spec should conform to (optional, default to &quot;1.0&quot;)</param>
        /// <returns>SimulationSpec</returns>
        SimulationSpec GetSimulationRunSpec (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?), string simulationSpecSchemaVersion = "1.0");

        /// <summary>
        /// Get the simulation run spec
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <param name="simulationSpecSchemaVersion">Version of the schema the simulation spec should conform to (optional, default to &quot;1.0&quot;)</param>
        /// <returns>ApiResponse of SimulationSpec</returns>
        ApiResponse<SimulationSpec> GetSimulationRunSpecWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?), string simulationSpecSchemaVersion = "1.0");
        /// <summary>
        /// List simulation runs for a simulation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>SimulationRuns</returns>
        SimulationRuns GetSimulationRuns (string projectId = default(string), Guid? simulationId = default(Guid?), int? limit = 100, int? page = 1);

        /// <summary>
        /// List simulation runs for a simulation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>ApiResponse of SimulationRuns</returns>
        ApiResponse<SimulationRuns> GetSimulationRunsWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), int? limit = 100, int? page = 1);
        /// <summary>
        /// Start the simulation run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <returns></returns>
        void StartSimulationRun (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?));

        /// <summary>
        /// Start the simulation run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StartSimulationRunWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?));
        /// <summary>
        /// Update an existing simulation run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <param name="simulationRun">Simulation run to be updated</param>
        /// <returns></returns>
        void UpdateSimulationRun (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?), SimulationRun simulationRun = default(SimulationRun));

        /// <summary>
        /// Update an existing simulation run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <param name="simulationRun">Simulation run to be updated</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateSimulationRunWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?), SimulationRun simulationRun = default(SimulationRun));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISimulationRunsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Cancel the simulation run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelSimulationRunAsync (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?));

        /// <summary>
        /// Cancel the simulation run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelSimulationRunAsyncWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?));
        /// <summary>
        /// Create a simulation run
        /// </summary>
        /// <remarks>
        /// This operation creates a run in status &#x60;READY&#x60;, however the run is not automatically started. The run must be started explicitely using the &#x60;POST /projects/{projectId}/simulations/{simulationId}/runs/{runId}/start&#x60; endpoint. 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="simulationRun">Simulation run to be created</param>
        /// <returns>Task of SimulationRun</returns>
        System.Threading.Tasks.Task<SimulationRun> CreateSimulationRunAsync (string projectId = default(string), Guid? simulationId = default(Guid?), SimulationRun simulationRun = default(SimulationRun));

        /// <summary>
        /// Create a simulation run
        /// </summary>
        /// <remarks>
        /// This operation creates a run in status &#x60;READY&#x60;, however the run is not automatically started. The run must be started explicitely using the &#x60;POST /projects/{projectId}/simulations/{simulationId}/runs/{runId}/start&#x60; endpoint. 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="simulationRun">Simulation run to be created</param>
        /// <returns>Task of ApiResponse (SimulationRun)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimulationRun>> CreateSimulationRunAsyncWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), SimulationRun simulationRun = default(SimulationRun));
        /// <summary>
        /// Get basic information about the simulation run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <returns>Task of SimulationRun</returns>
        System.Threading.Tasks.Task<SimulationRun> GetSimulationRunAsync (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?));

        /// <summary>
        /// Get basic information about the simulation run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <returns>Task of ApiResponse (SimulationRun)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimulationRun>> GetSimulationRunAsyncWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?));
        /// <summary>
        /// Get the simulation run event log
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <returns>Task of EventLogResponse</returns>
        System.Threading.Tasks.Task<EventLogResponse> GetSimulationRunEventLogAsync (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?));

        /// <summary>
        /// Get the simulation run event log
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <returns>Task of ApiResponse (EventLogResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventLogResponse>> GetSimulationRunEventLogAsyncWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?));
        /// <summary>
        /// List available results for a simulation runs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="category"> (optional)</param>
        /// <param name="quantity"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <returns>Task of SimulationRunResults</returns>
        System.Threading.Tasks.Task<SimulationRunResults> GetSimulationRunResultsAsync (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?), int? limit = 100, int? page = 1, SimulationRunResultType? type = default(SimulationRunResultType?), string category = default(string), string quantity = default(string), string name = default(string), decimal? direction = default(decimal?));

        /// <summary>
        /// List available results for a simulation runs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="category"> (optional)</param>
        /// <param name="quantity"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <returns>Task of ApiResponse (SimulationRunResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimulationRunResults>> GetSimulationRunResultsAsyncWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?), int? limit = 100, int? page = 1, SimulationRunResultType? type = default(SimulationRunResultType?), string category = default(string), string quantity = default(string), string name = default(string), decimal? direction = default(decimal?));
        /// <summary>
        /// Get the simulation run spec
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <param name="simulationSpecSchemaVersion">Version of the schema the simulation spec should conform to (optional, default to &quot;1.0&quot;)</param>
        /// <returns>Task of SimulationSpec</returns>
        System.Threading.Tasks.Task<SimulationSpec> GetSimulationRunSpecAsync (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?), string simulationSpecSchemaVersion = "1.0");

        /// <summary>
        /// Get the simulation run spec
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <param name="simulationSpecSchemaVersion">Version of the schema the simulation spec should conform to (optional, default to &quot;1.0&quot;)</param>
        /// <returns>Task of ApiResponse (SimulationSpec)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimulationSpec>> GetSimulationRunSpecAsyncWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?), string simulationSpecSchemaVersion = "1.0");
        /// <summary>
        /// List simulation runs for a simulation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>Task of SimulationRuns</returns>
        System.Threading.Tasks.Task<SimulationRuns> GetSimulationRunsAsync (string projectId = default(string), Guid? simulationId = default(Guid?), int? limit = 100, int? page = 1);

        /// <summary>
        /// List simulation runs for a simulation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (SimulationRuns)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimulationRuns>> GetSimulationRunsAsyncWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), int? limit = 100, int? page = 1);
        /// <summary>
        /// Start the simulation run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StartSimulationRunAsync (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?));

        /// <summary>
        /// Start the simulation run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StartSimulationRunAsyncWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?));
        /// <summary>
        /// Update an existing simulation run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <param name="simulationRun">Simulation run to be updated</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateSimulationRunAsync (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?), SimulationRun simulationRun = default(SimulationRun));

        /// <summary>
        /// Update an existing simulation run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <param name="simulationRun">Simulation run to be updated</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateSimulationRunAsyncWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?), SimulationRun simulationRun = default(SimulationRun));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISimulationRunsApi : ISimulationRunsApiSync, ISimulationRunsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SimulationRunsApi : ISimulationRunsApi
    {
        private SimScale.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SimulationRunsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SimulationRunsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SimulationRunsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SimulationRunsApi(String basePath)
        {
            this.Configuration = SimScale.Sdk.Client.Configuration.MergeConfigurations(
                SimScale.Sdk.Client.GlobalConfiguration.Instance,
                new SimScale.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new SimScale.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SimScale.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = SimScale.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SimulationRunsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SimulationRunsApi(SimScale.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = SimScale.Sdk.Client.Configuration.MergeConfigurations(
                SimScale.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new SimScale.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SimScale.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = SimScale.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SimulationRunsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SimulationRunsApi(SimScale.Sdk.Client.ISynchronousClient client,SimScale.Sdk.Client.IAsynchronousClient asyncClient, SimScale.Sdk.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = SimScale.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public SimScale.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public SimScale.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SimScale.Sdk.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SimScale.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Cancel the simulation run 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <returns></returns>
        public void CancelSimulationRun (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?))
        {
             CancelSimulationRunWithHttpInfo(projectId, simulationId, runId);
        }

        /// <summary>
        /// Cancel the simulation run 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public SimScale.Sdk.Client.ApiResponse<Object> CancelSimulationRunWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling SimulationRunsApi->CancelSimulationRun");

            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'simulationId' when calling SimulationRunsApi->CancelSimulationRun");

            // verify the required parameter 'runId' is set
            if (runId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'runId' when calling SimulationRunsApi->CancelSimulationRun");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("simulationId", SimScale.Sdk.Client.ClientUtils.ParameterToString(simulationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runId", SimScale.Sdk.Client.ClientUtils.ParameterToString(runId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/projects/{projectId}/simulations/{simulationId}/runs/{runId}/cancel", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelSimulationRun", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel the simulation run 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelSimulationRunAsync (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?))
        {
             await CancelSimulationRunAsyncWithHttpInfo(projectId, simulationId, runId);

        }

        /// <summary>
        /// Cancel the simulation run 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<Object>> CancelSimulationRunAsyncWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling SimulationRunsApi->CancelSimulationRun");

            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'simulationId' when calling SimulationRunsApi->CancelSimulationRun");

            // verify the required parameter 'runId' is set
            if (runId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'runId' when calling SimulationRunsApi->CancelSimulationRun");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("simulationId", SimScale.Sdk.Client.ClientUtils.ParameterToString(simulationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runId", SimScale.Sdk.Client.ClientUtils.ParameterToString(runId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/projects/{projectId}/simulations/{simulationId}/runs/{runId}/cancel", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelSimulationRun", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a simulation run This operation creates a run in status &#x60;READY&#x60;, however the run is not automatically started. The run must be started explicitely using the &#x60;POST /projects/{projectId}/simulations/{simulationId}/runs/{runId}/start&#x60; endpoint. 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="simulationRun">Simulation run to be created</param>
        /// <returns>SimulationRun</returns>
        public SimulationRun CreateSimulationRun (string projectId = default(string), Guid? simulationId = default(Guid?), SimulationRun simulationRun = default(SimulationRun))
        {
             SimScale.Sdk.Client.ApiResponse<SimulationRun> localVarResponse = CreateSimulationRunWithHttpInfo(projectId, simulationId, simulationRun);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a simulation run This operation creates a run in status &#x60;READY&#x60;, however the run is not automatically started. The run must be started explicitely using the &#x60;POST /projects/{projectId}/simulations/{simulationId}/runs/{runId}/start&#x60; endpoint. 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="simulationRun">Simulation run to be created</param>
        /// <returns>ApiResponse of SimulationRun</returns>
        public SimScale.Sdk.Client.ApiResponse< SimulationRun > CreateSimulationRunWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), SimulationRun simulationRun = default(SimulationRun))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling SimulationRunsApi->CreateSimulationRun");

            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'simulationId' when calling SimulationRunsApi->CreateSimulationRun");

            // verify the required parameter 'simulationRun' is set
            if (simulationRun == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'simulationRun' when calling SimulationRunsApi->CreateSimulationRun");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("simulationId", SimScale.Sdk.Client.ClientUtils.ParameterToString(simulationId)); // path parameter
            localVarRequestOptions.Data = simulationRun;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< SimulationRun >("/projects/{projectId}/simulations/{simulationId}/runs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSimulationRun", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a simulation run This operation creates a run in status &#x60;READY&#x60;, however the run is not automatically started. The run must be started explicitely using the &#x60;POST /projects/{projectId}/simulations/{simulationId}/runs/{runId}/start&#x60; endpoint. 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="simulationRun">Simulation run to be created</param>
        /// <returns>Task of SimulationRun</returns>
        public async System.Threading.Tasks.Task<SimulationRun> CreateSimulationRunAsync (string projectId = default(string), Guid? simulationId = default(Guid?), SimulationRun simulationRun = default(SimulationRun))
        {
             SimScale.Sdk.Client.ApiResponse<SimulationRun> localVarResponse = await CreateSimulationRunAsyncWithHttpInfo(projectId, simulationId, simulationRun);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a simulation run This operation creates a run in status &#x60;READY&#x60;, however the run is not automatically started. The run must be started explicitely using the &#x60;POST /projects/{projectId}/simulations/{simulationId}/runs/{runId}/start&#x60; endpoint. 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="simulationRun">Simulation run to be created</param>
        /// <returns>Task of ApiResponse (SimulationRun)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<SimulationRun>> CreateSimulationRunAsyncWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), SimulationRun simulationRun = default(SimulationRun))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling SimulationRunsApi->CreateSimulationRun");

            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'simulationId' when calling SimulationRunsApi->CreateSimulationRun");

            // verify the required parameter 'simulationRun' is set
            if (simulationRun == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'simulationRun' when calling SimulationRunsApi->CreateSimulationRun");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("simulationId", SimScale.Sdk.Client.ClientUtils.ParameterToString(simulationId)); // path parameter
            localVarRequestOptions.Data = simulationRun;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SimulationRun>("/projects/{projectId}/simulations/{simulationId}/runs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSimulationRun", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get basic information about the simulation run 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <returns>SimulationRun</returns>
        public SimulationRun GetSimulationRun (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?))
        {
             SimScale.Sdk.Client.ApiResponse<SimulationRun> localVarResponse = GetSimulationRunWithHttpInfo(projectId, simulationId, runId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get basic information about the simulation run 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <returns>ApiResponse of SimulationRun</returns>
        public SimScale.Sdk.Client.ApiResponse< SimulationRun > GetSimulationRunWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling SimulationRunsApi->GetSimulationRun");

            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'simulationId' when calling SimulationRunsApi->GetSimulationRun");

            // verify the required parameter 'runId' is set
            if (runId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'runId' when calling SimulationRunsApi->GetSimulationRun");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("simulationId", SimScale.Sdk.Client.ClientUtils.ParameterToString(simulationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runId", SimScale.Sdk.Client.ClientUtils.ParameterToString(runId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< SimulationRun >("/projects/{projectId}/simulations/{simulationId}/runs/{runId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSimulationRun", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get basic information about the simulation run 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <returns>Task of SimulationRun</returns>
        public async System.Threading.Tasks.Task<SimulationRun> GetSimulationRunAsync (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?))
        {
             SimScale.Sdk.Client.ApiResponse<SimulationRun> localVarResponse = await GetSimulationRunAsyncWithHttpInfo(projectId, simulationId, runId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get basic information about the simulation run 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <returns>Task of ApiResponse (SimulationRun)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<SimulationRun>> GetSimulationRunAsyncWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling SimulationRunsApi->GetSimulationRun");

            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'simulationId' when calling SimulationRunsApi->GetSimulationRun");

            // verify the required parameter 'runId' is set
            if (runId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'runId' when calling SimulationRunsApi->GetSimulationRun");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("simulationId", SimScale.Sdk.Client.ClientUtils.ParameterToString(simulationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runId", SimScale.Sdk.Client.ClientUtils.ParameterToString(runId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SimulationRun>("/projects/{projectId}/simulations/{simulationId}/runs/{runId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSimulationRun", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the simulation run event log 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <returns>EventLogResponse</returns>
        public EventLogResponse GetSimulationRunEventLog (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?))
        {
             SimScale.Sdk.Client.ApiResponse<EventLogResponse> localVarResponse = GetSimulationRunEventLogWithHttpInfo(projectId, simulationId, runId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the simulation run event log 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <returns>ApiResponse of EventLogResponse</returns>
        public SimScale.Sdk.Client.ApiResponse< EventLogResponse > GetSimulationRunEventLogWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling SimulationRunsApi->GetSimulationRunEventLog");

            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'simulationId' when calling SimulationRunsApi->GetSimulationRunEventLog");

            // verify the required parameter 'runId' is set
            if (runId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'runId' when calling SimulationRunsApi->GetSimulationRunEventLog");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("simulationId", SimScale.Sdk.Client.ClientUtils.ParameterToString(simulationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runId", SimScale.Sdk.Client.ClientUtils.ParameterToString(runId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< EventLogResponse >("/projects/{projectId}/simulations/{simulationId}/runs/{runId}/eventlog", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSimulationRunEventLog", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the simulation run event log 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <returns>Task of EventLogResponse</returns>
        public async System.Threading.Tasks.Task<EventLogResponse> GetSimulationRunEventLogAsync (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?))
        {
             SimScale.Sdk.Client.ApiResponse<EventLogResponse> localVarResponse = await GetSimulationRunEventLogAsyncWithHttpInfo(projectId, simulationId, runId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the simulation run event log 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <returns>Task of ApiResponse (EventLogResponse)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<EventLogResponse>> GetSimulationRunEventLogAsyncWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling SimulationRunsApi->GetSimulationRunEventLog");

            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'simulationId' when calling SimulationRunsApi->GetSimulationRunEventLog");

            // verify the required parameter 'runId' is set
            if (runId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'runId' when calling SimulationRunsApi->GetSimulationRunEventLog");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("simulationId", SimScale.Sdk.Client.ClientUtils.ParameterToString(simulationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runId", SimScale.Sdk.Client.ClientUtils.ParameterToString(runId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<EventLogResponse>("/projects/{projectId}/simulations/{simulationId}/runs/{runId}/eventlog", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSimulationRunEventLog", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List available results for a simulation runs 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="category"> (optional)</param>
        /// <param name="quantity"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <returns>SimulationRunResults</returns>
        public SimulationRunResults GetSimulationRunResults (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?), int? limit = 100, int? page = 1, SimulationRunResultType? type = default(SimulationRunResultType?), string category = default(string), string quantity = default(string), string name = default(string), decimal? direction = default(decimal?))
        {
             SimScale.Sdk.Client.ApiResponse<SimulationRunResults> localVarResponse = GetSimulationRunResultsWithHttpInfo(projectId, simulationId, runId, limit, page, type, category, quantity, name, direction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List available results for a simulation runs 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="category"> (optional)</param>
        /// <param name="quantity"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <returns>ApiResponse of SimulationRunResults</returns>
        public SimScale.Sdk.Client.ApiResponse< SimulationRunResults > GetSimulationRunResultsWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?), int? limit = 100, int? page = 1, SimulationRunResultType? type = default(SimulationRunResultType?), string category = default(string), string quantity = default(string), string name = default(string), decimal? direction = default(decimal?))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling SimulationRunsApi->GetSimulationRunResults");

            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'simulationId' when calling SimulationRunsApi->GetSimulationRunResults");

            // verify the required parameter 'runId' is set
            if (runId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'runId' when calling SimulationRunsApi->GetSimulationRunResults");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("simulationId", SimScale.Sdk.Client.ClientUtils.ParameterToString(simulationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runId", SimScale.Sdk.Client.ClientUtils.ParameterToString(runId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }
            if (quantity != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "quantity", quantity));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< SimulationRunResults >("/projects/{projectId}/simulations/{simulationId}/runs/{runId}/results", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSimulationRunResults", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List available results for a simulation runs 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="category"> (optional)</param>
        /// <param name="quantity"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <returns>Task of SimulationRunResults</returns>
        public async System.Threading.Tasks.Task<SimulationRunResults> GetSimulationRunResultsAsync (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?), int? limit = 100, int? page = 1, SimulationRunResultType? type = default(SimulationRunResultType?), string category = default(string), string quantity = default(string), string name = default(string), decimal? direction = default(decimal?))
        {
             SimScale.Sdk.Client.ApiResponse<SimulationRunResults> localVarResponse = await GetSimulationRunResultsAsyncWithHttpInfo(projectId, simulationId, runId, limit, page, type, category, quantity, name, direction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List available results for a simulation runs 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="category"> (optional)</param>
        /// <param name="quantity"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <returns>Task of ApiResponse (SimulationRunResults)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<SimulationRunResults>> GetSimulationRunResultsAsyncWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?), int? limit = 100, int? page = 1, SimulationRunResultType? type = default(SimulationRunResultType?), string category = default(string), string quantity = default(string), string name = default(string), decimal? direction = default(decimal?))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling SimulationRunsApi->GetSimulationRunResults");

            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'simulationId' when calling SimulationRunsApi->GetSimulationRunResults");

            // verify the required parameter 'runId' is set
            if (runId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'runId' when calling SimulationRunsApi->GetSimulationRunResults");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("simulationId", SimScale.Sdk.Client.ClientUtils.ParameterToString(simulationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runId", SimScale.Sdk.Client.ClientUtils.ParameterToString(runId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }
            if (quantity != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "quantity", quantity));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SimulationRunResults>("/projects/{projectId}/simulations/{simulationId}/runs/{runId}/results", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSimulationRunResults", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the simulation run spec 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <param name="simulationSpecSchemaVersion">Version of the schema the simulation spec should conform to (optional, default to &quot;1.0&quot;)</param>
        /// <returns>SimulationSpec</returns>
        public SimulationSpec GetSimulationRunSpec (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?), string simulationSpecSchemaVersion = "1.0")
        {
             SimScale.Sdk.Client.ApiResponse<SimulationSpec> localVarResponse = GetSimulationRunSpecWithHttpInfo(projectId, simulationId, runId, simulationSpecSchemaVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the simulation run spec 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <param name="simulationSpecSchemaVersion">Version of the schema the simulation spec should conform to (optional, default to &quot;1.0&quot;)</param>
        /// <returns>ApiResponse of SimulationSpec</returns>
        public SimScale.Sdk.Client.ApiResponse< SimulationSpec > GetSimulationRunSpecWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?), string simulationSpecSchemaVersion = "1.0")
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling SimulationRunsApi->GetSimulationRunSpec");

            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'simulationId' when calling SimulationRunsApi->GetSimulationRunSpec");

            // verify the required parameter 'runId' is set
            if (runId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'runId' when calling SimulationRunsApi->GetSimulationRunSpec");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("simulationId", SimScale.Sdk.Client.ClientUtils.ParameterToString(simulationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runId", SimScale.Sdk.Client.ClientUtils.ParameterToString(runId)); // path parameter
            if (simulationSpecSchemaVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "simulationSpecSchemaVersion", simulationSpecSchemaVersion));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< SimulationSpec >("/projects/{projectId}/simulations/{simulationId}/runs/{runId}/spec", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSimulationRunSpec", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the simulation run spec 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <param name="simulationSpecSchemaVersion">Version of the schema the simulation spec should conform to (optional, default to &quot;1.0&quot;)</param>
        /// <returns>Task of SimulationSpec</returns>
        public async System.Threading.Tasks.Task<SimulationSpec> GetSimulationRunSpecAsync (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?), string simulationSpecSchemaVersion = "1.0")
        {
             SimScale.Sdk.Client.ApiResponse<SimulationSpec> localVarResponse = await GetSimulationRunSpecAsyncWithHttpInfo(projectId, simulationId, runId, simulationSpecSchemaVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the simulation run spec 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <param name="simulationSpecSchemaVersion">Version of the schema the simulation spec should conform to (optional, default to &quot;1.0&quot;)</param>
        /// <returns>Task of ApiResponse (SimulationSpec)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<SimulationSpec>> GetSimulationRunSpecAsyncWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?), string simulationSpecSchemaVersion = "1.0")
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling SimulationRunsApi->GetSimulationRunSpec");

            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'simulationId' when calling SimulationRunsApi->GetSimulationRunSpec");

            // verify the required parameter 'runId' is set
            if (runId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'runId' when calling SimulationRunsApi->GetSimulationRunSpec");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("simulationId", SimScale.Sdk.Client.ClientUtils.ParameterToString(simulationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runId", SimScale.Sdk.Client.ClientUtils.ParameterToString(runId)); // path parameter
            if (simulationSpecSchemaVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "simulationSpecSchemaVersion", simulationSpecSchemaVersion));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SimulationSpec>("/projects/{projectId}/simulations/{simulationId}/runs/{runId}/spec", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSimulationRunSpec", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List simulation runs for a simulation 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>SimulationRuns</returns>
        public SimulationRuns GetSimulationRuns (string projectId = default(string), Guid? simulationId = default(Guid?), int? limit = 100, int? page = 1)
        {
             SimScale.Sdk.Client.ApiResponse<SimulationRuns> localVarResponse = GetSimulationRunsWithHttpInfo(projectId, simulationId, limit, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List simulation runs for a simulation 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>ApiResponse of SimulationRuns</returns>
        public SimScale.Sdk.Client.ApiResponse< SimulationRuns > GetSimulationRunsWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), int? limit = 100, int? page = 1)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling SimulationRunsApi->GetSimulationRuns");

            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'simulationId' when calling SimulationRunsApi->GetSimulationRuns");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("simulationId", SimScale.Sdk.Client.ClientUtils.ParameterToString(simulationId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< SimulationRuns >("/projects/{projectId}/simulations/{simulationId}/runs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSimulationRuns", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List simulation runs for a simulation 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>Task of SimulationRuns</returns>
        public async System.Threading.Tasks.Task<SimulationRuns> GetSimulationRunsAsync (string projectId = default(string), Guid? simulationId = default(Guid?), int? limit = 100, int? page = 1)
        {
             SimScale.Sdk.Client.ApiResponse<SimulationRuns> localVarResponse = await GetSimulationRunsAsyncWithHttpInfo(projectId, simulationId, limit, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List simulation runs for a simulation 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (SimulationRuns)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<SimulationRuns>> GetSimulationRunsAsyncWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), int? limit = 100, int? page = 1)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling SimulationRunsApi->GetSimulationRuns");

            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'simulationId' when calling SimulationRunsApi->GetSimulationRuns");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("simulationId", SimScale.Sdk.Client.ClientUtils.ParameterToString(simulationId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SimulationRuns>("/projects/{projectId}/simulations/{simulationId}/runs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSimulationRuns", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start the simulation run 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <returns></returns>
        public void StartSimulationRun (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?))
        {
             StartSimulationRunWithHttpInfo(projectId, simulationId, runId);
        }

        /// <summary>
        /// Start the simulation run 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public SimScale.Sdk.Client.ApiResponse<Object> StartSimulationRunWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling SimulationRunsApi->StartSimulationRun");

            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'simulationId' when calling SimulationRunsApi->StartSimulationRun");

            // verify the required parameter 'runId' is set
            if (runId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'runId' when calling SimulationRunsApi->StartSimulationRun");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("simulationId", SimScale.Sdk.Client.ClientUtils.ParameterToString(simulationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runId", SimScale.Sdk.Client.ClientUtils.ParameterToString(runId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/projects/{projectId}/simulations/{simulationId}/runs/{runId}/start", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartSimulationRun", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start the simulation run 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StartSimulationRunAsync (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?))
        {
             await StartSimulationRunAsyncWithHttpInfo(projectId, simulationId, runId);

        }

        /// <summary>
        /// Start the simulation run 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<Object>> StartSimulationRunAsyncWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling SimulationRunsApi->StartSimulationRun");

            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'simulationId' when calling SimulationRunsApi->StartSimulationRun");

            // verify the required parameter 'runId' is set
            if (runId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'runId' when calling SimulationRunsApi->StartSimulationRun");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("simulationId", SimScale.Sdk.Client.ClientUtils.ParameterToString(simulationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runId", SimScale.Sdk.Client.ClientUtils.ParameterToString(runId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/projects/{projectId}/simulations/{simulationId}/runs/{runId}/start", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartSimulationRun", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing simulation run 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <param name="simulationRun">Simulation run to be updated</param>
        /// <returns></returns>
        public void UpdateSimulationRun (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?), SimulationRun simulationRun = default(SimulationRun))
        {
             UpdateSimulationRunWithHttpInfo(projectId, simulationId, runId, simulationRun);
        }

        /// <summary>
        /// Update an existing simulation run 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <param name="simulationRun">Simulation run to be updated</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public SimScale.Sdk.Client.ApiResponse<Object> UpdateSimulationRunWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?), SimulationRun simulationRun = default(SimulationRun))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling SimulationRunsApi->UpdateSimulationRun");

            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'simulationId' when calling SimulationRunsApi->UpdateSimulationRun");

            // verify the required parameter 'runId' is set
            if (runId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'runId' when calling SimulationRunsApi->UpdateSimulationRun");

            // verify the required parameter 'simulationRun' is set
            if (simulationRun == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'simulationRun' when calling SimulationRunsApi->UpdateSimulationRun");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("simulationId", SimScale.Sdk.Client.ClientUtils.ParameterToString(simulationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runId", SimScale.Sdk.Client.ClientUtils.ParameterToString(runId)); // path parameter
            localVarRequestOptions.Data = simulationRun;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/projects/{projectId}/simulations/{simulationId}/runs/{runId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSimulationRun", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing simulation run 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <param name="simulationRun">Simulation run to be updated</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateSimulationRunAsync (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?), SimulationRun simulationRun = default(SimulationRun))
        {
             await UpdateSimulationRunAsyncWithHttpInfo(projectId, simulationId, runId, simulationRun);

        }

        /// <summary>
        /// Update an existing simulation run 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="runId">The simulation run ID</param>
        /// <param name="simulationRun">Simulation run to be updated</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<Object>> UpdateSimulationRunAsyncWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), Guid? runId = default(Guid?), SimulationRun simulationRun = default(SimulationRun))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling SimulationRunsApi->UpdateSimulationRun");

            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'simulationId' when calling SimulationRunsApi->UpdateSimulationRun");

            // verify the required parameter 'runId' is set
            if (runId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'runId' when calling SimulationRunsApi->UpdateSimulationRun");

            // verify the required parameter 'simulationRun' is set
            if (simulationRun == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'simulationRun' when calling SimulationRunsApi->UpdateSimulationRun");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("simulationId", SimScale.Sdk.Client.ClientUtils.ParameterToString(simulationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("runId", SimScale.Sdk.Client.ClientUtils.ParameterToString(runId)); // path parameter
            localVarRequestOptions.Data = simulationRun;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/projects/{projectId}/simulations/{simulationId}/runs/{runId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSimulationRun", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
