/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using SimScale.Sdk.Client;
using SimScale.Sdk.Model;

namespace SimScale.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISimulationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Check the simulation setup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <returns>CheckResponse</returns>
        CheckResponse CheckSimulationSetup (string projectId = default(string), Guid? simulationId = default(Guid?));

        /// <summary>
        /// Check the simulation setup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <returns>ApiResponse of CheckResponse</returns>
        ApiResponse<CheckResponse> CheckSimulationSetupWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?));
        /// <summary>
        /// Create a geometry primitive for reference within a Simulation spec.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="geometryPrimitive">Geometry primitive specification.</param>
        /// <returns>GeometryPrimitiveResponse</returns>
        GeometryPrimitiveResponse CreateGeometryPrimitive (string projectId = default(string), GeometryPrimitive geometryPrimitive = default(GeometryPrimitive));

        /// <summary>
        /// Create a geometry primitive for reference within a Simulation spec.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="geometryPrimitive">Geometry primitive specification.</param>
        /// <returns>ApiResponse of GeometryPrimitiveResponse</returns>
        ApiResponse<GeometryPrimitiveResponse> CreateGeometryPrimitiveWithHttpInfo (string projectId = default(string), GeometryPrimitive geometryPrimitive = default(GeometryPrimitive));
        /// <summary>
        /// Create a simulation setup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationSpec">Simulation to be created</param>
        /// <returns>Simulation</returns>
        Simulation CreateSimulation (string projectId = default(string), SimulationSpec simulationSpec = default(SimulationSpec));

        /// <summary>
        /// Create a simulation setup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationSpec">Simulation to be created</param>
        /// <returns>ApiResponse of Simulation</returns>
        ApiResponse<Simulation> CreateSimulationWithHttpInfo (string projectId = default(string), SimulationSpec simulationSpec = default(SimulationSpec));
        /// <summary>
        /// Estimate the simulation setup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <returns>Estimation</returns>
        Estimation EstimateSimulationSetup (string projectId = default(string), Guid? simulationId = default(Guid?));

        /// <summary>
        /// Estimate the simulation setup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <returns>ApiResponse of Estimation</returns>
        ApiResponse<Estimation> EstimateSimulationSetupWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?));
        /// <summary>
        /// Get information about the simulation setup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="simulationSpecSchemaVersion">Version of the schema the simulation spec should conform to (optional, default to &quot;8.0&quot;)</param>
        /// <returns>SimulationSpec</returns>
        SimulationSpec GetSimulation (string projectId = default(string), Guid? simulationId = default(Guid?), string simulationSpecSchemaVersion = "8.0");

        /// <summary>
        /// Get information about the simulation setup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="simulationSpecSchemaVersion">Version of the schema the simulation spec should conform to (optional, default to &quot;8.0&quot;)</param>
        /// <returns>ApiResponse of SimulationSpec</returns>
        ApiResponse<SimulationSpec> GetSimulationWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), string simulationSpecSchemaVersion = "8.0");
        /// <summary>
        /// Get Python SDK code for the simulation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="sdkVersion">Version of the SDK to generate code for (optional, default to &quot;latest&quot;)</param>
        /// <param name="sdkLanguage">Language of the SDK to generate code for. Only Python is currently supported. (optional, default to &quot;python&quot;)</param>
        /// <returns>string</returns>
        string GetSimulationSdkCode (string projectId = default(string), Guid? simulationId = default(Guid?), string sdkVersion = "latest", string sdkLanguage = "python");

        /// <summary>
        /// Get Python SDK code for the simulation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="sdkVersion">Version of the SDK to generate code for (optional, default to &quot;latest&quot;)</param>
        /// <param name="sdkLanguage">Language of the SDK to generate code for. Only Python is currently supported. (optional, default to &quot;python&quot;)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetSimulationSdkCodeWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), string sdkVersion = "latest", string sdkLanguage = "python");
        /// <summary>
        /// List simulation setups within a project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>Simulations</returns>
        Simulations GetSimulations (string projectId = default(string), int? limit = 100, int? page = 1);

        /// <summary>
        /// List simulation setups within a project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>ApiResponse of Simulations</returns>
        ApiResponse<Simulations> GetSimulationsWithHttpInfo (string projectId = default(string), int? limit = 100, int? page = 1);
        /// <summary>
        /// Update information about the simulation setup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="simulationSpec">Simulation to be updated</param>
        /// <returns></returns>
        void UpdateSimulation (string projectId = default(string), Guid? simulationId = default(Guid?), SimulationSpec simulationSpec = default(SimulationSpec));

        /// <summary>
        /// Update information about the simulation setup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="simulationSpec">Simulation to be updated</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateSimulationWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), SimulationSpec simulationSpec = default(SimulationSpec));
        /// <summary>
        /// Update materials in the simulation setup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="materialUpdateRequest">Material update operations</param>
        /// <param name="preview">If present and true, the update material operation(s) will not be persisted and the returned response will only be a preview of the simulation. (optional, default to false)</param>
        /// <returns>MaterialUpdateResponse</returns>
        MaterialUpdateResponse UpdateSimulationMaterials (string projectId = default(string), Guid? simulationId = default(Guid?), MaterialUpdateRequest materialUpdateRequest = default(MaterialUpdateRequest), bool? preview = false);

        /// <summary>
        /// Update materials in the simulation setup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="materialUpdateRequest">Material update operations</param>
        /// <param name="preview">If present and true, the update material operation(s) will not be persisted and the returned response will only be a preview of the simulation. (optional, default to false)</param>
        /// <returns>ApiResponse of MaterialUpdateResponse</returns>
        ApiResponse<MaterialUpdateResponse> UpdateSimulationMaterialsWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), MaterialUpdateRequest materialUpdateRequest = default(MaterialUpdateRequest), bool? preview = false);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISimulationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Check the simulation setup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <returns>Task of CheckResponse</returns>
        System.Threading.Tasks.Task<CheckResponse> CheckSimulationSetupAsync (string projectId = default(string), Guid? simulationId = default(Guid?));

        /// <summary>
        /// Check the simulation setup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <returns>Task of ApiResponse (CheckResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CheckResponse>> CheckSimulationSetupAsyncWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?));
        /// <summary>
        /// Create a geometry primitive for reference within a Simulation spec.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="geometryPrimitive">Geometry primitive specification.</param>
        /// <returns>Task of GeometryPrimitiveResponse</returns>
        System.Threading.Tasks.Task<GeometryPrimitiveResponse> CreateGeometryPrimitiveAsync (string projectId = default(string), GeometryPrimitive geometryPrimitive = default(GeometryPrimitive));

        /// <summary>
        /// Create a geometry primitive for reference within a Simulation spec.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="geometryPrimitive">Geometry primitive specification.</param>
        /// <returns>Task of ApiResponse (GeometryPrimitiveResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GeometryPrimitiveResponse>> CreateGeometryPrimitiveAsyncWithHttpInfo (string projectId = default(string), GeometryPrimitive geometryPrimitive = default(GeometryPrimitive));
        /// <summary>
        /// Create a simulation setup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationSpec">Simulation to be created</param>
        /// <returns>Task of Simulation</returns>
        System.Threading.Tasks.Task<Simulation> CreateSimulationAsync (string projectId = default(string), SimulationSpec simulationSpec = default(SimulationSpec));

        /// <summary>
        /// Create a simulation setup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationSpec">Simulation to be created</param>
        /// <returns>Task of ApiResponse (Simulation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Simulation>> CreateSimulationAsyncWithHttpInfo (string projectId = default(string), SimulationSpec simulationSpec = default(SimulationSpec));
        /// <summary>
        /// Estimate the simulation setup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <returns>Task of Estimation</returns>
        System.Threading.Tasks.Task<Estimation> EstimateSimulationSetupAsync (string projectId = default(string), Guid? simulationId = default(Guid?));

        /// <summary>
        /// Estimate the simulation setup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <returns>Task of ApiResponse (Estimation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Estimation>> EstimateSimulationSetupAsyncWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?));
        /// <summary>
        /// Get information about the simulation setup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="simulationSpecSchemaVersion">Version of the schema the simulation spec should conform to (optional, default to &quot;8.0&quot;)</param>
        /// <returns>Task of SimulationSpec</returns>
        System.Threading.Tasks.Task<SimulationSpec> GetSimulationAsync (string projectId = default(string), Guid? simulationId = default(Guid?), string simulationSpecSchemaVersion = "8.0");

        /// <summary>
        /// Get information about the simulation setup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="simulationSpecSchemaVersion">Version of the schema the simulation spec should conform to (optional, default to &quot;8.0&quot;)</param>
        /// <returns>Task of ApiResponse (SimulationSpec)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimulationSpec>> GetSimulationAsyncWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), string simulationSpecSchemaVersion = "8.0");
        /// <summary>
        /// Get Python SDK code for the simulation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="sdkVersion">Version of the SDK to generate code for (optional, default to &quot;latest&quot;)</param>
        /// <param name="sdkLanguage">Language of the SDK to generate code for. Only Python is currently supported. (optional, default to &quot;python&quot;)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetSimulationSdkCodeAsync (string projectId = default(string), Guid? simulationId = default(Guid?), string sdkVersion = "latest", string sdkLanguage = "python");

        /// <summary>
        /// Get Python SDK code for the simulation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="sdkVersion">Version of the SDK to generate code for (optional, default to &quot;latest&quot;)</param>
        /// <param name="sdkLanguage">Language of the SDK to generate code for. Only Python is currently supported. (optional, default to &quot;python&quot;)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetSimulationSdkCodeAsyncWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), string sdkVersion = "latest", string sdkLanguage = "python");
        /// <summary>
        /// List simulation setups within a project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>Task of Simulations</returns>
        System.Threading.Tasks.Task<Simulations> GetSimulationsAsync (string projectId = default(string), int? limit = 100, int? page = 1);

        /// <summary>
        /// List simulation setups within a project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (Simulations)</returns>
        System.Threading.Tasks.Task<ApiResponse<Simulations>> GetSimulationsAsyncWithHttpInfo (string projectId = default(string), int? limit = 100, int? page = 1);
        /// <summary>
        /// Update information about the simulation setup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="simulationSpec">Simulation to be updated</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateSimulationAsync (string projectId = default(string), Guid? simulationId = default(Guid?), SimulationSpec simulationSpec = default(SimulationSpec));

        /// <summary>
        /// Update information about the simulation setup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="simulationSpec">Simulation to be updated</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateSimulationAsyncWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), SimulationSpec simulationSpec = default(SimulationSpec));
        /// <summary>
        /// Update materials in the simulation setup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="materialUpdateRequest">Material update operations</param>
        /// <param name="preview">If present and true, the update material operation(s) will not be persisted and the returned response will only be a preview of the simulation. (optional, default to false)</param>
        /// <returns>Task of MaterialUpdateResponse</returns>
        System.Threading.Tasks.Task<MaterialUpdateResponse> UpdateSimulationMaterialsAsync (string projectId = default(string), Guid? simulationId = default(Guid?), MaterialUpdateRequest materialUpdateRequest = default(MaterialUpdateRequest), bool? preview = false);

        /// <summary>
        /// Update materials in the simulation setup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="materialUpdateRequest">Material update operations</param>
        /// <param name="preview">If present and true, the update material operation(s) will not be persisted and the returned response will only be a preview of the simulation. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (MaterialUpdateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MaterialUpdateResponse>> UpdateSimulationMaterialsAsyncWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), MaterialUpdateRequest materialUpdateRequest = default(MaterialUpdateRequest), bool? preview = false);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISimulationsApi : ISimulationsApiSync, ISimulationsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SimulationsApi : ISimulationsApi
    {
        private SimScale.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SimulationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SimulationsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SimulationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SimulationsApi(String basePath)
        {
            this.Configuration = SimScale.Sdk.Client.Configuration.MergeConfigurations(
                SimScale.Sdk.Client.GlobalConfiguration.Instance,
                new SimScale.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new SimScale.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SimScale.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = SimScale.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SimulationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SimulationsApi(SimScale.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = SimScale.Sdk.Client.Configuration.MergeConfigurations(
                SimScale.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new SimScale.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SimScale.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = SimScale.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SimulationsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SimulationsApi(SimScale.Sdk.Client.ISynchronousClient client,SimScale.Sdk.Client.IAsynchronousClient asyncClient, SimScale.Sdk.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = SimScale.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public SimScale.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public SimScale.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SimScale.Sdk.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SimScale.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Check the simulation setup 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <returns>CheckResponse</returns>
        public CheckResponse CheckSimulationSetup (string projectId = default(string), Guid? simulationId = default(Guid?))
        {
             SimScale.Sdk.Client.ApiResponse<CheckResponse> localVarResponse = CheckSimulationSetupWithHttpInfo(projectId, simulationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check the simulation setup 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <returns>ApiResponse of CheckResponse</returns>
        public SimScale.Sdk.Client.ApiResponse< CheckResponse > CheckSimulationSetupWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling SimulationsApi->CheckSimulationSetup");

            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'simulationId' when calling SimulationsApi->CheckSimulationSetup");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("simulationId", SimScale.Sdk.Client.ClientUtils.ParameterToString(simulationId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< CheckResponse >("/projects/{projectId}/simulations/{simulationId}/check", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckSimulationSetup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check the simulation setup 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <returns>Task of CheckResponse</returns>
        public async System.Threading.Tasks.Task<CheckResponse> CheckSimulationSetupAsync (string projectId = default(string), Guid? simulationId = default(Guid?))
        {
             SimScale.Sdk.Client.ApiResponse<CheckResponse> localVarResponse = await CheckSimulationSetupAsyncWithHttpInfo(projectId, simulationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check the simulation setup 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <returns>Task of ApiResponse (CheckResponse)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<CheckResponse>> CheckSimulationSetupAsyncWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling SimulationsApi->CheckSimulationSetup");

            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'simulationId' when calling SimulationsApi->CheckSimulationSetup");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("simulationId", SimScale.Sdk.Client.ClientUtils.ParameterToString(simulationId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CheckResponse>("/projects/{projectId}/simulations/{simulationId}/check", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckSimulationSetup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a geometry primitive for reference within a Simulation spec. 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="geometryPrimitive">Geometry primitive specification.</param>
        /// <returns>GeometryPrimitiveResponse</returns>
        public GeometryPrimitiveResponse CreateGeometryPrimitive (string projectId = default(string), GeometryPrimitive geometryPrimitive = default(GeometryPrimitive))
        {
             SimScale.Sdk.Client.ApiResponse<GeometryPrimitiveResponse> localVarResponse = CreateGeometryPrimitiveWithHttpInfo(projectId, geometryPrimitive);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a geometry primitive for reference within a Simulation spec. 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="geometryPrimitive">Geometry primitive specification.</param>
        /// <returns>ApiResponse of GeometryPrimitiveResponse</returns>
        public SimScale.Sdk.Client.ApiResponse< GeometryPrimitiveResponse > CreateGeometryPrimitiveWithHttpInfo (string projectId = default(string), GeometryPrimitive geometryPrimitive = default(GeometryPrimitive))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling SimulationsApi->CreateGeometryPrimitive");

            // verify the required parameter 'geometryPrimitive' is set
            if (geometryPrimitive == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'geometryPrimitive' when calling SimulationsApi->CreateGeometryPrimitive");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = geometryPrimitive;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< GeometryPrimitiveResponse >("/projects/{projectId}/geometryprimitives", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGeometryPrimitive", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a geometry primitive for reference within a Simulation spec. 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="geometryPrimitive">Geometry primitive specification.</param>
        /// <returns>Task of GeometryPrimitiveResponse</returns>
        public async System.Threading.Tasks.Task<GeometryPrimitiveResponse> CreateGeometryPrimitiveAsync (string projectId = default(string), GeometryPrimitive geometryPrimitive = default(GeometryPrimitive))
        {
             SimScale.Sdk.Client.ApiResponse<GeometryPrimitiveResponse> localVarResponse = await CreateGeometryPrimitiveAsyncWithHttpInfo(projectId, geometryPrimitive);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a geometry primitive for reference within a Simulation spec. 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="geometryPrimitive">Geometry primitive specification.</param>
        /// <returns>Task of ApiResponse (GeometryPrimitiveResponse)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<GeometryPrimitiveResponse>> CreateGeometryPrimitiveAsyncWithHttpInfo (string projectId = default(string), GeometryPrimitive geometryPrimitive = default(GeometryPrimitive))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling SimulationsApi->CreateGeometryPrimitive");

            // verify the required parameter 'geometryPrimitive' is set
            if (geometryPrimitive == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'geometryPrimitive' when calling SimulationsApi->CreateGeometryPrimitive");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = geometryPrimitive;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GeometryPrimitiveResponse>("/projects/{projectId}/geometryprimitives", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGeometryPrimitive", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a simulation setup 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationSpec">Simulation to be created</param>
        /// <returns>Simulation</returns>
        public Simulation CreateSimulation (string projectId = default(string), SimulationSpec simulationSpec = default(SimulationSpec))
        {
             SimScale.Sdk.Client.ApiResponse<Simulation> localVarResponse = CreateSimulationWithHttpInfo(projectId, simulationSpec);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a simulation setup 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationSpec">Simulation to be created</param>
        /// <returns>ApiResponse of Simulation</returns>
        public SimScale.Sdk.Client.ApiResponse< Simulation > CreateSimulationWithHttpInfo (string projectId = default(string), SimulationSpec simulationSpec = default(SimulationSpec))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling SimulationsApi->CreateSimulation");

            // verify the required parameter 'simulationSpec' is set
            if (simulationSpec == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'simulationSpec' when calling SimulationsApi->CreateSimulation");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = simulationSpec;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Simulation >("/projects/{projectId}/simulations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSimulation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a simulation setup 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationSpec">Simulation to be created</param>
        /// <returns>Task of Simulation</returns>
        public async System.Threading.Tasks.Task<Simulation> CreateSimulationAsync (string projectId = default(string), SimulationSpec simulationSpec = default(SimulationSpec))
        {
             SimScale.Sdk.Client.ApiResponse<Simulation> localVarResponse = await CreateSimulationAsyncWithHttpInfo(projectId, simulationSpec);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a simulation setup 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationSpec">Simulation to be created</param>
        /// <returns>Task of ApiResponse (Simulation)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<Simulation>> CreateSimulationAsyncWithHttpInfo (string projectId = default(string), SimulationSpec simulationSpec = default(SimulationSpec))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling SimulationsApi->CreateSimulation");

            // verify the required parameter 'simulationSpec' is set
            if (simulationSpec == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'simulationSpec' when calling SimulationsApi->CreateSimulation");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = simulationSpec;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Simulation>("/projects/{projectId}/simulations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSimulation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Estimate the simulation setup 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <returns>Estimation</returns>
        public Estimation EstimateSimulationSetup (string projectId = default(string), Guid? simulationId = default(Guid?))
        {
             SimScale.Sdk.Client.ApiResponse<Estimation> localVarResponse = EstimateSimulationSetupWithHttpInfo(projectId, simulationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Estimate the simulation setup 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <returns>ApiResponse of Estimation</returns>
        public SimScale.Sdk.Client.ApiResponse< Estimation > EstimateSimulationSetupWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling SimulationsApi->EstimateSimulationSetup");

            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'simulationId' when calling SimulationsApi->EstimateSimulationSetup");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("simulationId", SimScale.Sdk.Client.ClientUtils.ParameterToString(simulationId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Estimation >("/projects/{projectId}/simulations/{simulationId}/estimate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EstimateSimulationSetup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Estimate the simulation setup 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <returns>Task of Estimation</returns>
        public async System.Threading.Tasks.Task<Estimation> EstimateSimulationSetupAsync (string projectId = default(string), Guid? simulationId = default(Guid?))
        {
             SimScale.Sdk.Client.ApiResponse<Estimation> localVarResponse = await EstimateSimulationSetupAsyncWithHttpInfo(projectId, simulationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Estimate the simulation setup 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <returns>Task of ApiResponse (Estimation)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<Estimation>> EstimateSimulationSetupAsyncWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling SimulationsApi->EstimateSimulationSetup");

            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'simulationId' when calling SimulationsApi->EstimateSimulationSetup");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("simulationId", SimScale.Sdk.Client.ClientUtils.ParameterToString(simulationId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Estimation>("/projects/{projectId}/simulations/{simulationId}/estimate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EstimateSimulationSetup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get information about the simulation setup 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="simulationSpecSchemaVersion">Version of the schema the simulation spec should conform to (optional, default to &quot;8.0&quot;)</param>
        /// <returns>SimulationSpec</returns>
        public SimulationSpec GetSimulation (string projectId = default(string), Guid? simulationId = default(Guid?), string simulationSpecSchemaVersion = "8.0")
        {
             SimScale.Sdk.Client.ApiResponse<SimulationSpec> localVarResponse = GetSimulationWithHttpInfo(projectId, simulationId, simulationSpecSchemaVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get information about the simulation setup 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="simulationSpecSchemaVersion">Version of the schema the simulation spec should conform to (optional, default to &quot;8.0&quot;)</param>
        /// <returns>ApiResponse of SimulationSpec</returns>
        public SimScale.Sdk.Client.ApiResponse< SimulationSpec > GetSimulationWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), string simulationSpecSchemaVersion = "8.0")
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling SimulationsApi->GetSimulation");

            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'simulationId' when calling SimulationsApi->GetSimulation");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("simulationId", SimScale.Sdk.Client.ClientUtils.ParameterToString(simulationId)); // path parameter
            if (simulationSpecSchemaVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "simulationSpecSchemaVersion", simulationSpecSchemaVersion));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< SimulationSpec >("/projects/{projectId}/simulations/{simulationId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSimulation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get information about the simulation setup 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="simulationSpecSchemaVersion">Version of the schema the simulation spec should conform to (optional, default to &quot;8.0&quot;)</param>
        /// <returns>Task of SimulationSpec</returns>
        public async System.Threading.Tasks.Task<SimulationSpec> GetSimulationAsync (string projectId = default(string), Guid? simulationId = default(Guid?), string simulationSpecSchemaVersion = "8.0")
        {
             SimScale.Sdk.Client.ApiResponse<SimulationSpec> localVarResponse = await GetSimulationAsyncWithHttpInfo(projectId, simulationId, simulationSpecSchemaVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get information about the simulation setup 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="simulationSpecSchemaVersion">Version of the schema the simulation spec should conform to (optional, default to &quot;8.0&quot;)</param>
        /// <returns>Task of ApiResponse (SimulationSpec)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<SimulationSpec>> GetSimulationAsyncWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), string simulationSpecSchemaVersion = "8.0")
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling SimulationsApi->GetSimulation");

            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'simulationId' when calling SimulationsApi->GetSimulation");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("simulationId", SimScale.Sdk.Client.ClientUtils.ParameterToString(simulationId)); // path parameter
            if (simulationSpecSchemaVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "simulationSpecSchemaVersion", simulationSpecSchemaVersion));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SimulationSpec>("/projects/{projectId}/simulations/{simulationId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSimulation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Python SDK code for the simulation 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="sdkVersion">Version of the SDK to generate code for (optional, default to &quot;latest&quot;)</param>
        /// <param name="sdkLanguage">Language of the SDK to generate code for. Only Python is currently supported. (optional, default to &quot;python&quot;)</param>
        /// <returns>string</returns>
        public string GetSimulationSdkCode (string projectId = default(string), Guid? simulationId = default(Guid?), string sdkVersion = "latest", string sdkLanguage = "python")
        {
             SimScale.Sdk.Client.ApiResponse<string> localVarResponse = GetSimulationSdkCodeWithHttpInfo(projectId, simulationId, sdkVersion, sdkLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Python SDK code for the simulation 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="sdkVersion">Version of the SDK to generate code for (optional, default to &quot;latest&quot;)</param>
        /// <param name="sdkLanguage">Language of the SDK to generate code for. Only Python is currently supported. (optional, default to &quot;python&quot;)</param>
        /// <returns>ApiResponse of string</returns>
        public SimScale.Sdk.Client.ApiResponse< string > GetSimulationSdkCodeWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), string sdkVersion = "latest", string sdkLanguage = "python")
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling SimulationsApi->GetSimulationSdkCode");

            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'simulationId' when calling SimulationsApi->GetSimulationSdkCode");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain;charset=UTF-8",
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("simulationId", SimScale.Sdk.Client.ClientUtils.ParameterToString(simulationId)); // path parameter
            if (sdkVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sdkVersion", sdkVersion));
            }
            if (sdkLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sdkLanguage", sdkLanguage));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< string >("/projects/{projectId}/simulations/{simulationId}/sdkcode", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSimulationSdkCode", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Python SDK code for the simulation 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="sdkVersion">Version of the SDK to generate code for (optional, default to &quot;latest&quot;)</param>
        /// <param name="sdkLanguage">Language of the SDK to generate code for. Only Python is currently supported. (optional, default to &quot;python&quot;)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetSimulationSdkCodeAsync (string projectId = default(string), Guid? simulationId = default(Guid?), string sdkVersion = "latest", string sdkLanguage = "python")
        {
             SimScale.Sdk.Client.ApiResponse<string> localVarResponse = await GetSimulationSdkCodeAsyncWithHttpInfo(projectId, simulationId, sdkVersion, sdkLanguage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Python SDK code for the simulation 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="sdkVersion">Version of the SDK to generate code for (optional, default to &quot;latest&quot;)</param>
        /// <param name="sdkLanguage">Language of the SDK to generate code for. Only Python is currently supported. (optional, default to &quot;python&quot;)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<string>> GetSimulationSdkCodeAsyncWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), string sdkVersion = "latest", string sdkLanguage = "python")
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling SimulationsApi->GetSimulationSdkCode");

            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'simulationId' when calling SimulationsApi->GetSimulationSdkCode");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain;charset=UTF-8",
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("simulationId", SimScale.Sdk.Client.ClientUtils.ParameterToString(simulationId)); // path parameter
            if (sdkVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sdkVersion", sdkVersion));
            }
            if (sdkLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sdkLanguage", sdkLanguage));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/projects/{projectId}/simulations/{simulationId}/sdkcode", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSimulationSdkCode", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List simulation setups within a project 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>Simulations</returns>
        public Simulations GetSimulations (string projectId = default(string), int? limit = 100, int? page = 1)
        {
             SimScale.Sdk.Client.ApiResponse<Simulations> localVarResponse = GetSimulationsWithHttpInfo(projectId, limit, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List simulation setups within a project 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>ApiResponse of Simulations</returns>
        public SimScale.Sdk.Client.ApiResponse< Simulations > GetSimulationsWithHttpInfo (string projectId = default(string), int? limit = 100, int? page = 1)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling SimulationsApi->GetSimulations");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Simulations >("/projects/{projectId}/simulations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSimulations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List simulation setups within a project 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>Task of Simulations</returns>
        public async System.Threading.Tasks.Task<Simulations> GetSimulationsAsync (string projectId = default(string), int? limit = 100, int? page = 1)
        {
             SimScale.Sdk.Client.ApiResponse<Simulations> localVarResponse = await GetSimulationsAsyncWithHttpInfo(projectId, limit, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List simulation setups within a project 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (Simulations)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<Simulations>> GetSimulationsAsyncWithHttpInfo (string projectId = default(string), int? limit = 100, int? page = 1)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling SimulationsApi->GetSimulations");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Simulations>("/projects/{projectId}/simulations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSimulations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update information about the simulation setup 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="simulationSpec">Simulation to be updated</param>
        /// <returns></returns>
        public void UpdateSimulation (string projectId = default(string), Guid? simulationId = default(Guid?), SimulationSpec simulationSpec = default(SimulationSpec))
        {
             UpdateSimulationWithHttpInfo(projectId, simulationId, simulationSpec);
        }

        /// <summary>
        /// Update information about the simulation setup 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="simulationSpec">Simulation to be updated</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public SimScale.Sdk.Client.ApiResponse<Object> UpdateSimulationWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), SimulationSpec simulationSpec = default(SimulationSpec))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling SimulationsApi->UpdateSimulation");

            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'simulationId' when calling SimulationsApi->UpdateSimulation");

            // verify the required parameter 'simulationSpec' is set
            if (simulationSpec == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'simulationSpec' when calling SimulationsApi->UpdateSimulation");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("simulationId", SimScale.Sdk.Client.ClientUtils.ParameterToString(simulationId)); // path parameter
            localVarRequestOptions.Data = simulationSpec;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/projects/{projectId}/simulations/{simulationId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSimulation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update information about the simulation setup 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="simulationSpec">Simulation to be updated</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateSimulationAsync (string projectId = default(string), Guid? simulationId = default(Guid?), SimulationSpec simulationSpec = default(SimulationSpec))
        {
             await UpdateSimulationAsyncWithHttpInfo(projectId, simulationId, simulationSpec);

        }

        /// <summary>
        /// Update information about the simulation setup 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="simulationSpec">Simulation to be updated</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<Object>> UpdateSimulationAsyncWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), SimulationSpec simulationSpec = default(SimulationSpec))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling SimulationsApi->UpdateSimulation");

            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'simulationId' when calling SimulationsApi->UpdateSimulation");

            // verify the required parameter 'simulationSpec' is set
            if (simulationSpec == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'simulationSpec' when calling SimulationsApi->UpdateSimulation");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("simulationId", SimScale.Sdk.Client.ClientUtils.ParameterToString(simulationId)); // path parameter
            localVarRequestOptions.Data = simulationSpec;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/projects/{projectId}/simulations/{simulationId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSimulation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update materials in the simulation setup 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="materialUpdateRequest">Material update operations</param>
        /// <param name="preview">If present and true, the update material operation(s) will not be persisted and the returned response will only be a preview of the simulation. (optional, default to false)</param>
        /// <returns>MaterialUpdateResponse</returns>
        public MaterialUpdateResponse UpdateSimulationMaterials (string projectId = default(string), Guid? simulationId = default(Guid?), MaterialUpdateRequest materialUpdateRequest = default(MaterialUpdateRequest), bool? preview = false)
        {
             SimScale.Sdk.Client.ApiResponse<MaterialUpdateResponse> localVarResponse = UpdateSimulationMaterialsWithHttpInfo(projectId, simulationId, materialUpdateRequest, preview);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update materials in the simulation setup 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="materialUpdateRequest">Material update operations</param>
        /// <param name="preview">If present and true, the update material operation(s) will not be persisted and the returned response will only be a preview of the simulation. (optional, default to false)</param>
        /// <returns>ApiResponse of MaterialUpdateResponse</returns>
        public SimScale.Sdk.Client.ApiResponse< MaterialUpdateResponse > UpdateSimulationMaterialsWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), MaterialUpdateRequest materialUpdateRequest = default(MaterialUpdateRequest), bool? preview = false)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling SimulationsApi->UpdateSimulationMaterials");

            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'simulationId' when calling SimulationsApi->UpdateSimulationMaterials");

            // verify the required parameter 'materialUpdateRequest' is set
            if (materialUpdateRequest == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'materialUpdateRequest' when calling SimulationsApi->UpdateSimulationMaterials");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("simulationId", SimScale.Sdk.Client.ClientUtils.ParameterToString(simulationId)); // path parameter
            if (preview != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "preview", preview));
            }
            localVarRequestOptions.Data = materialUpdateRequest;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< MaterialUpdateResponse >("/projects/{projectId}/simulations/{simulationId}/materials", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSimulationMaterials", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update materials in the simulation setup 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="materialUpdateRequest">Material update operations</param>
        /// <param name="preview">If present and true, the update material operation(s) will not be persisted and the returned response will only be a preview of the simulation. (optional, default to false)</param>
        /// <returns>Task of MaterialUpdateResponse</returns>
        public async System.Threading.Tasks.Task<MaterialUpdateResponse> UpdateSimulationMaterialsAsync (string projectId = default(string), Guid? simulationId = default(Guid?), MaterialUpdateRequest materialUpdateRequest = default(MaterialUpdateRequest), bool? preview = false)
        {
             SimScale.Sdk.Client.ApiResponse<MaterialUpdateResponse> localVarResponse = await UpdateSimulationMaterialsAsyncWithHttpInfo(projectId, simulationId, materialUpdateRequest, preview);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update materials in the simulation setup 
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The project ID</param>
        /// <param name="simulationId">The simulation ID</param>
        /// <param name="materialUpdateRequest">Material update operations</param>
        /// <param name="preview">If present and true, the update material operation(s) will not be persisted and the returned response will only be a preview of the simulation. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (MaterialUpdateResponse)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<MaterialUpdateResponse>> UpdateSimulationMaterialsAsyncWithHttpInfo (string projectId = default(string), Guid? simulationId = default(Guid?), MaterialUpdateRequest materialUpdateRequest = default(MaterialUpdateRequest), bool? preview = false)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling SimulationsApi->UpdateSimulationMaterials");

            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'simulationId' when calling SimulationsApi->UpdateSimulationMaterials");

            // verify the required parameter 'materialUpdateRequest' is set
            if (materialUpdateRequest == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'materialUpdateRequest' when calling SimulationsApi->UpdateSimulationMaterials");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("projectId", SimScale.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("simulationId", SimScale.Sdk.Client.ClientUtils.ParameterToString(simulationId)); // path parameter
            if (preview != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "preview", preview));
            }
            localVarRequestOptions.Data = materialUpdateRequest;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<MaterialUpdateResponse>("/projects/{projectId}/simulations/{simulationId}/materials", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSimulationMaterials", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
