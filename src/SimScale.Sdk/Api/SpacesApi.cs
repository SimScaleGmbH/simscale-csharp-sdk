/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using SimScale.Sdk.Client;
using SimScale.Sdk.Model;

namespace SimScale.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISpacesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Space Info
        /// </summary>
        /// <remarks>
        /// Get Space metadata, current user permissions, and view Space settings
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <returns>Space</returns>
        Space GetSpaceInfo (Guid? spaceId = default(Guid?));

        /// <summary>
        /// Get Space Info
        /// </summary>
        /// <remarks>
        /// Get Space metadata, current user permissions, and view Space settings
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <returns>ApiResponse of Space</returns>
        ApiResponse<Space> GetSpaceInfoWithHttpInfo (Guid? spaceId = default(Guid?));
        /// <summary>
        /// Get User Spaces
        /// </summary>
        /// <remarks>
        /// Get Info about the User Personal Space and all the Team Spaces the user has access to.
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Spaces</returns>
        Spaces GetUserSpaces ();

        /// <summary>
        /// Get User Spaces
        /// </summary>
        /// <remarks>
        /// Get Info about the User Personal Space and all the Team Spaces the user has access to.
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Spaces</returns>
        ApiResponse<Spaces> GetUserSpacesWithHttpInfo ();
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISpacesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Space Info
        /// </summary>
        /// <remarks>
        /// Get Space metadata, current user permissions, and view Space settings
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <returns>Task of Space</returns>
        System.Threading.Tasks.Task<Space> GetSpaceInfoAsync (Guid? spaceId = default(Guid?));

        /// <summary>
        /// Get Space Info
        /// </summary>
        /// <remarks>
        /// Get Space metadata, current user permissions, and view Space settings
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <returns>Task of ApiResponse (Space)</returns>
        System.Threading.Tasks.Task<ApiResponse<Space>> GetSpaceInfoAsyncWithHttpInfo (Guid? spaceId = default(Guid?));
        /// <summary>
        /// Get User Spaces
        /// </summary>
        /// <remarks>
        /// Get Info about the User Personal Space and all the Team Spaces the user has access to.
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Spaces</returns>
        System.Threading.Tasks.Task<Spaces> GetUserSpacesAsync ();

        /// <summary>
        /// Get User Spaces
        /// </summary>
        /// <remarks>
        /// Get Info about the User Personal Space and all the Team Spaces the user has access to.
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Spaces)</returns>
        System.Threading.Tasks.Task<ApiResponse<Spaces>> GetUserSpacesAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISpacesApi : ISpacesApiSync, ISpacesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SpacesApi : ISpacesApi
    {
        private SimScale.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SpacesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SpacesApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SpacesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SpacesApi(String basePath)
        {
            this.Configuration = SimScale.Sdk.Client.Configuration.MergeConfigurations(
                SimScale.Sdk.Client.GlobalConfiguration.Instance,
                new SimScale.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new SimScale.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SimScale.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = SimScale.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SpacesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SpacesApi(SimScale.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = SimScale.Sdk.Client.Configuration.MergeConfigurations(
                SimScale.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new SimScale.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SimScale.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = SimScale.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SpacesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SpacesApi(SimScale.Sdk.Client.ISynchronousClient client,SimScale.Sdk.Client.IAsynchronousClient asyncClient, SimScale.Sdk.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = SimScale.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public SimScale.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public SimScale.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SimScale.Sdk.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SimScale.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Space Info Get Space metadata, current user permissions, and view Space settings
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <returns>Space</returns>
        public Space GetSpaceInfo (Guid? spaceId = default(Guid?))
        {
             SimScale.Sdk.Client.ApiResponse<Space> localVarResponse = GetSpaceInfoWithHttpInfo(spaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Space Info Get Space metadata, current user permissions, and view Space settings
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <returns>ApiResponse of Space</returns>
        public SimScale.Sdk.Client.ApiResponse< Space > GetSpaceInfoWithHttpInfo (Guid? spaceId = default(Guid?))
        {
            // verify the required parameter 'spaceId' is set
            if (spaceId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'spaceId' when calling SpacesApi->GetSpaceInfo");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("spaceId", SimScale.Sdk.Client.ClientUtils.ParameterToString(spaceId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Space >("/spaces/{spaceId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSpaceInfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Space Info Get Space metadata, current user permissions, and view Space settings
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <returns>Task of Space</returns>
        public async System.Threading.Tasks.Task<Space> GetSpaceInfoAsync (Guid? spaceId = default(Guid?))
        {
             SimScale.Sdk.Client.ApiResponse<Space> localVarResponse = await GetSpaceInfoAsyncWithHttpInfo(spaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Space Info Get Space metadata, current user permissions, and view Space settings
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <returns>Task of ApiResponse (Space)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<Space>> GetSpaceInfoAsyncWithHttpInfo (Guid? spaceId = default(Guid?))
        {
            // verify the required parameter 'spaceId' is set
            if (spaceId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'spaceId' when calling SpacesApi->GetSpaceInfo");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("spaceId", SimScale.Sdk.Client.ClientUtils.ParameterToString(spaceId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Space>("/spaces/{spaceId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSpaceInfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User Spaces Get Info about the User Personal Space and all the Team Spaces the user has access to.
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Spaces</returns>
        public Spaces GetUserSpaces ()
        {
             SimScale.Sdk.Client.ApiResponse<Spaces> localVarResponse = GetUserSpacesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Spaces Get Info about the User Personal Space and all the Team Spaces the user has access to.
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Spaces</returns>
        public SimScale.Sdk.Client.ApiResponse< Spaces > GetUserSpacesWithHttpInfo ()
        {
            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Spaces >("/spaces", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserSpaces", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User Spaces Get Info about the User Personal Space and all the Team Spaces the user has access to.
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Spaces</returns>
        public async System.Threading.Tasks.Task<Spaces> GetUserSpacesAsync ()
        {
             SimScale.Sdk.Client.ApiResponse<Spaces> localVarResponse = await GetUserSpacesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get User Spaces Get Info about the User Personal Space and all the Team Spaces the user has access to.
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Spaces)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<Spaces>> GetUserSpacesAsyncWithHttpInfo ()
        {

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Spaces>("/spaces", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserSpaces", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
