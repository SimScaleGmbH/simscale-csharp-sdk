/* 
 * SimScale API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using SimScale.Sdk.Client;
using SimScale.Sdk.Model;

namespace SimScale.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFoldersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Folder
        /// </summary>
        /// <remarks>
        /// Create a new Folder. If &#x60;parentFolderId&#x60; is missing, the folder will be created at the root level of the Space. Folder name clashes are allowed.
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="folder"></param>
        /// <returns>Folder</returns>
        Folder CreateFolder (Guid? spaceId = default(Guid?), Folder folder = default(Folder));

        /// <summary>
        /// Create Folder
        /// </summary>
        /// <remarks>
        /// Create a new Folder. If &#x60;parentFolderId&#x60; is missing, the folder will be created at the root level of the Space. Folder name clashes are allowed.
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="folder"></param>
        /// <returns>ApiResponse of Folder</returns>
        ApiResponse<Folder> CreateFolderWithHttpInfo (Guid? spaceId = default(Guid?), Folder folder = default(Folder));
        /// <summary>
        /// Delete Folder
        /// </summary>
        /// <remarks>
        /// Delete a folder and all its content. The deletion is propagated to all child elements. If the total number of elements to delete is too large, this operation will be carried out asynchronously.
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="folderId"></param>
        /// <returns></returns>
        void DeleteFolder (Guid? spaceId = default(Guid?), Guid? folderId = default(Guid?));

        /// <summary>
        /// Delete Folder
        /// </summary>
        /// <remarks>
        /// Delete a folder and all its content. The deletion is propagated to all child elements. If the total number of elements to delete is too large, this operation will be carried out asynchronously.
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="folderId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFolderWithHttpInfo (Guid? spaceId = default(Guid?), Guid? folderId = default(Guid?));
        /// <summary>
        /// Get Folder Info
        /// </summary>
        /// <remarks>
        /// Get Folder metadata and current user permissions
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="folderId"></param>
        /// <returns>Folder</returns>
        Folder GetFolderInfo (Guid? spaceId = default(Guid?), Guid? folderId = default(Guid?));

        /// <summary>
        /// Get Folder Info
        /// </summary>
        /// <remarks>
        /// Get Folder metadata and current user permissions
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="folderId"></param>
        /// <returns>ApiResponse of Folder</returns>
        ApiResponse<Folder> GetFolderInfoWithHttpInfo (Guid? spaceId = default(Guid?), Guid? folderId = default(Guid?));
        /// <summary>
        /// List Folders in Folder
        /// </summary>
        /// <remarks>
        /// List folders located in a Folder. Filtering or search capabilities are not supported. This only returns the folders of the queried folder, without a recursive expansion to child folders
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="folderId">The folder ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <param name="sort">A field to sort by. The available fields are: &#39;name&#39;, &#39;createdAt&#39; and &#39;lastModifiedAt&#39;. To indicate sorting direction, the field must be prefixed with &#39;+&#39; (ascending) or &#39;-&#39; (descending), e.g. ?sort&#x3D;+name (optional, default to &quot;-lastModifiedAt&quot;)</param>
        /// <returns>Folders</returns>
        Folders ListFoldersInFolder (Guid? spaceId = default(Guid?), Guid? folderId = default(Guid?), int? limit = 100, int? page = 1, string sort = "-lastModifiedAt");

        /// <summary>
        /// List Folders in Folder
        /// </summary>
        /// <remarks>
        /// List folders located in a Folder. Filtering or search capabilities are not supported. This only returns the folders of the queried folder, without a recursive expansion to child folders
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="folderId">The folder ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <param name="sort">A field to sort by. The available fields are: &#39;name&#39;, &#39;createdAt&#39; and &#39;lastModifiedAt&#39;. To indicate sorting direction, the field must be prefixed with &#39;+&#39; (ascending) or &#39;-&#39; (descending), e.g. ?sort&#x3D;+name (optional, default to &quot;-lastModifiedAt&quot;)</param>
        /// <returns>ApiResponse of Folders</returns>
        ApiResponse<Folders> ListFoldersInFolderWithHttpInfo (Guid? spaceId = default(Guid?), Guid? folderId = default(Guid?), int? limit = 100, int? page = 1, string sort = "-lastModifiedAt");
        /// <summary>
        /// List Folders in Space root
        /// </summary>
        /// <remarks>
        /// List folders located at the root level of a Space. Filtering or search capabilities are not supported. This only returns the folders at the root level of a Space, without a recursive expansion to child folders.
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <param name="sort">A field to sort by. The available fields are: &#39;name&#39;, &#39;createdAt&#39; and &#39;lastModifiedAt&#39;. To indicate sorting direction, the field must be prefixed with &#39;+&#39; (ascending) or &#39;-&#39; (descending), e.g. ?sort&#x3D;+name (optional, default to &quot;-lastModifiedAt&quot;)</param>
        /// <returns>Folders</returns>
        Folders ListFoldersInSpaceRoot (Guid? spaceId = default(Guid?), int? limit = 100, int? page = 1, string sort = "-lastModifiedAt");

        /// <summary>
        /// List Folders in Space root
        /// </summary>
        /// <remarks>
        /// List folders located at the root level of a Space. Filtering or search capabilities are not supported. This only returns the folders at the root level of a Space, without a recursive expansion to child folders.
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <param name="sort">A field to sort by. The available fields are: &#39;name&#39;, &#39;createdAt&#39; and &#39;lastModifiedAt&#39;. To indicate sorting direction, the field must be prefixed with &#39;+&#39; (ascending) or &#39;-&#39; (descending), e.g. ?sort&#x3D;+name (optional, default to &quot;-lastModifiedAt&quot;)</param>
        /// <returns>ApiResponse of Folders</returns>
        ApiResponse<Folders> ListFoldersInSpaceRootWithHttpInfo (Guid? spaceId = default(Guid?), int? limit = 100, int? page = 1, string sort = "-lastModifiedAt");
        /// <summary>
        /// List Projects in Folder
        /// </summary>
        /// <remarks>
        /// List projects located in a Folder. Filtering or search capabilities are not supported. This only returns the projects of the queried folder, without a recursive expansion to child folders.
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="folderId">The folder ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <param name="sort">A field to sort by. The available fields are: &#39;name&#39;, &#39;createdAt&#39; and &#39;lastModifiedAt&#39;. To indicate sorting direction, the field must be prefixed with &#39;+&#39; (ascending) or &#39;-&#39; (descending), e.g. ?sort&#x3D;+name (optional, default to &quot;-lastModifiedAt&quot;)</param>
        /// <returns>Projects</returns>
        Projects ListProjectsInFolder (Guid? spaceId = default(Guid?), Guid? folderId = default(Guid?), int? limit = 100, int? page = 1, string sort = "-lastModifiedAt");

        /// <summary>
        /// List Projects in Folder
        /// </summary>
        /// <remarks>
        /// List projects located in a Folder. Filtering or search capabilities are not supported. This only returns the projects of the queried folder, without a recursive expansion to child folders.
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="folderId">The folder ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <param name="sort">A field to sort by. The available fields are: &#39;name&#39;, &#39;createdAt&#39; and &#39;lastModifiedAt&#39;. To indicate sorting direction, the field must be prefixed with &#39;+&#39; (ascending) or &#39;-&#39; (descending), e.g. ?sort&#x3D;+name (optional, default to &quot;-lastModifiedAt&quot;)</param>
        /// <returns>ApiResponse of Projects</returns>
        ApiResponse<Projects> ListProjectsInFolderWithHttpInfo (Guid? spaceId = default(Guid?), Guid? folderId = default(Guid?), int? limit = 100, int? page = 1, string sort = "-lastModifiedAt");
        /// <summary>
        /// List Projects in Space root
        /// </summary>
        /// <remarks>
        /// List projects located at the root level of a Space. Filtering or search capabilities are not supported. This only returns the projects at the root level of a Space, without a recursive expansion to child folders.
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <param name="sort">A field to sort by. The available fields are: &#39;name&#39;, &#39;createdAt&#39; and &#39;lastModifiedAt&#39;. To indicate sorting direction, the field must be prefixed with &#39;+&#39; (ascending) or &#39;-&#39; (descending), e.g. ?sort&#x3D;+name (optional, default to &quot;-lastModifiedAt&quot;)</param>
        /// <returns>Projects</returns>
        Projects ListProjectsInSpaceRoot (Guid? spaceId = default(Guid?), int? limit = 100, int? page = 1, string sort = "-lastModifiedAt");

        /// <summary>
        /// List Projects in Space root
        /// </summary>
        /// <remarks>
        /// List projects located at the root level of a Space. Filtering or search capabilities are not supported. This only returns the projects at the root level of a Space, without a recursive expansion to child folders.
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <param name="sort">A field to sort by. The available fields are: &#39;name&#39;, &#39;createdAt&#39; and &#39;lastModifiedAt&#39;. To indicate sorting direction, the field must be prefixed with &#39;+&#39; (ascending) or &#39;-&#39; (descending), e.g. ?sort&#x3D;+name (optional, default to &quot;-lastModifiedAt&quot;)</param>
        /// <returns>ApiResponse of Projects</returns>
        ApiResponse<Projects> ListProjectsInSpaceRootWithHttpInfo (Guid? spaceId = default(Guid?), int? limit = 100, int? page = 1, string sort = "-lastModifiedAt");
        /// <summary>
        /// Move Content from Folder
        /// </summary>
        /// <remarks>
        /// Move content from this folder. Several resources can be moved with the same request. All resources must be moved to the same target location. Folders cannot be moved to a different Space. Projects can only be moved to a Personal Space if the Space owner and the project owner match.
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="folderId">The folder ID</param>
        /// <param name="moveContentRequest"></param>
        /// <returns></returns>
        void MoveContentFromFolder (Guid? spaceId = default(Guid?), Guid? folderId = default(Guid?), MoveContentRequest moveContentRequest = default(MoveContentRequest));

        /// <summary>
        /// Move Content from Folder
        /// </summary>
        /// <remarks>
        /// Move content from this folder. Several resources can be moved with the same request. All resources must be moved to the same target location. Folders cannot be moved to a different Space. Projects can only be moved to a Personal Space if the Space owner and the project owner match.
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="folderId">The folder ID</param>
        /// <param name="moveContentRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MoveContentFromFolderWithHttpInfo (Guid? spaceId = default(Guid?), Guid? folderId = default(Guid?), MoveContentRequest moveContentRequest = default(MoveContentRequest));
        /// <summary>
        /// Move Content from Space root
        /// </summary>
        /// <remarks>
        /// Move content located at the root level of a Space. Several resources can be moved with the same request. All resources must be moved to the same target location. Folders cannot be moved to a different Space. Projects can only be moved to a Personal Space if the Space owner and the project owner match.
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="moveContentRequest"></param>
        /// <returns></returns>
        void MoveContentFromSpaceRoot (Guid? spaceId = default(Guid?), MoveContentRequest moveContentRequest = default(MoveContentRequest));

        /// <summary>
        /// Move Content from Space root
        /// </summary>
        /// <remarks>
        /// Move content located at the root level of a Space. Several resources can be moved with the same request. All resources must be moved to the same target location. Folders cannot be moved to a different Space. Projects can only be moved to a Personal Space if the Space owner and the project owner match.
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="moveContentRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MoveContentFromSpaceRootWithHttpInfo (Guid? spaceId = default(Guid?), MoveContentRequest moveContentRequest = default(MoveContentRequest));
        /// <summary>
        /// Update Folder
        /// </summary>
        /// <remarks>
        /// Update Folder metadata
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="folderId"></param>
        /// <param name="folder"></param>
        /// <returns>Folder</returns>
        Folder UpdateFolder (Guid? spaceId = default(Guid?), Guid? folderId = default(Guid?), Folder folder = default(Folder));

        /// <summary>
        /// Update Folder
        /// </summary>
        /// <remarks>
        /// Update Folder metadata
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="folderId"></param>
        /// <param name="folder"></param>
        /// <returns>ApiResponse of Folder</returns>
        ApiResponse<Folder> UpdateFolderWithHttpInfo (Guid? spaceId = default(Guid?), Guid? folderId = default(Guid?), Folder folder = default(Folder));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFoldersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Folder
        /// </summary>
        /// <remarks>
        /// Create a new Folder. If &#x60;parentFolderId&#x60; is missing, the folder will be created at the root level of the Space. Folder name clashes are allowed.
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="folder"></param>
        /// <returns>Task of Folder</returns>
        System.Threading.Tasks.Task<Folder> CreateFolderAsync (Guid? spaceId = default(Guid?), Folder folder = default(Folder));

        /// <summary>
        /// Create Folder
        /// </summary>
        /// <remarks>
        /// Create a new Folder. If &#x60;parentFolderId&#x60; is missing, the folder will be created at the root level of the Space. Folder name clashes are allowed.
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="folder"></param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        System.Threading.Tasks.Task<ApiResponse<Folder>> CreateFolderAsyncWithHttpInfo (Guid? spaceId = default(Guid?), Folder folder = default(Folder));
        /// <summary>
        /// Delete Folder
        /// </summary>
        /// <remarks>
        /// Delete a folder and all its content. The deletion is propagated to all child elements. If the total number of elements to delete is too large, this operation will be carried out asynchronously.
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="folderId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFolderAsync (Guid? spaceId = default(Guid?), Guid? folderId = default(Guid?));

        /// <summary>
        /// Delete Folder
        /// </summary>
        /// <remarks>
        /// Delete a folder and all its content. The deletion is propagated to all child elements. If the total number of elements to delete is too large, this operation will be carried out asynchronously.
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="folderId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFolderAsyncWithHttpInfo (Guid? spaceId = default(Guid?), Guid? folderId = default(Guid?));
        /// <summary>
        /// Get Folder Info
        /// </summary>
        /// <remarks>
        /// Get Folder metadata and current user permissions
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="folderId"></param>
        /// <returns>Task of Folder</returns>
        System.Threading.Tasks.Task<Folder> GetFolderInfoAsync (Guid? spaceId = default(Guid?), Guid? folderId = default(Guid?));

        /// <summary>
        /// Get Folder Info
        /// </summary>
        /// <remarks>
        /// Get Folder metadata and current user permissions
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="folderId"></param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        System.Threading.Tasks.Task<ApiResponse<Folder>> GetFolderInfoAsyncWithHttpInfo (Guid? spaceId = default(Guid?), Guid? folderId = default(Guid?));
        /// <summary>
        /// List Folders in Folder
        /// </summary>
        /// <remarks>
        /// List folders located in a Folder. Filtering or search capabilities are not supported. This only returns the folders of the queried folder, without a recursive expansion to child folders
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="folderId">The folder ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <param name="sort">A field to sort by. The available fields are: &#39;name&#39;, &#39;createdAt&#39; and &#39;lastModifiedAt&#39;. To indicate sorting direction, the field must be prefixed with &#39;+&#39; (ascending) or &#39;-&#39; (descending), e.g. ?sort&#x3D;+name (optional, default to &quot;-lastModifiedAt&quot;)</param>
        /// <returns>Task of Folders</returns>
        System.Threading.Tasks.Task<Folders> ListFoldersInFolderAsync (Guid? spaceId = default(Guid?), Guid? folderId = default(Guid?), int? limit = 100, int? page = 1, string sort = "-lastModifiedAt");

        /// <summary>
        /// List Folders in Folder
        /// </summary>
        /// <remarks>
        /// List folders located in a Folder. Filtering or search capabilities are not supported. This only returns the folders of the queried folder, without a recursive expansion to child folders
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="folderId">The folder ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <param name="sort">A field to sort by. The available fields are: &#39;name&#39;, &#39;createdAt&#39; and &#39;lastModifiedAt&#39;. To indicate sorting direction, the field must be prefixed with &#39;+&#39; (ascending) or &#39;-&#39; (descending), e.g. ?sort&#x3D;+name (optional, default to &quot;-lastModifiedAt&quot;)</param>
        /// <returns>Task of ApiResponse (Folders)</returns>
        System.Threading.Tasks.Task<ApiResponse<Folders>> ListFoldersInFolderAsyncWithHttpInfo (Guid? spaceId = default(Guid?), Guid? folderId = default(Guid?), int? limit = 100, int? page = 1, string sort = "-lastModifiedAt");
        /// <summary>
        /// List Folders in Space root
        /// </summary>
        /// <remarks>
        /// List folders located at the root level of a Space. Filtering or search capabilities are not supported. This only returns the folders at the root level of a Space, without a recursive expansion to child folders.
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <param name="sort">A field to sort by. The available fields are: &#39;name&#39;, &#39;createdAt&#39; and &#39;lastModifiedAt&#39;. To indicate sorting direction, the field must be prefixed with &#39;+&#39; (ascending) or &#39;-&#39; (descending), e.g. ?sort&#x3D;+name (optional, default to &quot;-lastModifiedAt&quot;)</param>
        /// <returns>Task of Folders</returns>
        System.Threading.Tasks.Task<Folders> ListFoldersInSpaceRootAsync (Guid? spaceId = default(Guid?), int? limit = 100, int? page = 1, string sort = "-lastModifiedAt");

        /// <summary>
        /// List Folders in Space root
        /// </summary>
        /// <remarks>
        /// List folders located at the root level of a Space. Filtering or search capabilities are not supported. This only returns the folders at the root level of a Space, without a recursive expansion to child folders.
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <param name="sort">A field to sort by. The available fields are: &#39;name&#39;, &#39;createdAt&#39; and &#39;lastModifiedAt&#39;. To indicate sorting direction, the field must be prefixed with &#39;+&#39; (ascending) or &#39;-&#39; (descending), e.g. ?sort&#x3D;+name (optional, default to &quot;-lastModifiedAt&quot;)</param>
        /// <returns>Task of ApiResponse (Folders)</returns>
        System.Threading.Tasks.Task<ApiResponse<Folders>> ListFoldersInSpaceRootAsyncWithHttpInfo (Guid? spaceId = default(Guid?), int? limit = 100, int? page = 1, string sort = "-lastModifiedAt");
        /// <summary>
        /// List Projects in Folder
        /// </summary>
        /// <remarks>
        /// List projects located in a Folder. Filtering or search capabilities are not supported. This only returns the projects of the queried folder, without a recursive expansion to child folders.
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="folderId">The folder ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <param name="sort">A field to sort by. The available fields are: &#39;name&#39;, &#39;createdAt&#39; and &#39;lastModifiedAt&#39;. To indicate sorting direction, the field must be prefixed with &#39;+&#39; (ascending) or &#39;-&#39; (descending), e.g. ?sort&#x3D;+name (optional, default to &quot;-lastModifiedAt&quot;)</param>
        /// <returns>Task of Projects</returns>
        System.Threading.Tasks.Task<Projects> ListProjectsInFolderAsync (Guid? spaceId = default(Guid?), Guid? folderId = default(Guid?), int? limit = 100, int? page = 1, string sort = "-lastModifiedAt");

        /// <summary>
        /// List Projects in Folder
        /// </summary>
        /// <remarks>
        /// List projects located in a Folder. Filtering or search capabilities are not supported. This only returns the projects of the queried folder, without a recursive expansion to child folders.
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="folderId">The folder ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <param name="sort">A field to sort by. The available fields are: &#39;name&#39;, &#39;createdAt&#39; and &#39;lastModifiedAt&#39;. To indicate sorting direction, the field must be prefixed with &#39;+&#39; (ascending) or &#39;-&#39; (descending), e.g. ?sort&#x3D;+name (optional, default to &quot;-lastModifiedAt&quot;)</param>
        /// <returns>Task of ApiResponse (Projects)</returns>
        System.Threading.Tasks.Task<ApiResponse<Projects>> ListProjectsInFolderAsyncWithHttpInfo (Guid? spaceId = default(Guid?), Guid? folderId = default(Guid?), int? limit = 100, int? page = 1, string sort = "-lastModifiedAt");
        /// <summary>
        /// List Projects in Space root
        /// </summary>
        /// <remarks>
        /// List projects located at the root level of a Space. Filtering or search capabilities are not supported. This only returns the projects at the root level of a Space, without a recursive expansion to child folders.
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <param name="sort">A field to sort by. The available fields are: &#39;name&#39;, &#39;createdAt&#39; and &#39;lastModifiedAt&#39;. To indicate sorting direction, the field must be prefixed with &#39;+&#39; (ascending) or &#39;-&#39; (descending), e.g. ?sort&#x3D;+name (optional, default to &quot;-lastModifiedAt&quot;)</param>
        /// <returns>Task of Projects</returns>
        System.Threading.Tasks.Task<Projects> ListProjectsInSpaceRootAsync (Guid? spaceId = default(Guid?), int? limit = 100, int? page = 1, string sort = "-lastModifiedAt");

        /// <summary>
        /// List Projects in Space root
        /// </summary>
        /// <remarks>
        /// List projects located at the root level of a Space. Filtering or search capabilities are not supported. This only returns the projects at the root level of a Space, without a recursive expansion to child folders.
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <param name="sort">A field to sort by. The available fields are: &#39;name&#39;, &#39;createdAt&#39; and &#39;lastModifiedAt&#39;. To indicate sorting direction, the field must be prefixed with &#39;+&#39; (ascending) or &#39;-&#39; (descending), e.g. ?sort&#x3D;+name (optional, default to &quot;-lastModifiedAt&quot;)</param>
        /// <returns>Task of ApiResponse (Projects)</returns>
        System.Threading.Tasks.Task<ApiResponse<Projects>> ListProjectsInSpaceRootAsyncWithHttpInfo (Guid? spaceId = default(Guid?), int? limit = 100, int? page = 1, string sort = "-lastModifiedAt");
        /// <summary>
        /// Move Content from Folder
        /// </summary>
        /// <remarks>
        /// Move content from this folder. Several resources can be moved with the same request. All resources must be moved to the same target location. Folders cannot be moved to a different Space. Projects can only be moved to a Personal Space if the Space owner and the project owner match.
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="folderId">The folder ID</param>
        /// <param name="moveContentRequest"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MoveContentFromFolderAsync (Guid? spaceId = default(Guid?), Guid? folderId = default(Guid?), MoveContentRequest moveContentRequest = default(MoveContentRequest));

        /// <summary>
        /// Move Content from Folder
        /// </summary>
        /// <remarks>
        /// Move content from this folder. Several resources can be moved with the same request. All resources must be moved to the same target location. Folders cannot be moved to a different Space. Projects can only be moved to a Personal Space if the Space owner and the project owner match.
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="folderId">The folder ID</param>
        /// <param name="moveContentRequest"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MoveContentFromFolderAsyncWithHttpInfo (Guid? spaceId = default(Guid?), Guid? folderId = default(Guid?), MoveContentRequest moveContentRequest = default(MoveContentRequest));
        /// <summary>
        /// Move Content from Space root
        /// </summary>
        /// <remarks>
        /// Move content located at the root level of a Space. Several resources can be moved with the same request. All resources must be moved to the same target location. Folders cannot be moved to a different Space. Projects can only be moved to a Personal Space if the Space owner and the project owner match.
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="moveContentRequest"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MoveContentFromSpaceRootAsync (Guid? spaceId = default(Guid?), MoveContentRequest moveContentRequest = default(MoveContentRequest));

        /// <summary>
        /// Move Content from Space root
        /// </summary>
        /// <remarks>
        /// Move content located at the root level of a Space. Several resources can be moved with the same request. All resources must be moved to the same target location. Folders cannot be moved to a different Space. Projects can only be moved to a Personal Space if the Space owner and the project owner match.
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="moveContentRequest"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MoveContentFromSpaceRootAsyncWithHttpInfo (Guid? spaceId = default(Guid?), MoveContentRequest moveContentRequest = default(MoveContentRequest));
        /// <summary>
        /// Update Folder
        /// </summary>
        /// <remarks>
        /// Update Folder metadata
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="folderId"></param>
        /// <param name="folder"></param>
        /// <returns>Task of Folder</returns>
        System.Threading.Tasks.Task<Folder> UpdateFolderAsync (Guid? spaceId = default(Guid?), Guid? folderId = default(Guid?), Folder folder = default(Folder));

        /// <summary>
        /// Update Folder
        /// </summary>
        /// <remarks>
        /// Update Folder metadata
        /// </remarks>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="folderId"></param>
        /// <param name="folder"></param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        System.Threading.Tasks.Task<ApiResponse<Folder>> UpdateFolderAsyncWithHttpInfo (Guid? spaceId = default(Guid?), Guid? folderId = default(Guid?), Folder folder = default(Folder));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFoldersApi : IFoldersApiSync, IFoldersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FoldersApi : IFoldersApi
    {
        private SimScale.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FoldersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FoldersApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FoldersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FoldersApi(String basePath)
        {
            this.Configuration = SimScale.Sdk.Client.Configuration.MergeConfigurations(
                SimScale.Sdk.Client.GlobalConfiguration.Instance,
                new SimScale.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new SimScale.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SimScale.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = SimScale.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FoldersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FoldersApi(SimScale.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = SimScale.Sdk.Client.Configuration.MergeConfigurations(
                SimScale.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new SimScale.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SimScale.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = SimScale.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FoldersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FoldersApi(SimScale.Sdk.Client.ISynchronousClient client,SimScale.Sdk.Client.IAsynchronousClient asyncClient, SimScale.Sdk.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = SimScale.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public SimScale.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public SimScale.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SimScale.Sdk.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SimScale.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Folder Create a new Folder. If &#x60;parentFolderId&#x60; is missing, the folder will be created at the root level of the Space. Folder name clashes are allowed.
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="folder"></param>
        /// <returns>Folder</returns>
        public Folder CreateFolder (Guid? spaceId = default(Guid?), Folder folder = default(Folder))
        {
             SimScale.Sdk.Client.ApiResponse<Folder> localVarResponse = CreateFolderWithHttpInfo(spaceId, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Folder Create a new Folder. If &#x60;parentFolderId&#x60; is missing, the folder will be created at the root level of the Space. Folder name clashes are allowed.
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="folder"></param>
        /// <returns>ApiResponse of Folder</returns>
        public SimScale.Sdk.Client.ApiResponse< Folder > CreateFolderWithHttpInfo (Guid? spaceId = default(Guid?), Folder folder = default(Folder))
        {
            // verify the required parameter 'spaceId' is set
            if (spaceId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'spaceId' when calling FoldersApi->CreateFolder");

            // verify the required parameter 'folder' is set
            if (folder == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'folder' when calling FoldersApi->CreateFolder");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("spaceId", SimScale.Sdk.Client.ClientUtils.ParameterToString(spaceId)); // path parameter
            localVarRequestOptions.Data = folder;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Folder >("/spaces/{spaceId}/folders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFolder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Folder Create a new Folder. If &#x60;parentFolderId&#x60; is missing, the folder will be created at the root level of the Space. Folder name clashes are allowed.
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="folder"></param>
        /// <returns>Task of Folder</returns>
        public async System.Threading.Tasks.Task<Folder> CreateFolderAsync (Guid? spaceId = default(Guid?), Folder folder = default(Folder))
        {
             SimScale.Sdk.Client.ApiResponse<Folder> localVarResponse = await CreateFolderAsyncWithHttpInfo(spaceId, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Folder Create a new Folder. If &#x60;parentFolderId&#x60; is missing, the folder will be created at the root level of the Space. Folder name clashes are allowed.
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="folder"></param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<Folder>> CreateFolderAsyncWithHttpInfo (Guid? spaceId = default(Guid?), Folder folder = default(Folder))
        {
            // verify the required parameter 'spaceId' is set
            if (spaceId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'spaceId' when calling FoldersApi->CreateFolder");

            // verify the required parameter 'folder' is set
            if (folder == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'folder' when calling FoldersApi->CreateFolder");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("spaceId", SimScale.Sdk.Client.ClientUtils.ParameterToString(spaceId)); // path parameter
            localVarRequestOptions.Data = folder;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Folder>("/spaces/{spaceId}/folders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFolder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Folder Delete a folder and all its content. The deletion is propagated to all child elements. If the total number of elements to delete is too large, this operation will be carried out asynchronously.
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="folderId"></param>
        /// <returns></returns>
        public void DeleteFolder (Guid? spaceId = default(Guid?), Guid? folderId = default(Guid?))
        {
             DeleteFolderWithHttpInfo(spaceId, folderId);
        }

        /// <summary>
        /// Delete Folder Delete a folder and all its content. The deletion is propagated to all child elements. If the total number of elements to delete is too large, this operation will be carried out asynchronously.
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="folderId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public SimScale.Sdk.Client.ApiResponse<Object> DeleteFolderWithHttpInfo (Guid? spaceId = default(Guid?), Guid? folderId = default(Guid?))
        {
            // verify the required parameter 'spaceId' is set
            if (spaceId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'spaceId' when calling FoldersApi->DeleteFolder");

            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'folderId' when calling FoldersApi->DeleteFolder");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("spaceId", SimScale.Sdk.Client.ClientUtils.ParameterToString(spaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("folderId", SimScale.Sdk.Client.ClientUtils.ParameterToString(folderId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/spaces/{spaceId}/folders/{folderId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFolder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Folder Delete a folder and all its content. The deletion is propagated to all child elements. If the total number of elements to delete is too large, this operation will be carried out asynchronously.
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="folderId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFolderAsync (Guid? spaceId = default(Guid?), Guid? folderId = default(Guid?))
        {
             await DeleteFolderAsyncWithHttpInfo(spaceId, folderId);

        }

        /// <summary>
        /// Delete Folder Delete a folder and all its content. The deletion is propagated to all child elements. If the total number of elements to delete is too large, this operation will be carried out asynchronously.
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="folderId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<Object>> DeleteFolderAsyncWithHttpInfo (Guid? spaceId = default(Guid?), Guid? folderId = default(Guid?))
        {
            // verify the required parameter 'spaceId' is set
            if (spaceId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'spaceId' when calling FoldersApi->DeleteFolder");

            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'folderId' when calling FoldersApi->DeleteFolder");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("spaceId", SimScale.Sdk.Client.ClientUtils.ParameterToString(spaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("folderId", SimScale.Sdk.Client.ClientUtils.ParameterToString(folderId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/spaces/{spaceId}/folders/{folderId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFolder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Folder Info Get Folder metadata and current user permissions
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="folderId"></param>
        /// <returns>Folder</returns>
        public Folder GetFolderInfo (Guid? spaceId = default(Guid?), Guid? folderId = default(Guid?))
        {
             SimScale.Sdk.Client.ApiResponse<Folder> localVarResponse = GetFolderInfoWithHttpInfo(spaceId, folderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Folder Info Get Folder metadata and current user permissions
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="folderId"></param>
        /// <returns>ApiResponse of Folder</returns>
        public SimScale.Sdk.Client.ApiResponse< Folder > GetFolderInfoWithHttpInfo (Guid? spaceId = default(Guid?), Guid? folderId = default(Guid?))
        {
            // verify the required parameter 'spaceId' is set
            if (spaceId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'spaceId' when calling FoldersApi->GetFolderInfo");

            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'folderId' when calling FoldersApi->GetFolderInfo");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("spaceId", SimScale.Sdk.Client.ClientUtils.ParameterToString(spaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("folderId", SimScale.Sdk.Client.ClientUtils.ParameterToString(folderId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Folder >("/spaces/{spaceId}/folders/{folderId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFolderInfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Folder Info Get Folder metadata and current user permissions
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="folderId"></param>
        /// <returns>Task of Folder</returns>
        public async System.Threading.Tasks.Task<Folder> GetFolderInfoAsync (Guid? spaceId = default(Guid?), Guid? folderId = default(Guid?))
        {
             SimScale.Sdk.Client.ApiResponse<Folder> localVarResponse = await GetFolderInfoAsyncWithHttpInfo(spaceId, folderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Folder Info Get Folder metadata and current user permissions
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="folderId"></param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<Folder>> GetFolderInfoAsyncWithHttpInfo (Guid? spaceId = default(Guid?), Guid? folderId = default(Guid?))
        {
            // verify the required parameter 'spaceId' is set
            if (spaceId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'spaceId' when calling FoldersApi->GetFolderInfo");

            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'folderId' when calling FoldersApi->GetFolderInfo");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("spaceId", SimScale.Sdk.Client.ClientUtils.ParameterToString(spaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("folderId", SimScale.Sdk.Client.ClientUtils.ParameterToString(folderId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Folder>("/spaces/{spaceId}/folders/{folderId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFolderInfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Folders in Folder List folders located in a Folder. Filtering or search capabilities are not supported. This only returns the folders of the queried folder, without a recursive expansion to child folders
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="folderId">The folder ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <param name="sort">A field to sort by. The available fields are: &#39;name&#39;, &#39;createdAt&#39; and &#39;lastModifiedAt&#39;. To indicate sorting direction, the field must be prefixed with &#39;+&#39; (ascending) or &#39;-&#39; (descending), e.g. ?sort&#x3D;+name (optional, default to &quot;-lastModifiedAt&quot;)</param>
        /// <returns>Folders</returns>
        public Folders ListFoldersInFolder (Guid? spaceId = default(Guid?), Guid? folderId = default(Guid?), int? limit = 100, int? page = 1, string sort = "-lastModifiedAt")
        {
             SimScale.Sdk.Client.ApiResponse<Folders> localVarResponse = ListFoldersInFolderWithHttpInfo(spaceId, folderId, limit, page, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Folders in Folder List folders located in a Folder. Filtering or search capabilities are not supported. This only returns the folders of the queried folder, without a recursive expansion to child folders
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="folderId">The folder ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <param name="sort">A field to sort by. The available fields are: &#39;name&#39;, &#39;createdAt&#39; and &#39;lastModifiedAt&#39;. To indicate sorting direction, the field must be prefixed with &#39;+&#39; (ascending) or &#39;-&#39; (descending), e.g. ?sort&#x3D;+name (optional, default to &quot;-lastModifiedAt&quot;)</param>
        /// <returns>ApiResponse of Folders</returns>
        public SimScale.Sdk.Client.ApiResponse< Folders > ListFoldersInFolderWithHttpInfo (Guid? spaceId = default(Guid?), Guid? folderId = default(Guid?), int? limit = 100, int? page = 1, string sort = "-lastModifiedAt")
        {
            // verify the required parameter 'spaceId' is set
            if (spaceId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'spaceId' when calling FoldersApi->ListFoldersInFolder");

            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'folderId' when calling FoldersApi->ListFoldersInFolder");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("spaceId", SimScale.Sdk.Client.ClientUtils.ParameterToString(spaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("folderId", SimScale.Sdk.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Folders >("/spaces/{spaceId}/folders/{folderId}/content/folders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListFoldersInFolder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Folders in Folder List folders located in a Folder. Filtering or search capabilities are not supported. This only returns the folders of the queried folder, without a recursive expansion to child folders
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="folderId">The folder ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <param name="sort">A field to sort by. The available fields are: &#39;name&#39;, &#39;createdAt&#39; and &#39;lastModifiedAt&#39;. To indicate sorting direction, the field must be prefixed with &#39;+&#39; (ascending) or &#39;-&#39; (descending), e.g. ?sort&#x3D;+name (optional, default to &quot;-lastModifiedAt&quot;)</param>
        /// <returns>Task of Folders</returns>
        public async System.Threading.Tasks.Task<Folders> ListFoldersInFolderAsync (Guid? spaceId = default(Guid?), Guid? folderId = default(Guid?), int? limit = 100, int? page = 1, string sort = "-lastModifiedAt")
        {
             SimScale.Sdk.Client.ApiResponse<Folders> localVarResponse = await ListFoldersInFolderAsyncWithHttpInfo(spaceId, folderId, limit, page, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Folders in Folder List folders located in a Folder. Filtering or search capabilities are not supported. This only returns the folders of the queried folder, without a recursive expansion to child folders
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="folderId">The folder ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <param name="sort">A field to sort by. The available fields are: &#39;name&#39;, &#39;createdAt&#39; and &#39;lastModifiedAt&#39;. To indicate sorting direction, the field must be prefixed with &#39;+&#39; (ascending) or &#39;-&#39; (descending), e.g. ?sort&#x3D;+name (optional, default to &quot;-lastModifiedAt&quot;)</param>
        /// <returns>Task of ApiResponse (Folders)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<Folders>> ListFoldersInFolderAsyncWithHttpInfo (Guid? spaceId = default(Guid?), Guid? folderId = default(Guid?), int? limit = 100, int? page = 1, string sort = "-lastModifiedAt")
        {
            // verify the required parameter 'spaceId' is set
            if (spaceId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'spaceId' when calling FoldersApi->ListFoldersInFolder");

            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'folderId' when calling FoldersApi->ListFoldersInFolder");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("spaceId", SimScale.Sdk.Client.ClientUtils.ParameterToString(spaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("folderId", SimScale.Sdk.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Folders>("/spaces/{spaceId}/folders/{folderId}/content/folders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListFoldersInFolder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Folders in Space root List folders located at the root level of a Space. Filtering or search capabilities are not supported. This only returns the folders at the root level of a Space, without a recursive expansion to child folders.
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <param name="sort">A field to sort by. The available fields are: &#39;name&#39;, &#39;createdAt&#39; and &#39;lastModifiedAt&#39;. To indicate sorting direction, the field must be prefixed with &#39;+&#39; (ascending) or &#39;-&#39; (descending), e.g. ?sort&#x3D;+name (optional, default to &quot;-lastModifiedAt&quot;)</param>
        /// <returns>Folders</returns>
        public Folders ListFoldersInSpaceRoot (Guid? spaceId = default(Guid?), int? limit = 100, int? page = 1, string sort = "-lastModifiedAt")
        {
             SimScale.Sdk.Client.ApiResponse<Folders> localVarResponse = ListFoldersInSpaceRootWithHttpInfo(spaceId, limit, page, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Folders in Space root List folders located at the root level of a Space. Filtering or search capabilities are not supported. This only returns the folders at the root level of a Space, without a recursive expansion to child folders.
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <param name="sort">A field to sort by. The available fields are: &#39;name&#39;, &#39;createdAt&#39; and &#39;lastModifiedAt&#39;. To indicate sorting direction, the field must be prefixed with &#39;+&#39; (ascending) or &#39;-&#39; (descending), e.g. ?sort&#x3D;+name (optional, default to &quot;-lastModifiedAt&quot;)</param>
        /// <returns>ApiResponse of Folders</returns>
        public SimScale.Sdk.Client.ApiResponse< Folders > ListFoldersInSpaceRootWithHttpInfo (Guid? spaceId = default(Guid?), int? limit = 100, int? page = 1, string sort = "-lastModifiedAt")
        {
            // verify the required parameter 'spaceId' is set
            if (spaceId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'spaceId' when calling FoldersApi->ListFoldersInSpaceRoot");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("spaceId", SimScale.Sdk.Client.ClientUtils.ParameterToString(spaceId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Folders >("/spaces/{spaceId}/content/folders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListFoldersInSpaceRoot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Folders in Space root List folders located at the root level of a Space. Filtering or search capabilities are not supported. This only returns the folders at the root level of a Space, without a recursive expansion to child folders.
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <param name="sort">A field to sort by. The available fields are: &#39;name&#39;, &#39;createdAt&#39; and &#39;lastModifiedAt&#39;. To indicate sorting direction, the field must be prefixed with &#39;+&#39; (ascending) or &#39;-&#39; (descending), e.g. ?sort&#x3D;+name (optional, default to &quot;-lastModifiedAt&quot;)</param>
        /// <returns>Task of Folders</returns>
        public async System.Threading.Tasks.Task<Folders> ListFoldersInSpaceRootAsync (Guid? spaceId = default(Guid?), int? limit = 100, int? page = 1, string sort = "-lastModifiedAt")
        {
             SimScale.Sdk.Client.ApiResponse<Folders> localVarResponse = await ListFoldersInSpaceRootAsyncWithHttpInfo(spaceId, limit, page, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Folders in Space root List folders located at the root level of a Space. Filtering or search capabilities are not supported. This only returns the folders at the root level of a Space, without a recursive expansion to child folders.
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <param name="sort">A field to sort by. The available fields are: &#39;name&#39;, &#39;createdAt&#39; and &#39;lastModifiedAt&#39;. To indicate sorting direction, the field must be prefixed with &#39;+&#39; (ascending) or &#39;-&#39; (descending), e.g. ?sort&#x3D;+name (optional, default to &quot;-lastModifiedAt&quot;)</param>
        /// <returns>Task of ApiResponse (Folders)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<Folders>> ListFoldersInSpaceRootAsyncWithHttpInfo (Guid? spaceId = default(Guid?), int? limit = 100, int? page = 1, string sort = "-lastModifiedAt")
        {
            // verify the required parameter 'spaceId' is set
            if (spaceId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'spaceId' when calling FoldersApi->ListFoldersInSpaceRoot");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("spaceId", SimScale.Sdk.Client.ClientUtils.ParameterToString(spaceId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Folders>("/spaces/{spaceId}/content/folders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListFoldersInSpaceRoot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Projects in Folder List projects located in a Folder. Filtering or search capabilities are not supported. This only returns the projects of the queried folder, without a recursive expansion to child folders.
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="folderId">The folder ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <param name="sort">A field to sort by. The available fields are: &#39;name&#39;, &#39;createdAt&#39; and &#39;lastModifiedAt&#39;. To indicate sorting direction, the field must be prefixed with &#39;+&#39; (ascending) or &#39;-&#39; (descending), e.g. ?sort&#x3D;+name (optional, default to &quot;-lastModifiedAt&quot;)</param>
        /// <returns>Projects</returns>
        public Projects ListProjectsInFolder (Guid? spaceId = default(Guid?), Guid? folderId = default(Guid?), int? limit = 100, int? page = 1, string sort = "-lastModifiedAt")
        {
             SimScale.Sdk.Client.ApiResponse<Projects> localVarResponse = ListProjectsInFolderWithHttpInfo(spaceId, folderId, limit, page, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Projects in Folder List projects located in a Folder. Filtering or search capabilities are not supported. This only returns the projects of the queried folder, without a recursive expansion to child folders.
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="folderId">The folder ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <param name="sort">A field to sort by. The available fields are: &#39;name&#39;, &#39;createdAt&#39; and &#39;lastModifiedAt&#39;. To indicate sorting direction, the field must be prefixed with &#39;+&#39; (ascending) or &#39;-&#39; (descending), e.g. ?sort&#x3D;+name (optional, default to &quot;-lastModifiedAt&quot;)</param>
        /// <returns>ApiResponse of Projects</returns>
        public SimScale.Sdk.Client.ApiResponse< Projects > ListProjectsInFolderWithHttpInfo (Guid? spaceId = default(Guid?), Guid? folderId = default(Guid?), int? limit = 100, int? page = 1, string sort = "-lastModifiedAt")
        {
            // verify the required parameter 'spaceId' is set
            if (spaceId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'spaceId' when calling FoldersApi->ListProjectsInFolder");

            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'folderId' when calling FoldersApi->ListProjectsInFolder");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("spaceId", SimScale.Sdk.Client.ClientUtils.ParameterToString(spaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("folderId", SimScale.Sdk.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Projects >("/spaces/{spaceId}/folders/{folderId}/content/projects", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListProjectsInFolder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Projects in Folder List projects located in a Folder. Filtering or search capabilities are not supported. This only returns the projects of the queried folder, without a recursive expansion to child folders.
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="folderId">The folder ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <param name="sort">A field to sort by. The available fields are: &#39;name&#39;, &#39;createdAt&#39; and &#39;lastModifiedAt&#39;. To indicate sorting direction, the field must be prefixed with &#39;+&#39; (ascending) or &#39;-&#39; (descending), e.g. ?sort&#x3D;+name (optional, default to &quot;-lastModifiedAt&quot;)</param>
        /// <returns>Task of Projects</returns>
        public async System.Threading.Tasks.Task<Projects> ListProjectsInFolderAsync (Guid? spaceId = default(Guid?), Guid? folderId = default(Guid?), int? limit = 100, int? page = 1, string sort = "-lastModifiedAt")
        {
             SimScale.Sdk.Client.ApiResponse<Projects> localVarResponse = await ListProjectsInFolderAsyncWithHttpInfo(spaceId, folderId, limit, page, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Projects in Folder List projects located in a Folder. Filtering or search capabilities are not supported. This only returns the projects of the queried folder, without a recursive expansion to child folders.
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="folderId">The folder ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <param name="sort">A field to sort by. The available fields are: &#39;name&#39;, &#39;createdAt&#39; and &#39;lastModifiedAt&#39;. To indicate sorting direction, the field must be prefixed with &#39;+&#39; (ascending) or &#39;-&#39; (descending), e.g. ?sort&#x3D;+name (optional, default to &quot;-lastModifiedAt&quot;)</param>
        /// <returns>Task of ApiResponse (Projects)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<Projects>> ListProjectsInFolderAsyncWithHttpInfo (Guid? spaceId = default(Guid?), Guid? folderId = default(Guid?), int? limit = 100, int? page = 1, string sort = "-lastModifiedAt")
        {
            // verify the required parameter 'spaceId' is set
            if (spaceId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'spaceId' when calling FoldersApi->ListProjectsInFolder");

            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'folderId' when calling FoldersApi->ListProjectsInFolder");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("spaceId", SimScale.Sdk.Client.ClientUtils.ParameterToString(spaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("folderId", SimScale.Sdk.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Projects>("/spaces/{spaceId}/folders/{folderId}/content/projects", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListProjectsInFolder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Projects in Space root List projects located at the root level of a Space. Filtering or search capabilities are not supported. This only returns the projects at the root level of a Space, without a recursive expansion to child folders.
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <param name="sort">A field to sort by. The available fields are: &#39;name&#39;, &#39;createdAt&#39; and &#39;lastModifiedAt&#39;. To indicate sorting direction, the field must be prefixed with &#39;+&#39; (ascending) or &#39;-&#39; (descending), e.g. ?sort&#x3D;+name (optional, default to &quot;-lastModifiedAt&quot;)</param>
        /// <returns>Projects</returns>
        public Projects ListProjectsInSpaceRoot (Guid? spaceId = default(Guid?), int? limit = 100, int? page = 1, string sort = "-lastModifiedAt")
        {
             SimScale.Sdk.Client.ApiResponse<Projects> localVarResponse = ListProjectsInSpaceRootWithHttpInfo(spaceId, limit, page, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Projects in Space root List projects located at the root level of a Space. Filtering or search capabilities are not supported. This only returns the projects at the root level of a Space, without a recursive expansion to child folders.
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <param name="sort">A field to sort by. The available fields are: &#39;name&#39;, &#39;createdAt&#39; and &#39;lastModifiedAt&#39;. To indicate sorting direction, the field must be prefixed with &#39;+&#39; (ascending) or &#39;-&#39; (descending), e.g. ?sort&#x3D;+name (optional, default to &quot;-lastModifiedAt&quot;)</param>
        /// <returns>ApiResponse of Projects</returns>
        public SimScale.Sdk.Client.ApiResponse< Projects > ListProjectsInSpaceRootWithHttpInfo (Guid? spaceId = default(Guid?), int? limit = 100, int? page = 1, string sort = "-lastModifiedAt")
        {
            // verify the required parameter 'spaceId' is set
            if (spaceId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'spaceId' when calling FoldersApi->ListProjectsInSpaceRoot");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("spaceId", SimScale.Sdk.Client.ClientUtils.ParameterToString(spaceId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Projects >("/spaces/{spaceId}/content/projects", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListProjectsInSpaceRoot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Projects in Space root List projects located at the root level of a Space. Filtering or search capabilities are not supported. This only returns the projects at the root level of a Space, without a recursive expansion to child folders.
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <param name="sort">A field to sort by. The available fields are: &#39;name&#39;, &#39;createdAt&#39; and &#39;lastModifiedAt&#39;. To indicate sorting direction, the field must be prefixed with &#39;+&#39; (ascending) or &#39;-&#39; (descending), e.g. ?sort&#x3D;+name (optional, default to &quot;-lastModifiedAt&quot;)</param>
        /// <returns>Task of Projects</returns>
        public async System.Threading.Tasks.Task<Projects> ListProjectsInSpaceRootAsync (Guid? spaceId = default(Guid?), int? limit = 100, int? page = 1, string sort = "-lastModifiedAt")
        {
             SimScale.Sdk.Client.ApiResponse<Projects> localVarResponse = await ListProjectsInSpaceRootAsyncWithHttpInfo(spaceId, limit, page, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Projects in Space root List projects located at the root level of a Space. Filtering or search capabilities are not supported. This only returns the projects at the root level of a Space, without a recursive expansion to child folders.
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="limit">The number of items to return. (optional, default to 100)</param>
        /// <param name="page">The page number. Use in combination with limit. (optional, default to 1)</param>
        /// <param name="sort">A field to sort by. The available fields are: &#39;name&#39;, &#39;createdAt&#39; and &#39;lastModifiedAt&#39;. To indicate sorting direction, the field must be prefixed with &#39;+&#39; (ascending) or &#39;-&#39; (descending), e.g. ?sort&#x3D;+name (optional, default to &quot;-lastModifiedAt&quot;)</param>
        /// <returns>Task of ApiResponse (Projects)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<Projects>> ListProjectsInSpaceRootAsyncWithHttpInfo (Guid? spaceId = default(Guid?), int? limit = 100, int? page = 1, string sort = "-lastModifiedAt")
        {
            // verify the required parameter 'spaceId' is set
            if (spaceId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'spaceId' when calling FoldersApi->ListProjectsInSpaceRoot");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("spaceId", SimScale.Sdk.Client.ClientUtils.ParameterToString(spaceId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(SimScale.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Projects>("/spaces/{spaceId}/content/projects", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListProjectsInSpaceRoot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Move Content from Folder Move content from this folder. Several resources can be moved with the same request. All resources must be moved to the same target location. Folders cannot be moved to a different Space. Projects can only be moved to a Personal Space if the Space owner and the project owner match.
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="folderId">The folder ID</param>
        /// <param name="moveContentRequest"></param>
        /// <returns></returns>
        public void MoveContentFromFolder (Guid? spaceId = default(Guid?), Guid? folderId = default(Guid?), MoveContentRequest moveContentRequest = default(MoveContentRequest))
        {
             MoveContentFromFolderWithHttpInfo(spaceId, folderId, moveContentRequest);
        }

        /// <summary>
        /// Move Content from Folder Move content from this folder. Several resources can be moved with the same request. All resources must be moved to the same target location. Folders cannot be moved to a different Space. Projects can only be moved to a Personal Space if the Space owner and the project owner match.
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="folderId">The folder ID</param>
        /// <param name="moveContentRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public SimScale.Sdk.Client.ApiResponse<Object> MoveContentFromFolderWithHttpInfo (Guid? spaceId = default(Guid?), Guid? folderId = default(Guid?), MoveContentRequest moveContentRequest = default(MoveContentRequest))
        {
            // verify the required parameter 'spaceId' is set
            if (spaceId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'spaceId' when calling FoldersApi->MoveContentFromFolder");

            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'folderId' when calling FoldersApi->MoveContentFromFolder");

            // verify the required parameter 'moveContentRequest' is set
            if (moveContentRequest == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'moveContentRequest' when calling FoldersApi->MoveContentFromFolder");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("spaceId", SimScale.Sdk.Client.ClientUtils.ParameterToString(spaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("folderId", SimScale.Sdk.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            localVarRequestOptions.Data = moveContentRequest;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/spaces/{spaceId}/folders/{folderId}/move", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MoveContentFromFolder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Move Content from Folder Move content from this folder. Several resources can be moved with the same request. All resources must be moved to the same target location. Folders cannot be moved to a different Space. Projects can only be moved to a Personal Space if the Space owner and the project owner match.
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="folderId">The folder ID</param>
        /// <param name="moveContentRequest"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MoveContentFromFolderAsync (Guid? spaceId = default(Guid?), Guid? folderId = default(Guid?), MoveContentRequest moveContentRequest = default(MoveContentRequest))
        {
             await MoveContentFromFolderAsyncWithHttpInfo(spaceId, folderId, moveContentRequest);

        }

        /// <summary>
        /// Move Content from Folder Move content from this folder. Several resources can be moved with the same request. All resources must be moved to the same target location. Folders cannot be moved to a different Space. Projects can only be moved to a Personal Space if the Space owner and the project owner match.
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="folderId">The folder ID</param>
        /// <param name="moveContentRequest"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<Object>> MoveContentFromFolderAsyncWithHttpInfo (Guid? spaceId = default(Guid?), Guid? folderId = default(Guid?), MoveContentRequest moveContentRequest = default(MoveContentRequest))
        {
            // verify the required parameter 'spaceId' is set
            if (spaceId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'spaceId' when calling FoldersApi->MoveContentFromFolder");

            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'folderId' when calling FoldersApi->MoveContentFromFolder");

            // verify the required parameter 'moveContentRequest' is set
            if (moveContentRequest == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'moveContentRequest' when calling FoldersApi->MoveContentFromFolder");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("spaceId", SimScale.Sdk.Client.ClientUtils.ParameterToString(spaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("folderId", SimScale.Sdk.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            localVarRequestOptions.Data = moveContentRequest;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/spaces/{spaceId}/folders/{folderId}/move", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MoveContentFromFolder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Move Content from Space root Move content located at the root level of a Space. Several resources can be moved with the same request. All resources must be moved to the same target location. Folders cannot be moved to a different Space. Projects can only be moved to a Personal Space if the Space owner and the project owner match.
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="moveContentRequest"></param>
        /// <returns></returns>
        public void MoveContentFromSpaceRoot (Guid? spaceId = default(Guid?), MoveContentRequest moveContentRequest = default(MoveContentRequest))
        {
             MoveContentFromSpaceRootWithHttpInfo(spaceId, moveContentRequest);
        }

        /// <summary>
        /// Move Content from Space root Move content located at the root level of a Space. Several resources can be moved with the same request. All resources must be moved to the same target location. Folders cannot be moved to a different Space. Projects can only be moved to a Personal Space if the Space owner and the project owner match.
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="moveContentRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public SimScale.Sdk.Client.ApiResponse<Object> MoveContentFromSpaceRootWithHttpInfo (Guid? spaceId = default(Guid?), MoveContentRequest moveContentRequest = default(MoveContentRequest))
        {
            // verify the required parameter 'spaceId' is set
            if (spaceId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'spaceId' when calling FoldersApi->MoveContentFromSpaceRoot");

            // verify the required parameter 'moveContentRequest' is set
            if (moveContentRequest == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'moveContentRequest' when calling FoldersApi->MoveContentFromSpaceRoot");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("spaceId", SimScale.Sdk.Client.ClientUtils.ParameterToString(spaceId)); // path parameter
            localVarRequestOptions.Data = moveContentRequest;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/spaces/{spaceId}/move", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MoveContentFromSpaceRoot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Move Content from Space root Move content located at the root level of a Space. Several resources can be moved with the same request. All resources must be moved to the same target location. Folders cannot be moved to a different Space. Projects can only be moved to a Personal Space if the Space owner and the project owner match.
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="moveContentRequest"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MoveContentFromSpaceRootAsync (Guid? spaceId = default(Guid?), MoveContentRequest moveContentRequest = default(MoveContentRequest))
        {
             await MoveContentFromSpaceRootAsyncWithHttpInfo(spaceId, moveContentRequest);

        }

        /// <summary>
        /// Move Content from Space root Move content located at the root level of a Space. Several resources can be moved with the same request. All resources must be moved to the same target location. Folders cannot be moved to a different Space. Projects can only be moved to a Personal Space if the Space owner and the project owner match.
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId">The space ID</param>
        /// <param name="moveContentRequest"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<Object>> MoveContentFromSpaceRootAsyncWithHttpInfo (Guid? spaceId = default(Guid?), MoveContentRequest moveContentRequest = default(MoveContentRequest))
        {
            // verify the required parameter 'spaceId' is set
            if (spaceId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'spaceId' when calling FoldersApi->MoveContentFromSpaceRoot");

            // verify the required parameter 'moveContentRequest' is set
            if (moveContentRequest == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'moveContentRequest' when calling FoldersApi->MoveContentFromSpaceRoot");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("spaceId", SimScale.Sdk.Client.ClientUtils.ParameterToString(spaceId)); // path parameter
            localVarRequestOptions.Data = moveContentRequest;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/spaces/{spaceId}/move", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MoveContentFromSpaceRoot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Folder Update Folder metadata
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="folderId"></param>
        /// <param name="folder"></param>
        /// <returns>Folder</returns>
        public Folder UpdateFolder (Guid? spaceId = default(Guid?), Guid? folderId = default(Guid?), Folder folder = default(Folder))
        {
             SimScale.Sdk.Client.ApiResponse<Folder> localVarResponse = UpdateFolderWithHttpInfo(spaceId, folderId, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Folder Update Folder metadata
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="folderId"></param>
        /// <param name="folder"></param>
        /// <returns>ApiResponse of Folder</returns>
        public SimScale.Sdk.Client.ApiResponse< Folder > UpdateFolderWithHttpInfo (Guid? spaceId = default(Guid?), Guid? folderId = default(Guid?), Folder folder = default(Folder))
        {
            // verify the required parameter 'spaceId' is set
            if (spaceId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'spaceId' when calling FoldersApi->UpdateFolder");

            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'folderId' when calling FoldersApi->UpdateFolder");

            // verify the required parameter 'folder' is set
            if (folder == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'folder' when calling FoldersApi->UpdateFolder");

            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimScale.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimScale.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("spaceId", SimScale.Sdk.Client.ClientUtils.ParameterToString(spaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("folderId", SimScale.Sdk.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            localVarRequestOptions.Data = folder;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< Folder >("/spaces/{spaceId}/folders/{folderId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFolder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Folder Update Folder metadata
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="folderId"></param>
        /// <param name="folder"></param>
        /// <returns>Task of Folder</returns>
        public async System.Threading.Tasks.Task<Folder> UpdateFolderAsync (Guid? spaceId = default(Guid?), Guid? folderId = default(Guid?), Folder folder = default(Folder))
        {
             SimScale.Sdk.Client.ApiResponse<Folder> localVarResponse = await UpdateFolderAsyncWithHttpInfo(spaceId, folderId, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Folder Update Folder metadata
        /// </summary>
        /// <exception cref="SimScale.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="folderId"></param>
        /// <param name="folder"></param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        public async System.Threading.Tasks.Task<SimScale.Sdk.Client.ApiResponse<Folder>> UpdateFolderAsyncWithHttpInfo (Guid? spaceId = default(Guid?), Guid? folderId = default(Guid?), Folder folder = default(Folder))
        {
            // verify the required parameter 'spaceId' is set
            if (spaceId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'spaceId' when calling FoldersApi->UpdateFolder");

            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'folderId' when calling FoldersApi->UpdateFolder");

            // verify the required parameter 'folder' is set
            if (folder == null)
                throw new SimScale.Sdk.Client.ApiException(400, "Missing required parameter 'folder' when calling FoldersApi->UpdateFolder");


            SimScale.Sdk.Client.RequestOptions localVarRequestOptions = new SimScale.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("spaceId", SimScale.Sdk.Client.ClientUtils.ParameterToString(spaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("folderId", SimScale.Sdk.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            localVarRequestOptions.Data = folder;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Folder>("/spaces/{spaceId}/folders/{folderId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFolder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
